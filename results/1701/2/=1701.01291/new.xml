<?xml version="1.0" encoding="UTF-8"?>
<opml version="2.0">
  <head>
    <title>Flexible Representation and Manipulation\
of Audio Signals on Quantum Computers</title>
    <abstract> </abstract>
  </head>
  <body>
<outline text="A flexible representation of quantum audio and its preparations">
  <outline text="FRQA" _note="In electrical engineering, analog audio signals are often considered as&#10;a voltage that is varying over time. An Analog-to-Digital Converter&#10;(ADC) discretely takes samples from the analog signals at a given&#10;frequency (i.e. sampling rate) and according to the given binary&#10;sequence length (a.k.a. resolution), each sampled value is converted&#10;into a number based on its voltage level. In this fashion, digital audio&#10;is produced and represented as a sequence of numbers that express&#10;instantaneous amplitudes of the audio signal being sampled.&#10;&#10;As a quantum representation, QRDA utilizes two entangled qubit sequences&#10;to store the audio amplitude and time information. Therein, the&#10;amplitude information is considered as a string of non-negative integers&#10;in the form: where is the length of binary sequence used to store each&#10;number, ( = 0, 1, …, -1) denotes the amplitude value in an -sized QRDA&#10;audio.&#10;&#10;This extension facilitates the audio representation and manipulation in&#10;quantum computing domain. Nonetheless, for reasons we adduce below, the&#10;unipolar encoding strategy used in QRDA may not be applicable for the&#10;accurate computation and processing operations in quantum audio&#10;processing:&#10;&#10;In QRDA, in Eq. (\[eq1\]) can only represent non-negative numbers.&#10;Hence, some arithmetic operations pertaining to amplitude values are&#10;prone to errors. For instance, there are two amplitude values and (), it&#10;is virtually impossible to implement the operation and depict the&#10;result.&#10;&#10;QRDA is an unipolar representation, thus it cannot display or determine&#10;the midrange of the waveform in the processing operations. Accordingly,&#10;the single values from two waveforms are added together is by no means&#10;to give a correct mixing function, e.g., addition of the opposite&#10;amplitude values in two waveforms will accumulate to higher amplitude&#10;instead of counteracting or offsetting each other.&#10;&#10;In this study, a flexible representation of quantum audio, i.e. FRQA, is&#10;proposed. FRQA encodes the amplitude values in quantum audio in a&#10;bipolar (both non-negative and negative) manner, i.e. {, …, -1, 0, 1, …,&#10;}. Compared with the only known effort to perform audio signal&#10;processing on quantum computers (i.e. the QRDA), our proposal is more&#10;intuitive and graphic with the sign indicating the variation of the&#10;waveform, making it conceptually more like the real waveform of digital&#10;audio signals. More importantly, FRQA facilitates the realization of&#10;basic processing operations in an effective manner, e.g., (1) FRQA&#10;allows two sample values to be accurately added (or mixed in audio&#10;parlance) and it enables easy handling of the overflow and warp-around&#10;situations by using quantum circuits; (2) FRQA permits signal&#10;subtraction to be executed by simple logical addition operation with the&#10;inverted inputs, which offers a considerable saving in hardware&#10;complexity (since only carry logic is necessary and no borrow mechanism&#10;need be supported).&#10;&#10;As conceived, the formalism of logic arithmetics provide FRQA with the&#10;adequate tools needed for effective quantum audio processing. Moreover,&#10;in digital audio processing, the most widespread method to represent&#10;bipolar numbers is based on using two’s complement notation. Hence, the&#10;extension to encode the amplitude value in quantum audio using the two’s&#10;complement arithmetic is both analogous and astute. Equation (\[eq2\])&#10;describes the stipulation in the form: where denotes the time&#10;information of a -sized quantum audio signal, is the binary sequence&#10;encoding the two’s complement notation of the amplitude value. Two cases&#10;of the binary sequence are listed as follows:&#10;&#10;If the amplitude value is non-negative, then and is simply represented&#10;as a binary sequence of the value itself.&#10;&#10;If the amplitude value is negative, then and is represented by the two’s&#10;complement mode of its absolute value.&#10;&#10;Therefore, the quantum representative expression of an -sized FRQA audio&#10;can be written as below: where is the two’s complement representation of&#10;each amplitude value and , , is the corresponding time information. The&#10;state is normalized, i.e. . It is trivial that, as formalised in Eq.&#10;(\[eq3\]), the FRQA needs qubits to represent a quantum audio with&#10;samples.&#10;&#10;For an -sized ( cannot be represented by ) FRQA audio, employing qubits&#10;to represent the time information will produce audio redundancies . In&#10;this study, the amplitude values of all the redundancies are set as , so&#10;the FRQA state in Eq. (\[eq3\]) can be rewritten into the form: where&#10;&#10;Figure \[fig1\] shows a segment of an audio signal and its&#10;representative expression using the FRQA representation. In this&#10;example, amplitude values are sampled between -2 and 3, for which 3&#10;qubits are needed to store the amplitude information in FRQA audio. The&#10;length of the audio is 13, then . Therefore, in total 7 qubits are&#10;required to represent this quantum audio signal.&#10;&#10;">
  </outline>
  <outline text="FRQA preparation" _note="In quantum computation, in order to prepare a desired quantum audio&#10;signal, it is necessary to transform a quantum computer from its&#10;initialized state to the specified state. The quantum mechanical build&#10;up of quantum computers dictate that all transformations are unitary in&#10;nature. This specifies the use of unitary matrices and simple basic&#10;gates to manipulate quantum data. In this subsection, we will present a&#10;description of the procedure required to prepare an FRQA state.&#10;&#10;As stated earlier, in digital audio, the value of each sampled point is&#10;stored on an assigned -length binary sequence, i.e. , , which indicates&#10;the sequence is able to hold the amplitude values from 0 to . In order&#10;to quantize the amplitude value () and convert it into the two’s&#10;complement system (), we need to perform the value-setting operation&#10;which could be achieved by the following two sub-operations:&#10;&#10;QUANTIZATION: Using the classical binary representation of as the&#10;reference, the initialized states in the quantum computer could be&#10;transformed into their desired quantum states. The layout of how to&#10;accomplish this has been widely discussed in the literature, notably .&#10;&#10;CONVERSION: In order to convert the ordinary quantum state to its two’s&#10;complement system, the CNOT gate operation is executed on the&#10;Most-Significant-Bit (MSB) of the qubit sequence. In this manner, the&#10;output will be the desired quantum amplitude state, i.e. .&#10;&#10;To illustrate these steps, consider the conversion of a 3-qubit&#10;resolution to the amplitude information in quantum audio as presented in&#10;TABLE \[tab1\]. A 3-qubit resolution holds the values ranging from 0 to&#10;7. These numbers are binarized and quantized in two’s complement&#10;notation for further computation in quantum audio processing.&#10;&#10;\[tab1\]&#10;&#10;\[tab1\]&#10;&#10;[cccc]{} Resolution &amp; Binary sequence &amp; Two’s complement &amp; Amplitude\&#10;7 &amp; 111 &amp; 011 &amp; 3\&#10;6 &amp; 110 &amp; 010 &amp; 2\&#10;5 &amp; 101 &amp; 001 &amp; 1\&#10;4 &amp; 100 &amp; 000 &amp; 0\&#10;3 &amp; 011 &amp; 111 &amp; -1\&#10;2 &amp; 010 &amp; 110 &amp; -2\&#10;1 &amp; 001 &amp; 101 &amp; -3\&#10;0 &amp; 000 &amp; 100 &amp; -4\&#10;&#10;Therefore, the value-setting operation to perform the above procedure&#10;can be executed using Eqs. (\[eq6\]) and (\[eq7\]): where is the XOR&#10;operation. It is apparent to clarify that the operation works by means&#10;of an additional CNOT gate to negate the MSB only when , otherwise, it&#10;remains unchanged. Following this, the quantum transformation of to set&#10;amplitude value for each sample is shown in Eq. (\[eq8\]):&#10;&#10;In this manner, a unitary transform that encodes the amplitude&#10;information by means of two’s complement arithmetic is available during&#10;the preparation procedure. There are two steps to achieve the&#10;preparation procedure that are discussed as below:&#10;&#10;**Step 1**: The initial state is transformed into the intermediate state&#10;using the 2-D identity matrix I and 2-D Hadamard matrix H presented in&#10;Eq. (\[eq9\]):&#10;&#10;Since the tensor product of Identity matrices and Hadamard matrices are&#10;denoted by and , respectively, applying the transform on produces the&#10;intermediate state in the form:&#10;&#10;So far, the time information of the FRQA model has been initialized. At&#10;this moment, the intermediate state can be regarded as the superposition&#10;of all the samples of an empty digital audio, i.e. with all amplitude&#10;values set as .&#10;&#10;**Step 2**: The value-setting operation is used to generate the&#10;amplitude information for each sample. Since can only handle one sample&#10;at a time, considering a -sized quantum audio, sub-operations are needed&#10;to execute this transformation. While is considered as an -controlled&#10;operation to integrate the amplitude values into each instant of time.&#10;For a given sample , is defined in Eq. (\[eq11\]):&#10;&#10;Applying on the the intermediate state gives us:&#10;&#10;From Eq. (\[eq12\]), it is clear that for all the sub-operations , we&#10;have:&#10;&#10;After the two steps described above, the initialized state is&#10;transformed into the desired FRQA state by applying the unitary&#10;transform . Subsequently, we will continue to discuss the complexity of&#10;the preparation procedure.&#10;&#10;Complexity theory on quantum computation has been studied to discover&#10;and analyze the transformations from the basic gates, viz. the&#10;complexity of quantum algorithms is usually computed in terms of quantum&#10;gates . Indeed, the circuit complexity depends largely on the strategy&#10;employed for circuit decomposition and the basic operation unit that is&#10;designated to be . In this study, we will confine our discussion to the&#10;CNOT gate for the complexity evaluation as it is a relatively&#10;“expensive” elementary gate that can be easily utilized to simulate the&#10;other complicated gates. The decomposition networks for some of the&#10;complicated quantum gates used in this paper is presented in Fig.&#10;\[fig2\], where the -controlled NOT gate can be decomposed into Toffoli&#10;gates and 1 CNOT gate \[as indicated in (c)\] and the Toffoli gate can&#10;be approximately simulated by 6 CNOT gates .&#10;&#10;Based on the foregoing, it is clear that the implementation of transform&#10;in Step 1 requires Hadamard gates to execute. In addition, transform in&#10;Step 2 can be divided into sub-operations (i.e. ) to store the amplitude&#10;information for each sample. Therefore, with the assistance of enough&#10;ancillary qubits, each sub-operation can be directly implemented using&#10;Toffoli gates and no more than CNOT gates. Hence, the complexity of&#10;preparing a -sized FRQA state is: which indicates the efficiency of the&#10;preparation process. In order to further illustrate the complexity of&#10;constructing an FRQA quantum audio, we select the initialization of the&#10;sample at in Fig. \[fig1\] as an example. The network for implementing&#10;the operation, i.e. \[when K = 6 in Eq. (\[eq11\])\], is depicted in&#10;Fig. \[fig3\].&#10;&#10;">
  </outline>
  <outline text="FRQA retrieval" _note="The essential requirements for representing a quantum audio are the&#10;simplicity and efficiency in the storage and retrieval of the audio&#10;information. The storage of an FRQA audio is achieved by the preparation&#10;process as discussed in the preceding subsection. In this subsection,&#10;the rudiments required for the FRQA signal retrieval will be formalised.&#10;&#10;Quantum measurement is the unique way of recovering classical&#10;information from a quantum state. To retrieve the amplitude information&#10;of each sample, quantum measurements and as defined in Eqs. (\[eq15\])&#10;and (\[eq16\]) are used:&#10;&#10;Firstly, executing the quantum measurement operation on the time&#10;sequence extracts corresponding information of sample as , which is&#10;shown in Eq. (\[eq17\]): and then, the projective measurement is used to&#10;recover the amplitude value from the quantum state:&#10;&#10;Through these measurement operations, the amplitude value of sample will&#10;be recovered. This means that all the samples in a quantum audio signal&#10;can be recovered in the same way, so the original digital audio can be&#10;retrieved from the FRQA state (Note that it is the theoretical&#10;discussion about the quantum information retrieval. We will not touch at&#10;all on the consequence of decoherence or any errors appeared in the&#10;process.)">
  </outline>
</outline>
<outline text="Operations on quantum audio signals" _note="Basic signal operations are the foundations of digital audio processing.&#10;The ability to extend similar operations to quantum audio processing is&#10;essential to validating the utility of this emerging sub-field of&#10;quantum information processing. In this section, we will present a few&#10;basic audio signal operations including signal addition, signal&#10;inversion, signal delay, and signal reversal based on the FRQA&#10;representation.">
  <outline text="Signal addition" _note="Signal addition is among the fundamental operations in audio signal&#10;processing. This operation involves the addition of amplitudes of two or&#10;more signals at each instant of time. By means of this operation, a&#10;series of audio signal processing like echo or reverb addition and&#10;active noise reduction can be implemented. Representing the amplitude&#10;values in two’s complement system in FRQA facilitates determining the&#10;results of the arithmetic operations and depicting the waveform with&#10;respect to the midrange. Hence, we can define the signal addition&#10;operation based on this arithmetic advantage as below.&#10;&#10;Assuming that and are two audio segments as presented in Eqs.&#10;(\[eq19\])-(\[eq20\]), the signal addition operation produces the output&#10;of as shown in Eq. (\[eq21\]): where and where so where&#10;&#10;Quantum algorithms are tools for constructing advanced operations using&#10;circuit elements. In order to construct the quantum circuit to execute&#10;the signal addition operation, we start by introducing two commonly-used&#10;quantum modules that are presented in Fig. \[fig4\].&#10;&#10;The ADDER module is designed to realize the operation , where and are&#10;two quantum sequences both with qubits, and = is a quantum sequence with&#10;qubits that represents the result of addition. By using the ADDER module&#10;and necessary control conditions, we can realize the addition of&#10;amplitude values in two segments of quantum audio at any given instant&#10;of time.&#10;&#10;The other module presented in Fig. \[fig4\] is the quantum comparator&#10;module that is used to compare two -qubit binary sequences ( and ) and&#10;stores the result in the ancilla qubits . A useful output of in this&#10;study is when , then . The comparator module guarantees that the two&#10;operands in the addition are the amplitude values of the two audio&#10;segments at the same instant of time.&#10;&#10;Hence, the operation of FRQA-based signal addition operation can be&#10;written in the form:&#10;&#10;The quantum circuit to realize the operation is depicted in Fig.&#10;\[fig5\], where the ADDER operation is applied on the amplitude content&#10;and the comparator operation is applied on the time content.&#10;Additionally, in order to avoid the overflow during two’s complement&#10;addition, we design a sign extension module (denoted as “EXT&quot; in Fig.&#10;\[fig5\]) which helps to increase the length of the binary sequence&#10;while preserving the sign information in the ADDER module. To conclude&#10;our discussion of the signal addition operation, an example for the case&#10;when and is presented in Fig. \[fig6\].&#10;&#10;As seen in Fig. \[fig5\], the circuit network for implementing the&#10;signal addition operation is divided into 3 parts: a comparator module,&#10;a -controlled “EXT&quot; module, and a -controlled ADDER module.&#10;Implementations of the ADDER and comparator module have been extensively&#10;discussed in and . Additionally, the computational complexities of the&#10;two modules are and , respectively, where and denote the length of the&#10;inputs as shown in Fig. \[fig4\]. Consequently, to effectively quantify&#10;the complexity of the operation depicted in Fig. \[fig5\], we only need&#10;to determine the complexity of the -controlled “EXT&quot; module and&#10;-controlled ADDER module.&#10;&#10;The -controlled “EXT&quot; module is a pair of -controlled NOT gates, so&#10;complexity of this part is . The ADDER module consists of Toffoli gates&#10;and CNOT gates , so the -controlled unit consists of -controlled NOT&#10;gates and -controlled NOT gates, thereby the complexity of this&#10;controlled module is . Based on these analyses, the complexity of the&#10;entire signal addition operation is .&#10;&#10;">
  </outline>
  <outline text="Signal inversion" _note="Inverting a signal is common in signal processing algorithms. A&#10;meaningful usage of inversion is to transform the signal subtraction to&#10;signal addition by means of inverted inputs (audio cancellation is&#10;realized as so). In audio signal processing, signal inversion is&#10;realized by inverting all amplitude values of an audio signal. When&#10;amplitude values are represented by bipolar values, the operation is&#10;essentially an alteration of positive and negative signs. In this&#10;subsection, the FRQA-based signal inversion operation is formalised.&#10;&#10;Assuming that is an FRQA audio in the form presented in Eq. (\[eq3\]),&#10;the signal inversion operation applied on will produce the output of in&#10;the form shown in Eq. (\[eq23\]): where&#10;&#10;As in two’s complement arithmetic, an effective way to negate a number&#10;is inverting all the qubits and adding “1”. This procedure in quantum&#10;audio processing is further explained using the following steps:&#10;&#10;**Step 1:** Invert all the qubits in by performing operation : where&#10;&#10;**Step 2:** Add “1” to the inverted result and neglect the overflow by&#10;applying operation : where&#10;&#10;It should be noted that similar to what is obtained in (classical)&#10;digital audio signal processing, a slight skewing of the data range is&#10;unavoidable as we cannot find the inverted counterpart of in the sampled&#10;amplitude values . To overcome this, we restrict our discussion within&#10;the amplitude value range from to . The quantum circuit for inverting an&#10;FRQA audio signal is shown in Fig. \[fig7\], wherein, the operation in&#10;Step 1 can be directly implemented by using NOT gates and in the&#10;operation in Step 2, Toffoli gates and CNOT gates are required, thus the&#10;complexity of this operation is .&#10;&#10;A simple example to illustrate how a quantum audio signal is inverted&#10;would suffice. The circuit network required to execute this procedure is&#10;presented in Fig. \[fig8\], where the FRQA audio in Fig. \[fig6\] is&#10;used as the input audio signal.&#10;&#10;">
  </outline>
  <outline text="Signal delay" _note="Signal delay is the operation that records an input signal and then&#10;plays it back after a period of time. This operation is a common audio&#10;effect that is often used to create the sound of a repeating and&#10;decaying echo. In this subsection, the FRQA-based signal delay operation&#10;is formalised.&#10;&#10;Assuming is the original audio signal, then audio signal is regarded as&#10;a delayed version of audio if:&#10;&#10;where denotes the time information of amplitude values, is a fixed&#10;interval which specifies the desired delay of the system. Using the&#10;foregoing, the signal delay operation can be described using Eqs.&#10;(\[eq27\])-(\[eq28\]):&#10;&#10;Both the time information and of the original and delayed audio signal&#10;need to be in the range , where apparently is beyond the interval.&#10;Therefore, we separate the time information into two parts, i.e. and ,&#10;for discussion.&#10;&#10;As shown in Eq. (\[eq28\]), when , , in which case, the time information&#10;can be obtained directly by means of the ADDER module on time content.&#10;However, when , we need to employ the carry qubit of the ADDER module to&#10;achieve the interval shift and set the amplitudes as the delay period.&#10;&#10;The general circuit for the quantum audio signal delay operation is&#10;presented in Fig. \[fig9\]. In addition, Fig. \[fig10\] presents a&#10;simple example of the FRQA-based signal delay, where (a) is the input&#10;audio signal ( and ) and (b) is the signal that is delayed by 2 time&#10;units. The quantum circuit for this operation can be constructed as in&#10;Fig. \[fig11\].&#10;&#10;The implementation of signal delay consists of one ADDER module (on time&#10;content) and Toffoli gates, so the complexity of this operation is .&#10;&#10;">
  </outline>
  <outline text="Signal reversal" _note="Signal reversal is the process of reversing a selected audio signal such&#10;that the end of the signal is heard first and the beginning last. This&#10;operation can be used to create interesting sound effects or make small&#10;portions of inappropriate language unintelligible. Based on the FRQA&#10;state, we can define the signal reversal operation on quantum computers&#10;and construct the quantum circuit to accomplish it.&#10;&#10;Assuming that is an FRQA audio signal in the form presented in Eq.&#10;(\[eq3\]), the signal reversal operation applied on produces an output&#10;of the form:&#10;&#10;where&#10;&#10;Hence, the signal reversal operation can be defined as below:&#10;&#10;The general circuit to execute the signal reversal operation is&#10;presented in Fig. \[fig12\](a). Although it is glaring that this&#10;operation can be directly implemented by using NOT gates, in order to&#10;further enunciate its realization, we use the quantum audio signal in&#10;Fig. \[fig10\](a) as input signal whose output is presented in Fig.&#10;\[fig12\](b). As seen, the result shows that all the time points are&#10;played in a reversed order.&#10;&#10;In addition, some control condition constraints on the time content will&#10;allow us to confine the execution of the reversal operation to a desired&#10;period. For example, in Fig. \[fig13\](a), the time wire is employed as&#10;the control wire to confine the reversal operation to the last half of&#10;the audio signal. As seen from the result in Fig. \[fig13\](b) that only&#10;the last 4 time points in Fig. \[fig10\](a) are reversed and the others&#10;are retained as in the input signal.&#10;&#10;It should be mentioned that the complexity of the extended operation&#10;increases with the number of control qubits. In the worst case, the&#10;implementation of this operation requires an -controlled NOT gate,&#10;thereby the complexity is .&#10;&#10;">
  </outline>
</outline>
<outline text="Conclusions" _note="The characteristics of the physical support used to embody information&#10;decide the power of a certain computational paradigm. Quantum&#10;computation has emerged as a powerful tool for efficient and secure&#10;information processing. As with any effort to process any type of&#10;information, the requirements for its encoding must be formalised. The&#10;study presented in this work explored the use of quantum mechanical&#10;properties that are at the core of quantum computers in order to encode,&#10;store, and manipulate audio signals. Inspired by the rudiments employed&#10;to capture digital audio signals, the first known effort to represent&#10;quantum audio signals (the QRDA) was broached. While QRDA extended audio&#10;processing into the quantum computing domain, its numerical&#10;representation of amplitude values only offers an encoding method for&#10;unipolar (i.e. non-negative) numbers so that its operations are&#10;susceptible to errors. The FRQA proposed in this study offers an&#10;accurate computation and extensive signal operations alternative to the&#10;QRDA. The FRQA protocol encodes amplitude values in two’s complement&#10;notation so that the arithmetic advantages of doing so can be utilized&#10;to facilitate the construction of quantum circuits for amplitude&#10;transformations. By exploiting this, various operations that allow for&#10;designing advanced audio processing applications can be proposed.&#10;&#10;Based on this new FRQA representation, basic manipulations targeting the&#10;amplitude and time components of the audio signals such as the quantum&#10;audio signal addition, inversion, reversal, and delay were formalised&#10;and insightful examples depicting their utility were also presented and&#10;discussed. The quantum circuits required to execute these basic&#10;operations on quantum audio signals were also presented and the&#10;computational requirements for their realization were analyzed.&#10;&#10;In future work, the results from this study can be extended towards the&#10;following directions. First, considering the importance of basic&#10;operations in quantum audio processing, the operations presented in the&#10;study need to improved and new ones added to ensure the execution of&#10;more advanced algorithmic tasks. Secondly, the possibility of using&#10;quantum-based signal processing operations, such as quantum Fourier&#10;transformations and wavelet transformations which have proven&#10;well-studied in other quantum information processing applications to&#10;facilitate quantum audio manipulation needs to explored. Thirdly, the&#10;“silent” quantum movies proposed in provided impetus for the need of&#10;sound or audio on the quantum computing paradigm. A useful integration&#10;of movie strip (technically a collection of quantum images) with audio&#10;signal information will complete the quantum movie representation and&#10;facilitate more interesting applications. Finally, when the basic&#10;quantum audio signal operations are perfected, they could serve as the&#10;building block for the realization of more sophisticated algorithms used&#10;for particular applications such as watermarking, steganography, and&#10;encryption. These improvements will facilitate multimedia security&#10;during quantum information transmission.">
</outline>
<outline text="Acknowledgments" _note="This work is supported by the National Natural Science Foundation of&#10;China (No. 61502053). Additionally, AMI acknowledges funding from the&#10;Prince Sattam Bin Abdulaziz University via the Deanship for Scientific&#10;Research Project Number 2016/01/6641.">
</outline>
<outline text="Acknowledgment" _note="[99]{} Feynman R. Simulating physics with computers. International&#10;Journal of Theoretical Physics, 1982, 21: 467-488 Deutsch D. Quantum&#10;theory, the church-turing principle and the universal quantum computer.&#10;In: Proceedings of the Royal Society of London A, 1985, 97-117 Shor P.&#10;Algorithms for quantum computation: discrete logarithms and factoring.&#10;In: Proceedings of the 35th Annual Symposium on Foundations of Computer&#10;Science, 1994, 124-134 Grover L. A fast quantum mechanical algorithm for&#10;database search. In: Proceedings of the 28th Annual ACM Symposium on&#10;Theory of Computing, 1996, 212-219 Vlasov A. Quantum computations and&#10;images recognition. arXiv:quant-ph/9703010, 1997 Lugiato L, Gatti A,&#10;Brambilla E. Quantum imaging. Journal of Optics B: Quantum and&#10;Semiclassical Optics, 2002, 4: 176-183 Yan F, Iliyasu A, Venegas-Andraca&#10;S. A survey of quantum image representations. Quantum Information&#10;Processing, 2016, 15: 1-35 Zölzer U. Digital audio signal processing.&#10;John Wiley &amp; Sons Ltd, United Kingdom, 2008 Wang J. QRDA: quantum&#10;representation of digital audio. International Journal of Theoretical&#10;Physics, 2016, 55: 1622-1641 Barenco A, Bennett C, Cleve R, et al.&#10;Elementary gates for quantum computation. Physical Review A, 1995, 52:&#10;3457-3467 Venegas-Andraca S, Bose S. Storing, processing, and retrieving&#10;an image using quantum mechanics. In: Proceedings of SPIE Conference of&#10;Quantum Information and Computation, 2003, 134-147 Le P, Dong F, Hirota&#10;K. A flexible representation of quantum images for polynomial&#10;preparation, image compression, and processing operations. Quantum&#10;Information Processing, 2011, 10: 63-84 Vlatko V, Adriano B, Artur E.&#10;Quantum networks for elementary arithmetic operations. Physical Review&#10;A, 1996, 54: 147-153 Nielsen M, Chuang I. Quantum computation and&#10;quantum information. Cambridge University Press, United Kingdom, 2000&#10;Wang J, Jiang N, Wang L. Quantum image translation. Quantum Information&#10;Processing, 2015, 14: 1589-1604 Jiang N, Wu W, Wang L. The quantum&#10;realization of arnold and fibonacci image scrambling. Quantum&#10;Information Processing, 2014, 13: 1223-1236 Fijany A, Williams C.&#10;Quantum wavelet transforms fast algorithms and complete circuits.&#10;Lecture Notes in Computer Science, 1999, 1509: 10-33 Iliyasu A, Le P,&#10;Dong F, et al. A framework for representing and producing movies on&#10;quantum computers. International Journal of Quantum Information, 2011,&#10;9: 1459-1497">
</outline>
  </body>
</opml>