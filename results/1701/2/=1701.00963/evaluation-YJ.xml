<?xml version="1.0" encoding="UTF-8"?>
<opml version="2.0">
  <head>
    <title></title>
    <abstract> </abstract>
  </head>
  <body>
<outline text="Implementation and Evaluation" _note="In the previous sections, we presented the RADIUS system design and&#10;analyzed the impact of its parameters on the detection performance.&#10;Based on these, we implemented the DA component of RADIUS for TelosB&#10;sensor platforms and the VCC for standard PCs. In this section, we&#10;detail our implementation and discuss the system overhead. At last, we&#10;show the evaluation results on the detection performance of the overall&#10;implemented system in an indoor testbed.">
  <outline text="System Implementation" _note="In this section, we first describe the implementation details of the two&#10;major RADIUS components: the DA and the VCC. We introduce the&#10;programming interface of the DA to show that it is easy to use for&#10;higher-layer services and applications, followed by the implementation&#10;details of the VCC and of the RADIUS IoT extension.&#10;&#10;``` {frame=&quot;single&quot;}&#10;  % Start your code-block&#10;    &#10;    interface DetectionAgent {&#10;    command void configureDA(Struct_Param parameters);&#10;    command error_t start_Training();&#10;    command error_t stop_Training();&#10;    command error_t start_Detection();&#10;    command error_t stop_Detection();&#10;    command void update_RSSI(uint8_t rssi, uint8_t childId);&#10;    }&#10;    &#10;```&#10;&#10;To ease the integration of RADIUS into higher-layer applications, we&#10;implemented the DA component as a module on TinyOS 2.1.2, which provides&#10;an interface `DetectionAgent` (see Figure \[fig:TinyOSinterface\]). The&#10;`configureDA` command is used to configure DA with user-specified&#10;parameter settings (e.g., the initial ) as provided in configuration&#10;messages sent by the VCC. The interface also provides control commands&#10;such as `start_Training` or `start_Detection` for executing the&#10;different phases in RADIUS. The command `update_RSSI` is used to update&#10;the RSSI distribution of each link during both the training and the&#10;detection phases. With this programming interface, an application only&#10;needs to react to VCC’s control messages and call the different commands&#10;accordingly. Note that RADIUS is not restricted to TelosB or TinyOS and&#10;can be easily adapted to other embedded devices with low-power radios.&#10;&#10;The component VCC, running on a standard PC, is implemented in Java. It&#10;processes the alarms received from the network and produces diagnosis&#10;results reporting the relevant anomalies and their locations for the&#10;nodes that are experiencing high packet losses, which assists the system&#10;operator in identifying possible remedy actions. The VCC also includes a&#10;MONITORING USER INTERFACE (see Figure \[fig:GUI\]), which provides a&#10;visualization of the packet delivery performance, detection status and&#10;the diagnosis results. Via this interface, the operator can monitor and&#10;control the RADIUS system.&#10;&#10;We have also extended the VCC with an Internet-of-Things interface,&#10;which allows the VCC to connect with openHAB , an open source smart home&#10;automation software. MQTT , a lightweight messaging transport protocol,&#10;is used for the communication between openHAB and the VCC. With this&#10;extension, the user can remotely control the RADIUS system and monitor&#10;the detection results with an Android smart phone, as depicted in Figure&#10;\[fig:IOT\].&#10;&#10;The current implementation of RADIUS is able to detect anomalies in link&#10;quality. Nevertheless, the programming interface (Figure&#10;\[fig:TinyOSinterface\]) and the DA module can be easily extended to&#10;detect anomalies of other attributes, e.g., CRC error rate or packet&#10;overflow rate. In addition, RADIUS currently works for static tree-based&#10;data collection applications but it can be also applied to other routing&#10;schemes.">
  </outline>
  <outline text="System Overheads" _note="In this section, we analyze the memory, communication and computation&#10;overheads of our RADIUS implementation.">
    <outline text="Memory overhead." _note="Detection Agents incur memory overhead on RAM (data) and ROM (program)&#10;of sensor nodes. As presented in Section \[sec:trainingSetUpdate\], we&#10;keep updating the training set to adapt the mean and standard deviation&#10;of the density distribution of RSSI. To avoid increasing RAM usage&#10;during the update, we implemented this in a memory-friendly way, i.e.,&#10;to compute and with a single pass without storing the previous&#10;measurements of RSSI. To do so, we reformulate and in the following way:&#10;where and are defined as follows: in which is the i-th RSSI reading.&#10;Instead of storing the entire training set, the DA then stores only 2&#10;counters ( and ) for each link to compute and update and . By doing so,&#10;the RAM consumption of RADIUS has a complexity of , where is the number&#10;of links from direct child nodes and is the number of monitored&#10;attributes (e.g., RSSI, CRC error rate), remaining independent from the&#10;sample number.&#10;&#10;To evaluate the RAM and ROM overhead, we compare the memory usage of a&#10;tree-based data collection application with and without the DA module.&#10;In the application, each node has two one-hop child nodes and therefore&#10;stores information about two links. The application alone consumes 3060&#10;bytes in RAM and 25082 bytes in ROM while the application including the&#10;DA module consumes 3176 bytes in RAM and 31170 bytes in ROM. This&#10;indicates that the DA module consumes 116 bytes RAM (in comparison to 10&#10;KB RAM in a TelosB device), and approximately 6 KB ROM (in comparison to&#10;48 KB ROM in a TelosB device).">
    </outline>
    <outline text="Communication overhead." _note="Due to its distributed architecture, the anomaly detection process alone&#10;incurs no communication overhead in RADIUS. It requires additional&#10;communication only if the DAs send alarms corresponding to detected&#10;anomalies, or when the VCC sends control messages. To reduce such&#10;overhead, the alarms with minimum information (2 bytes) about the&#10;detected anomaly are piggybacked on the application packets. On the&#10;other hand, the number of control messages delivered from the VCC to the&#10;DAs, based on our indoor testbed evaluation results, is negligible&#10;compared to the amount of received application packets.">
    </outline>
    <outline text="Computation overhead." _note="The main computation overhead comes from the processing of the Bayesian&#10;thresholding. In RADIUS, the complexity of Bayesian thresholding&#10;involves the calculation of the mean, the standard deviation and the&#10;Bayes threshold according to Equation \[equ:rssiTHD\]. Testing results&#10;show that the processing of a Bayes threshold takes about 10 ms, which&#10;is small compared to the normal packet inter-arrival time in typical&#10;data collection applications.&#10;&#10;">
    </outline>
  </outline>
  <outline text="Experimental Evaluation" _note="We have evaluated the detection performance of our RADIUS implementation&#10;in an indoor testbed (Figure \[fig:floor-plan\]) consisting of 12 TelosB&#10;motes, deployed in several offices of a university building. Each sensor&#10;node runs an application that collects environmental data and sends it&#10;to the sink every 2 seconds following a tree-based routing topology. We&#10;instrumented a Detection Agent on each sensor node and ran the VCC on a&#10;PC connected to the sink node (Base Station).&#10;&#10;To configure the RADIUS system, we adopt the system parameter settings&#10;suggested in the previous analysis (Section \[sec:parameterChoice\]).&#10;Table \[tab:parameter\] summarizes the suggested parameter settings.&#10;After a training period of about 5 minutes, RADIUS starts the detection&#10;phase for a period of about 24 hours. During the experiment, we logged&#10;the received alarms, the RSSI traces and the PDR traces. Figure&#10;\[fig:EVA-1node\] demonstrates our results of detecting link quality&#10;anomalies on one of the links.&#10;&#10;[0.95]{}[|l|l|l|]{} **Techniques** &amp; **Parameters** &amp; **Settings**\&#10;**Bayesian** &amp; initial &amp; 0.8\&#10;**Thresholding** &amp; maximum &amp; 0.99\&#10;**Training Set Size** &amp; sample number to compute &amp; 250\&#10;**Estimation** &amp; max. estimated error of mean &amp; 1 dBm\&#10;**Data Smoothing** &amp; sliding window size &amp; 3\&#10;**Training Set Update** &amp; update window size &amp; 50\&#10;**A PRIORI Probability** &amp; max. alarm number &amp; 5\&#10;**Refinement** &amp; adjustment step &amp; 0.003\&#10;&#10;\[tab:parameter\]&#10;&#10;From the PDR trace depicted in Figure \[fig:EVA-1node\](b), we can&#10;observe that the link frequently experienced high packet losses during&#10;the first 4 hours and the last 3 hours due to the bad channel quality&#10;caused by the students’ movements crossing the communication link (see&#10;Figure \[fig:EVA-1node\](a)). The received alarms that reported such&#10;anomalous link quality degradation are marked in red in&#10;Figure \[fig:EVA-1node\](d). The results show a good detection accuracy.&#10;The overall FNR and FPR of detecting the anomalous RSSI degradation for&#10;this link over 24 hours are 5.1% and 4%, respectively.&#10;&#10;In addition, we can see from Figure \[fig:EVA-1node\](e) that RADIUS can&#10;keep the error rate stable over the detection period.&#10;Figure \[fig:EVA-1node\](c) clearly shows that the threshold is adaptive&#10;to RSSI variations due to the environment changes. From our analysis&#10;based on the logged refinement points (marked in&#10;Figure \[fig:EVA-1node\](d)), RADIUS refines the A PRIORI probability at&#10;around 13:00 on the first day and 10:00 on the next day to reduce FPR&#10;and thus maintain the detection accuracy.&#10;&#10;To demonstrate that RADIUS can robustly achieve high detection accuracy&#10;for all the links across the entire deployed network, we plot in Figure&#10;\[fig:EVA-11nodes\] the error rate for every link in the testbed. The&#10;figure shows that with a set of global parameter settings (listed in&#10;Table \[tab:parameter\]), RADIUS achieves a low error rate for every&#10;link in the network (6.13% on average).&#10;&#10;">
  </outline>
</outline>
  </body>
</opml>