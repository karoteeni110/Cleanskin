<?xml version="1.0" encoding="UTF-8"?>
<opml version="2.0">
  <head>
    <title>Confluence laws and Hopf-Borel type theorem for operads</title>
    <abstract>In 2008, Loday shed light on the existence of Hopf-Borel theorems for
operads. Using the vocabulary of category theory, Livernet,
Mesablishvili and Wisbauer extended such theorems to monads. In both
cases, the reasoning was to start from a mixed distributive law and then
to prove that it induces an isomorphism of species to finally get a
rigidity theorem. Our reasoning goes here backward: we prove that from
an isomorphism of species one can get what we called a confluence law,
which generalises mixed distributive laws, and that it is enough to
obtain a rigidity theorem. This enables us to show that for any operads
and having the same underlying -module, there exists a confluence law
such that any conilpotent co-bialgebra satisfying is free and cofree
over its primitive elements. Our reasoning permits us to generate many
new examples, while recovering the known ones by considering dual
relations. </abstract>
  </head>
  <body>
<outline text="Introduction" _note="Distributive laws first appeared in 1969 in Beck’s article . It takes&#10;its name from the distributivity of addition over multiplication studied&#10;in primary school. Distributive laws give a confluent way to rewrite&#10;expressions mixing different products. An example of distributive laws&#10;is the one mixing the commutative product and the Lie bracket in a&#10;Poisson algebra. This notion has then been studied by Burroni in for&#10;algebras and by Markl in generalising this definition to operads and&#10;linking it to the topological notion of Koszulness. Fox and Markl have&#10;adapted in the notion of distributive laws to expressions mixing&#10;operations and cooperations: they called the obtained rewriting rules&#10;MIXED DISTRIBUTIVE LAWS.&#10;&#10;Let us call a -bialgebra a vector space endowed with an algebra&#10;structure encoded by an operad , a coalgebra structure encoded by a&#10;cooperad with both linked through a mixed distributive law . Such a&#10;bialgebra satisfies, under some assumptions, a Hopf-Borel type theorem:&#10;any conilpotent -bialgebra is free and cofree over its primitive&#10;elements. Such a theorem is called a RIGIDITY THEOREM. Particular cases&#10;of rigidity theorems were proven for instance in for commutative&#10;cocommutative Hopf bialgebras, in for associative coassociative&#10;bialgebras, in for Zinbiel coassociative bialgebras, in for dendriform&#10;codendriform algebras and in for PreLie coNAP bialgebras. The general&#10;framework for this theorem was introduced by Loday in . Rigidity&#10;theorems were then further studied, for instance in and applications can&#10;be found for example in to compute explicit bases of algebras. While&#10;studying the general framework and its rewriting for particular&#10;symmetric operads, it became clear to the authors that the three&#10;hypotheses of this theorem had to be clarified and some further&#10;clarifications were needed in the proof.&#10;&#10;In this article we prove that one only of the hypotheses formulated by&#10;Loday in is needed to get a rigidity theorem. This viewpoint enables us&#10;to provide an answer to a conjecture of Loday: for a given operad which&#10;encoded the structure of algebra and of coalgebra of a bialgebras there&#10;exists a generalisation of mixed distributive laws, called CONFLUENCE&#10;LAWS between the structures such that a rigidity theorem holds. We also&#10;develop the case of explicit isomorphism os species between and . In&#10;such a framework, we are able to make explicit an inductive algorithm to&#10;compute the idempotent and the confluence law. This framework also&#10;includes the particular case where the coproducts are given as the dual&#10;of the products, in which case, we can recover most of the known cases.&#10;Moreover it provides a suitable environment for the development of&#10;rewriting and Groebner bases theories for -algebras. Indeed the&#10;confluence laws allow to decide whether a polynomial is a divisor of&#10;another one.&#10;&#10;This article is organised as follows. The first part focuses on the&#10;general theory and then particularises to the framework where bases for&#10;operads are known. The second part develops the dual case and is&#10;illustrated through examples.&#10;&#10;More precisely, in the first section, we recall Loday’s theorem with its&#10;three hypotheses (H0), (H1), (H2iso): for any bialgebra satisfying mixed&#10;distributive laws (H0), one can compute a morphism , functorial in (H1).&#10;If this morphism is bijective (H2iso) then a rigidity theorem holds. We&#10;point out here that the core property is that the morphism induces a&#10;family of -modules isomorphisms . This property alone gives the&#10;confluence law which are enough to obtain a rigidity theorem and can be&#10;computed explicitly when orthogonal bases are known (see Subsection&#10;\[orthbas\]).&#10;&#10;Then in the second part, the dual case is explored. The above&#10;isomorphisms can be obtained by duality with respect to a fixed basis.&#10;We explain this construction and give a simple condition for it to&#10;satisfy the hypotheses of rigidity theorem: its compatibility to the&#10;-module structure. We then list the examples in literature which can be&#10;obtained in that way before illustrating the strength of this case with&#10;a bunch of brand new examples: PreLie coPreLie, Perm coPerm, NAP coNAP,&#10;PAN coPAN, PAN coPerm, Leibniz coAssociative, Poisson coAssociative,&#10;Leibniz coZinbiel, 2as co2as or even Dipt coDipt bialgebras.">
</outline>
<outline text="General Case" _note="We prove in this section that only one of the hypotheses for Loday’s&#10;rigidity theorem on generalised bialgebras is needed to get such a&#10;theorem. Indeed, the hypothesis (H2iso) implies the hypothesis (H1) and&#10;a weaken version of (H0), which are enough to get a rigidity theorem.&#10;This new improvement in the needed hypotheses enables us to prove a&#10;conjecture of Loday and to reach many new cases.&#10;&#10;We first recall Loday’s formulation of rigidity theorem before studying&#10;the intertwining between hypotheses of the theorem. We then study the&#10;case when bases are orthogonal, so that we can compute explicitly&#10;confluence laws and idempotent, which was one problem raised in . We&#10;finally give a new formulation of rigidity theorem.">
  <outline text="Loday’s rigidity theorem." _note="We recall from that a SPECIES is a functor from the category of finite&#10;sets and bijections to the category of vector spaces. It is possible to&#10;define a composition on species (see ) and an OPERAD is then given by&#10;the data of a species and a map . The reader can consult for further&#10;explanations.&#10;&#10;Let be a field of characteristic . Let be two algebraic operads. In this&#10;article, we will only consider CONNECTED operads, i.e. such that and and&#10;such that and are finite dimensional.&#10;&#10;Let us first recall the definition of an algebra, a cooperad and a&#10;coalgebra over an operad.&#10;&#10;\[defcog\]An ALGEBRA over an operad is a vector space equipped with a&#10;-equivariant morphism . We denote the free algebra over an operad whose&#10;vector space of generators is by .&#10;&#10;A COOPERAD is the data of a family of -modules for every integer and of&#10;two morphisms of -modules and (counit) satisfying some coassociativity&#10;and counitality axioms. When is an operad, is a cooperad, called the&#10;DUAL COOPERAD of .&#10;&#10;\[defcog\]A COALGEBRA over an operad is a vector space equipped with a&#10;-equivariant morphism . This definition is equivalent to the definition&#10;of a coalgebra over the cooperad , which is the data of a map . We&#10;denote the free coalgebra over an operad whose vector space of&#10;primitives is by .&#10;&#10;\[notation\] We put the emphasis on the notation of the maps which will&#10;be used later on: an algebra over the operad is a vector space endowed&#10;with a map and a coalgebra over the cooperad is a vector space endowed&#10;with a map .&#10;&#10;Following , we define the notion of mixed distributive laws:&#10;&#10;\[ml\] A COMPATIBILITY RELATION is defined as a sequence of maps where&#10;the summation is taken over all the and . A compatibility relation is a&#10;MIXED DISTRIBUTIVE LAW if&#10;&#10;it is compatible with the action of the symmetric group : where , and is&#10;denoted by ,&#10;&#10;it is compatible with the operad structures of and .&#10;&#10;The algebra is then endowed with a structure of -coalgebra and the&#10;coalgebra is then endowed with a structure of -algebra.&#10;&#10;We call -bialgebra any bialgebra which is a -algebra, a -coalgebra and&#10;such that products and coproducts satisfy the mixed distributive laws .&#10;We need moreover the following notion:&#10;&#10;The cofiltration can be defined on any -coalgebra : . The vector space&#10;is the vector space of PRIMITIVE ELEMENTS. We moreover denote by the&#10;canonical inclusion.&#10;&#10;A -coalgebra is said to be CONILPOTENT if .&#10;&#10;When there will be no ambiguity, we will only write .&#10;&#10;The rigidity theorem as stated by Loday is:&#10;&#10;Let be a bialgebra type which satisfies&#10;&#10;(H0)&#10;&#10;:   the compatibility relations are distributive,&#10;&#10;(H1)&#10;&#10;:   the free -algebra is naturally a -bialgebra,&#10;&#10;(H2iso)&#10;&#10;:   the -coalgebra map is an isomorphism.&#10;&#10;Then any conilpotent -bialgebra is free and cofree over its primitive&#10;elements">
  </outline>
  <outline text="Confluence laws." _note="The reasoning in Loday’s theorem is to first consider a mixed&#10;distributive law thanks to which one can compute a map sending to . To&#10;use this theorem, one then has to prove that the induced morphism is an&#10;isomorphism.&#10;&#10;We adopt here another reasoning: we start from the data of such an&#10;isomorphism and prove that we get back the hypotheses of the theorem,&#10;more precisely, we prove the existence of an associated confluence law.&#10;Our reasoning is splitted on the next five subsections: in this&#10;subsection, we introduce the notion of confluence laws. We then explain&#10;why the hypothesis on cannot be reduced in the subsection \[inj\]. From&#10;an isomorphism we get a homogeneous confluence law in the subsection&#10;\[hom\], before reaching confluence laws in the subsection \[Equiv\] and&#10;stating the equivalence between conditions of the rigidity theorem. We&#10;finally state our main result in the subsection \[rig\].&#10;&#10;We introduce in this subsection a generalisation of mixed distributive&#10;laws, that we call CONFLUENCE LAWS:&#10;&#10;\[gml1\] A CONFLUENCE LAW between operads and is a family of maps such&#10;that is compatible with the structure of operad of and with the action&#10;of the symmetric group .&#10;&#10;It is clear that mixed distributive laws as defined in Definition \[ml\]&#10;gives a confluence law, by looking at the restrition of mixed&#10;distributive laws to primitive elements.&#10;&#10;An example of such a confluence law is presented in Equation .&#10;&#10;Confluence laws are equivalent to the data of a -module morphism as&#10;presented in . We thank again M. Livernet for helping us clearing this&#10;link and clarifying the definition of -bialgebras.&#10;&#10;Let us now define -bialgebras.&#10;&#10;\[defBialg\] Refering to notations of Notation \[notation\], a&#10;-bialgebra is a -vector space endowed with a structure of -algebra, a&#10;structure of -coalgebra, such that the following diagram commutes:&#10;&#10;\(m) \[matrix of math nodes,row sep=3em,column sep=4em,minimum&#10;width=2em\] [ [ ]{}(\_1 H) &amp; [ ]{}(H) &amp; H &amp; [ ]{}\^\*(H)\&#10;[ ]{}(H) &amp; &amp; &amp; [ ]{}\^\*[ ]{}(H)\&#10;]{}; (m-2-1) edge node \[below\] []{} (m-2-4) (m-1-1) edge node&#10;\[above\] []{} (m-1-2) (m-1-1) edge node \[left\] []{} (m-2-1) (m-1-2)&#10;edge node \[above\] []{} (m-1-3) (m-1-3) edge node \[above\] []{}&#10;(m-1-4) (m-2-4) edge node \[right\] []{} (m-1-4);&#10;&#10;Now we have defined the objets on which we will be working, let us look&#10;at them more closely.">
  </outline>
  <outline text="Injectivity on ." _note="In , a condition on for the existence of a rigidity theorem is that the&#10;morphism is an isomorphism for every vector space . We first give an&#10;example of the necessity of the injectivity of before studying the link&#10;between filtration and cofiltration in the associated bialgebras. This&#10;link is crucial because, as we will see later, the idempotent is nothing&#10;but the projection on primitive elements parallel to decomposable&#10;elements.&#10;&#10;The following example will show that the lack of injectivity of induces&#10;a counter-example in the rigidity theorem.&#10;&#10;\[expleST\] Consider the coassociative associative bialgebras where the&#10;mixed distributive law is the Hopf mixed distributive law. We compute&#10;from the mixed distributive law: it is given by . It is to be noted that&#10;the constructed is not a monomorphism (therefore not an isomorphism and&#10;nor a epimorphism), failing to verify all the hypotheses for the&#10;existence of a rigidity theorem.&#10;&#10;Let us consider Solomon-Tits algebra, see for example , the space of&#10;surjections endowed with the shuffle product and the block coproduct:&#10;&#10;For , we write and . Let , , where the sum is over all the stuffles .&#10;Given a map there exists a unique surjective map in such that if, and&#10;only if, , for . The map is called the [STANDARDISATION]{} of (see for&#10;instance ). Let , we define the co-restriction of to by , for . We&#10;define by: and we extend it by linearity to all (see for instance ).&#10;&#10;The mixed distributive law between the product and the coproduct is the&#10;Hopf mixed distributive law, which can be checked by direct inspection.&#10;&#10; is conilpotent as for any element in , where and .&#10;&#10;By a direct computation, one can prove that the element cannot be&#10;constructed as a linear combination of products of primitive elements.&#10;And is therefore not generated by its primitives though it does verify&#10;the conilpotent and the existence of the mixed distributive law&#10;hypotheses.">
  </outline>
  <outline text="Homogeneous confluence laws." _note="We first decribe the link between filtration and cofiltration in the&#10;free bialgebra. We then use this link to define homogeneous confluence&#10;laws, which are the step between the isomorphism and the associated&#10;confluence law .&#10;&#10;The data of a family of isomorphisms functorial in and sending natural&#10;graduation by product to natural cograduation by coproduct, is&#10;equivalent to the data of a family of isomorphisms of -modules .&#10;&#10;As is a field of characteristic , we can identify coinvariants and&#10;invariants and the notion of free (conilpotent) coalgebra over the&#10;operad is given by the Schur functor defined by .&#10;&#10;The data of a family of isomorphisms of -modules defines a natural&#10;transformation between the Schur functor associated to the operad , and&#10;the Schur functor associated to the cooperad , described above. This&#10;natural transformation is directly equivalent to a family of&#10;isomorphisms functorial in sending graduation to cograduation .&#10;&#10;Let us now suppose the existence of a family of isomorphisms functorial&#10;in , sending graduation by product to cograduation by coproduct. Then, ,&#10;for any integer . Hence defines a family of isomorphisms of -modules .&#10;&#10;We will denote by the morphism of -modules induced by the family of .&#10;&#10;For the trivial representation, the only isomorphisms are homotheties,&#10;but it is not always the case (it depends on the chosen decomposition in&#10;irreducible representations of the -module, which is unique only up to&#10;isomorphisms).&#10;&#10;We call HOMOGENEOUS CONFLUENCE LAW the set of all rewritings of&#10;compositions of a cooperation of arity , , with an operation of arity ,&#10;, applied to primitive elements in terms of the primitive elements . We&#10;denote this set by . Then we have:&#10;&#10;In other words, homogeneous confluence laws are to confluence laws what&#10;filtered distributive laws are to distributive laws (see ).&#10;&#10;A homogeneous confluence law is then strictly equivalent to endowing the&#10;free -algebra over a vector space with a structure of -coalgebra sending&#10;the graduation of the algebra to the cograduation of the coalgebra.&#10;Indeed, the following result follows:&#10;&#10;\[phiLn\] The data of is equivalent to the data of a homogeneous&#10;confluence law.&#10;&#10;Given a homogeneous confluence law, we can consider the map from to&#10;itself where at the source is viewed as an algebra and at the target is&#10;seen as a coalgebra. It produces a family of morphism , sending&#10;filtration by product to cofiltration by coproduct, and as result a&#10;morphism defined by&#10;&#10;Denoting by the duality pairing between and its dual space , and the&#10;action of an element of the symmetric group on an element of , we define&#10;the homogeneous confluence law from the morphism by: where , and .&#10;&#10;Notice that we have:&#10;&#10;The two constructions are inverse of each other.">
  </outline>
  <outline text="Equivalence between conditions." _note="Now, we will use homogeneous confluence laws and the previous subsection&#10;to prove the equivalence between hypothesises of the rigidity theorem,&#10;as stated by Loday.&#10;&#10;\[mdl\] Let and be two algebraic operads. The existence of a confluence&#10;law implies the existence of a family of -module morphism , for any&#10;positive integer . Moreover, the bijectivity of all enables us to define&#10;the associated confluence law.&#10;&#10;If such bijections exist, then and have the same underlying -module (and&#10;share the same species).&#10;&#10;An homogeneous confluence law can be directly computed from a confluence&#10;law by forgetting some information.&#10;&#10;We define from the associated confluence law .&#10;&#10;We use the following notation and .&#10;&#10;The confluence law is defined as the following composite, using&#10;notations of Definition \[defcog\]:&#10;&#10;As the operations are functorial in , we get a family of maps .&#10;Moreover, is a morphism of -modules, hence maps are compatible with the&#10;action of the symmetric group .&#10;&#10;We finally have to show the compatibility with the operad structure of .&#10;This comes from the following commuting diagram, holding for any vector&#10;space :&#10;&#10;\(m) \[matrix of math nodes,row sep=3em,column sep=2em,minimum&#10;width=2em\] [ ([ ]{}(k\_1)…[ ]{}(k\_l)) [ ]{}(l) [ ]{}(n) V\^[n]{} &amp;[&#10;]{}(k) [ ]{}(n) V\^[n]{}\&#10;\_[\_[j=1]{}\^l q\_j=n]{} \_[j=1]{}\^l ( [ ]{}(k\_j)[ ]{}(q\_j)&#10;V\^[q\_j]{}) &amp; \_[\_[i=1]{}\^k r\_i = n]{} \_[i=1]{}\^k ([&#10;]{}(r\_i)V\^[r\_i]{} ),\&#10;]{}; (m-2-1) edge node \[below\] []{} (m-2-2) (m-1-1) edge node&#10;\[above\] []{} (m-1-2) (m-1-1) edge node \[left\] []{} (m-2-1) (m-1-2)&#10;edge node \[right\] []{} (m-2-2);&#10;&#10;where .&#10;&#10;This diagram is obtained by using the definition of as the composition&#10;given above. Using this definition, the commutativity of the diagram&#10;relies on two facts: most of the operations do not occur on the same&#10;part of the tensorial product and the definition of the coproduct gives&#10;itself the commutativity of one part of the diagram thanks to the&#10;following diagram, holding on any of the previous :&#10;&#10;\(m) \[matrix of math nodes,row sep=3em,column sep=2em,minimum&#10;width=2em\] [ ([ ]{}(k\_1)…[ ]{}(k\_l)) [ ]{}(l) H\_n &amp;[ ]{}(k) H\_n\&#10;\_[\_[j=1]{}\^l q\_j=n]{} \_[j=1]{}\^l ( [ ]{}(k\_j)H\_[q\_j]{} ) &amp;&#10;\_[\_[i=1]{}\^k r\_i = n]{} \_[i=1]{}\^k H\_[r\_i]{},\&#10;]{}; (m-2-1) edge node \[below\] []{} (m-2-2) (m-1-1) edge node&#10;\[above\] []{} (m-1-2) (m-1-1) edge node \[left\] []{} (m-2-1) (m-1-2)&#10;edge node \[right\] []{} (m-2-2);&#10;&#10;where .&#10;&#10;If the confluence law is given by an isomorphism , we will write&#10;equivalently the associated bialgebras -bialgebras or -bialgebras.&#10;&#10;There can be different confluence laws associated to the same couple of&#10;operads: see for instance the mixed distributive laws for the Dendriform&#10;coDendriform bialgebra computed by Foissy in and the one referred in .&#10;&#10;PROJECTION&#10;&#10;The last step before reaching the rigidity theorem is to prove the&#10;existence of a “good” projection of the coalgebra on the primitive&#10;elements, named IDEMPOTENT.&#10;&#10;Let us now consider a (not necessarily free or cofree) conilpotent&#10;-bialgebra . We denote by the cofiltration on and the -module morphism&#10;associated to the confluence law.&#10;&#10;We first show the following lemmas:&#10;&#10;\[LemGen\] The bialgebra is generated, as an algebra, by its primitive&#10;elements.&#10;&#10;We proove the lemma by reductio ad absurdum. Let us consider the minimal&#10;integer such that there exists an element in , which is not in the&#10;subalgebra generated by primitive elements of . We will construct a in&#10;the subalgebra generated by primitive elements of such that belongs to ,&#10;and then is in the subalgebra generated by primitive elements.&#10;&#10;For any (linear) basis of , there exists a basis of such that . We&#10;denote by the real number , denoting by the action of an element of the&#10;symmetric group on an element of the considered -module. The bialgebra&#10;satisfies a confluence law and then also a homogeneous confluence law.&#10;Hence, we have for any primitive elements , according to Equation : As&#10;belongs to , for any between and the coproduct of the element can be&#10;written as:&#10;&#10;Without loss of generality, we can consider the case:&#10;&#10;for a given tuple of primitive elements , as can be decomposed as a sum&#10;of such elements.&#10;&#10;Let us now consider an element . Let us determine the appropriate .&#10;Then, we have, using Equation : Then, using Equations and , for all , is&#10;equivalent to:&#10;&#10;Moreover, for any , , which gives on , for any :&#10;&#10;Thanks to Equations and , choosing for any and gives in the subalgebra&#10;of generated by primitive elements such that is in , hence is also in&#10;the subalgebra of generated by primitive elements by minimality of and&#10;so is .&#10;&#10;\[decomp\] The vector space admits a supplementary space in , which is .&#10;&#10;First, we have by definition .&#10;&#10;Let us now show that , for all . Let us consider an element in . As is&#10;injective, there is an element such that , thus .&#10;&#10;Then, we have , for all . Thus, . This comes from Equation .&#10;&#10;Let us prove that . As an algebra, . By Lemma \[LemGen\], we have that .&#10;Let us consider an element . Then we can write (not necessarily&#10;uniquely) as: where and .&#10;&#10;From Equation , we have . From the bijectivity of , (see the second&#10;point of this proof). Then, as , we get the decomposition: where and .&#10;&#10;For any element , we can then define the projection on parallel to the ,&#10;.&#10;&#10;The map is linear and satisfies and . We will call this map the&#10;IDEMPOTENT associated to -bialgebras (see Corollary \[unique\]).">
  </outline>
  <outline text="Rigidity theorem." _note="We now give a new formulation of rigidity theorem which takes into&#10;account the previous subsections and confluence laws.&#10;&#10;\[thmrig\] Let be a field of characteristic and let us consider two&#10;connected algebraic operads and , such that and are finite dimensional&#10;vector spaces. To any family of -modules isomorphisms can be associated&#10;a confluence law such that any conilpotent -bialgebras is free and&#10;cofree over the vector space of its primitive elements Moreover, if any&#10;free and cofree -bialgebra is also a -bialgebra, with a confluence law&#10;or a mixed distributive laws, then any conilpotent -bialgebras is free&#10;and cofree over its primitive elements. In other words, the result does&#10;not depend on the choice of a confluence law.&#10;&#10;Then, on any -bialgebra the idempotent is exactly the projection on&#10;parallel to the (see \[decomp\]), hence the following result:&#10;&#10;\[unique\] The idempotent is unique.&#10;&#10;The idempotent described above is the same as the one introduced in . It&#10;is the generalisation of the Eulerian idempotent used in , whose origin&#10;lays in , obtained in the case .&#10;&#10;We follow here the sketch of the proof of Loday in and Patras in , using&#10;the confluence laws and the idempotent introduced previously.&#10;&#10;We want now to prove that there is an isomorphism between and , where&#10;the latter is the free and cofree bialgebra over . We call and&#10;respectively the canonical injection from to and surjection from to .&#10;Let us define the unique lifting of by the universal property of the&#10;-conilpotent cofreeness. Consider the natural injection and its lifting&#10;by the universal property of freeness. We represent below these&#10;morphisms:&#10;&#10;\(m) \[matrix of math nodes,row sep=3em,column sep=4em,minimum&#10;width=2em\] [ [ ]{}([ ]{}) &amp;\&#10;[ ]{}&amp; [ ]{}\&#10;[ ]{}\^c([ ]{})&amp;\&#10;\&#10;]{}; (m-1-1) edge node \[left\] []{} (m-2-1) (m-2-2.north) edge node&#10;\[above\] []{} (m-1-1.south east) (m-3-1.north east) edge node \[below\]&#10;[]{} (m-2-2.south) (m-2-1.south east)edge node \[below\] []{}&#10;(m-2-2.south west) (m-2-2.north west) edge node \[above\] []{}&#10;(m-2-1.north east) (m-2-1) edge node \[left\] []{} (m-3-1) (m-1-1.south&#10;west) edge\[bend right\] node \[left\] []{} (m-3-1.north west);&#10;&#10;First, is a bialgebra morphism: it is an algebra morphism by the&#10;universal property and we show using the filtration of provided by the&#10;conilpotency of that it is also a coalgebra morphism. Indeed, by&#10;construction, is sent bijectively to . Let us now consider . By&#10;freeness, there exists in and such that . Hence, we have for any&#10;cooperation : The confluence law can then be denoted, by distributivity,&#10;by: for any primitive elements , where has arity , and is in , the set&#10;of permutations of such that for any .&#10;&#10;Note that the reasoning does not depend on the choice of such a&#10;confluence law.&#10;&#10;We have: This proves that is a bialgebra isomorphism.&#10;&#10;This implies that is a coalgebra morphism, which is the identity on&#10;primitive elements. Hence, we have by cofreeness the equality , which&#10;implies that is injective and surjective. Finally, is also injective:&#10;otherwise, there would be a minimal integer () such that there exists&#10;such that . By definition of , there exists a cooperation such that .&#10;Using the fact that is a coalgebra morphism, we obtain and which&#10;contradicts the minimality of .&#10;&#10;Finally, the map is a vector space isomorphism which preserves the&#10;graduation and the result follows using the isomorphim between and .&#10;&#10;An immediate result of this theorem is the following corollary:&#10;&#10;Given two algebraic operads and and a confluence law induced by an&#10;isomorphism , an -algebra is free if and only if it is possible to&#10;define a -coproduct on satisfying the confluence law .&#10;&#10;:   This is a consequence of the existence of a confluence law. If is&#10;    free, then there exists a vector space such that and then is&#10;    naturally equipped with a structure of -bialgebras thanks to the&#10;    mixed distributive law .&#10;&#10;:   This is a consequence of the rigidity theorem.&#10;&#10;This provides an efficient tool to solve the problem of freeness of&#10;algebras encoded by an operad (see ) and to give generators and&#10;divisibility in free algebras.&#10;&#10;Moreover, another application of the theorem is the following answer to&#10;a conjecture of Loday in :&#10;&#10;For any connected algebraic operads and sharing the same underlying&#10;finite dimensional -modules , there exists a family of -modules&#10;isomorphisms , and thus there exists a confluence law associated to such&#10;that any conilpotent -bialgebra is free and cofree over its primitives.&#10;&#10;Any character of a representation of the symmetric group is&#10;integer-valued, hence for any representation of the symmetric group, it&#10;is possible to construct a -module isomorphism between and its dual .&#10;Let us choose : we obtain a family of -modules isomorphisms between and&#10;satisfying the hypothesis of Theorem \[thmrig\]. Applying this theorem&#10;gives the result.&#10;&#10;The following corollary is then immediate:&#10;&#10;If and are two operads sharing the same underlying -module, then any&#10;free -algebra is a free -algebra.&#10;&#10;Note that it is not the case for non free algebras.">
  </outline>
  <outline text="Orthogonal bases." _note="In this subsection, we provide an explicit inductive description of&#10;confluence laws and idempotent in favourable cases.&#10;&#10;For every , we consider, if they exist, two generating sets and of the&#10;-module and respectively, such that for all and . Let us remark that to&#10;obtain such generating sets, we should take at most one element in every&#10;orbit of on . Such a generating set can be found for instance if the&#10;only relations in the -module are of the form for in and .&#10;&#10;Then, considering such a basis, Equation gives: with .&#10;&#10;Let us remark that we have by definition of , with the equality when is&#10;injective, which will be supposed in what follows.&#10;&#10;The confluence law is then given for any cooperation and operation by&#10;induction on the cofiltration , with by: where is the tensorial product&#10;of operations obtained when evaluating on primitive elements (see&#10;\[mdl\]) and is the tensorial product of operations obtained when&#10;evaluating on primitive elements.&#10;&#10;The maps give the mixed distributive law on elements in , where .&#10;&#10;The idempotent is given as the inductive limit of the maps defined on&#10;the cofiltration by on and on by:&#10;&#10;Note that by decomposition of Lemma \[decomp\], on for all , hence is&#10;the identity on . We prove in what follows that the map obtained is an&#10;idempotent:&#10;&#10;\[De\] The constructed map satisfies: on any conilpotent bialgebra .&#10;&#10;We prove by induction on that:&#10;&#10;As on primitive elements, we have for any primitive element . Let us&#10;suppose the property true for any . If for , by induction hypothesis.&#10;&#10;If , we have However, for any , we have: Hence is in for and .&#10;&#10;This provides an explicit inductive description of the idempotent and&#10;the confluence law. In the next section, we apply these constructions.">
  </outline>
</outline>
<outline text="Dual case" _note="There is no canonical vector space isomorphism between a vector space&#10;and its dual. Moreover, as the morphism must also be a -module morphism,&#10;not all isomorphisms between and will give rise to a rigidity theorem.&#10;We provide in this section a criterion on a given basis to get such a&#10;family of -module isomorphisms and then apply it to several cases.">
  <outline text="General results." _note="We consider two connected algebraic operads and . To satisfy a rigidity&#10;theorem, these operads must have the same underlying -modules. Let us&#10;now consider a basis of the vector space , we consider the morphism&#10;given by the duality with respect to . We denote by the union .&#10;&#10;Let us now consider a free -algebra . The basis induces a basis of .&#10;Given an element of and an operation , the coproduct given by duality on&#10;is then defined as: where is the Kronecker symbol.&#10;&#10;Note that thanks to Equation , both definitions coincide.&#10;&#10;In operadic terms, this definition can be rewritten, for any operation ,&#10;cooperation and elements : where denotes the coefficient of in .&#10;&#10;For the to be -module morphisms, the basis has to satisfy some&#10;conditions:&#10;&#10;The basis is said to be a COMPATIBLE BASIS if products and dual&#10;coproducts expressed in this basis commute with the action of the&#10;symmetric group. In other words, for any cooperation , any operation and&#10;any , we have:&#10;&#10;Thanks to the shape of homogeneous confluence laws (Equation ), we&#10;obtain directly:&#10;&#10;If the considered basis is a compatible basis, then the family is a&#10;family of -module isomorphisms and the rigidity theorem applies: any&#10;conilpotent -bialgebra is free and cofree over the vector space of its&#10;primitives.&#10;&#10;An example of bases of operads which are not compatible is given by the&#10;Lyndon basis and the comb basis of the operad Lie (see for computation&#10;on the comb basis).&#10;&#10;If we consider non symmetric operads, any basis is compatible and then&#10;we obtain the following result which gives an explicit family of&#10;-modules isomorphisms :&#10;&#10;For any non symmetric operads and , any basis of and of there exists a&#10;confluence law whose associated isomorphisms are given by sending on the&#10;dual basis of such that the rigidity theorem applies.&#10;&#10;\[2.1.5\] Using the duality on usual bases of known operads, we find&#10;back the following cases. We represent a product by&#10;&#10;(-1,1)–(0,0)–(1,1); (0,0)–(0,-1); (0,0) circle(0.5); (0,0) node[]{};&#10;&#10;and a coproduct by&#10;&#10;(-1,-1)–(0,0)–(1,-1); (0,0)–(0,1); (0,0) circle(0.5); (0,0) node[]{};&#10;&#10;, omitting to precise the product or the coproduct if there is no&#10;ambiguity.&#10;&#10; Comm, Comm with the Hopf mixed distributive law:&#10;&#10;(0,0)–(0,1)–(1,1.5)–(1,2.5)–(0,3)–(0,4);&#10;(2,0)–(2,1)–(1,1.5)–(1,2.5)–(2,3)–(2,4); (3,2) node[]{}; (4,0)–(4,4);&#10;(6,0)–(6,4); (7,2) node[]{};&#10;&#10;(4,0)–(4,1.5)–(6,2.5)–(6,4); (4,4)–(4,2.5)–(6,1.5)–(6,0); (7,2)&#10;node[]{};&#10;&#10;(8,4)–(8,1.5)–(8.75,1)–(8.75,0);&#10;(8.75,1)–(9.5,1.5)–(9.5,2.5)–(10.25,3)–(10.25,4);&#10;(10.25,3)–(11,2.5)–(11,0); (11.75,2) node[]{};&#10;&#10;(21.5,0)–(21.5,1.25)–(22.5,2)–(21.5,2.75)–(21.5,4);&#10;(21.5,1.25)..controls (20.5,2) and (20,2.5) .. (20,3)–(20,4);&#10;(21.5,2.75)..controls (20.5,2) and (20,1.5).. (20,1)–(20,0); (23.5,2)&#10;node[]{};&#10;&#10;(3,4)–(3,1.5)–(2.25,1)–(2.25,0);&#10;(2.25,1)–(1.5,1.5)–(1.5,2.5)–(0.75,3)–(0.75,4); (0.75,3)–(0,2.5)–(0,0);&#10;(4,2) node[]{};&#10;&#10;(17,0)–(17,1.25)–(16,2)–(17,2.75)–(17,4); (17,1.25)..controls (18,2) and&#10;(18.5,2.5) .. (18.5,3)–(18.5,4); (17,2.75)..controls (18,2) and&#10;(18.5,1.5).. (18.5,1)–(18.5,0); (19.5,2) node[]{};&#10;&#10;(1,0)–(1,1.25)–(0,2)–(1,2.75)–(1,4); (1,2.75)–(3,1.25)–(3,0);&#10;(1,1.25)–(3,2.75)–(3,4); (3,1.25)–(4,2)–(3,2.75);&#10;&#10; As, As with the n.u.i. mixed distributive law:&#10;&#10;(0,0)–(0,1)–(1,1.5)–(1,2.5)–(0,3)–(0,4);&#10;(2,0)–(2,1)–(1,1.5)–(1,2.5)–(2,3)–(2,4); (3,2) node[]{};&#10;&#10;(4,0)–(4,4); (6,0)–(6,4); (7,2) node[]{};&#10;&#10;(8,4)–(8,1.5)–(8.75,1)–(8.75,0);&#10;(8.75,1)–(9.5,1.5)–(9.5,2.5)–(10.25,3)–(10.25,4);&#10;(10.25,3)–(11,2.5)–(11,0); (11.75,2) node[]{};&#10;&#10;(3,4)–(3,1.5)–(2.25,1)–(2.25,0);&#10;(2.25,1)–(1.5,1.5)–(1.5,2.5)–(0.75,3)–(0.75,4); (0.75,3)–(0,2.5)–(0,0);&#10;&#10; As, Zinb with the semi-Hopf mixed distributive law, denoted by the&#10;generating operation of Zinbiel:&#10;&#10;(0,0)–(0,1)–(1,1.5)–(1,2.5)–(0,3)–(0,4);&#10;(2,0)–(2,1)–(1,1.5)–(1,2.5)–(2,3)–(2,4); (3,2) node[]{}; (4,0)–(4,4);&#10;(6,0)–(6,4); (7,2) node[]{};&#10;&#10;(8,4)–(8,1.5)–(8.75,1)–(8.75,0);&#10;(8.75,1)–(9.5,1.5)–(9.5,2.5)–(10.25,3)–(10.25,4);&#10;(10.25,3)–(11,2.5)–(11,0); (11.75,2) node[]{};&#10;&#10;(17,0)–(17,1.25)–(16,2)–(17,2.75)–(17,4); (17,1.25)..controls (18,2) and&#10;(18.5,2.5) .. (18.5,3)–(18.5,4); (17,2.75)..controls (18,2) and&#10;(18.5,1.5).. (18.5,1)–(18.5,0); (19.5,2) node[]{};&#10;&#10;(3,4)–(3,1.5)–(2.25,1)–(2.25,0);&#10;(2.25,1)–(1.5,1.5)–(1.5,2.5)–(0.75,3)–(0.75,4); (0.75,3)–(0,2.5)–(0,0);&#10;(2.25,1) circle(0.4); (2.25,1) node []{}; (4,2) node[]{};&#10;&#10;(1,0)–(1,1.25)–(0,2)–(1,2.75)–(1,4); (1,2.75)–(3,1.25)–(3,0);&#10;(1,1.25)–(3,2.75)–(3,4); (3,1.25)–(4,2)–(3,2.75); (3,1.25) circle(0.4);&#10;(3,1.25) node []{};&#10;&#10;,&#10;&#10;with .&#10;&#10;[]{} Mag, Mag with the magmatic mixed distributive law:&#10;&#10;(0,0)–(0,1)–(1,1.5)–(1,2.5)–(0,3)–(0,4);&#10;(2,0)–(2,1)–(1,1.5)–(1,2.5)–(2,3)–(2,4); (3,2) node[]{};&#10;&#10;(4,0)–(4,4); (6,0)–(6,4);&#10;&#10;[]{} Mag, Mag with the infinite magmatic mixed distributive law:&#10;&#10;(0,0)–(0,1)–(1,1.5)–(1,2.5)–(0,3)–(0,4);&#10;(2,0)–(2,1)–(1,1.5)–(1,2.5)–(2,3)–(2,4); (1,0)–(1,4); (3,2) node[]{};&#10;&#10;(4,0)–(4,4); (5,0)–(5,4); (6,0)–(6,4);&#10;&#10;(0,0)–(0,1)–(1,1.5)–(1,2.5)–(0,3)–(0,4);&#10;(2,0)–(2,1)–(1,1.5)–(1,2.5)–(2,3)–(2,4); (1,1.5)–(1,4); (3,2) node[]{};&#10;&#10;(0,0)–(0,1)–(1,1.5)–(1,2.5)–(0,3)–(0,4);&#10;(2,0)–(2,1)–(1,1.5)–(1,2.5)–(2,3)–(2,4); (1,0)–(1,2.5); (3,2) node[]{};&#10;&#10;[]{} NAP, PreLie with the Livernet mixed distributive law:&#10;&#10;(0,0)–(0,1)–(1,1.5)–(1,2.5)–(0,3)–(0,4);&#10;(2,0)–(2,1)–(1,1.5)–(1,2.5)–(2,3)–(2,4); (3,2) node[]{};&#10;&#10;(4,0)–(4,4); (6,0)–(6,4); (7,2) node[]{};&#10;&#10;(3,4)–(3,1.5)–(2.25,1)–(2.25,0);&#10;(2.25,1)–(1.5,1.5)–(1.5,2.5)–(0.75,3)–(0.75,4); (0.75,3)–(0,2.5)–(0,0);&#10;(4,2) node[]{};&#10;&#10;(17,0)–(17,1.25)–(16,2)–(17,2.75)–(17,4); (17,1.25)..controls (18,2) and&#10;(18.5,2.5) .. (18.5,3)–(18.5,4); (17,2.75)..controls (18,2) and&#10;(18.5,1.5).. (18.5,1)–(18.5,0);&#10;&#10; Nil, Nil with nil mixed distributive law:&#10;&#10;(0,0)–(0,1)–(1,1.5)–(1,2.5)–(0,3)–(0,4);&#10;(2,0)–(2,1)–(1,1.5)–(1,2.5)–(2,3)–(2,4); (3,2) node[]{};&#10;&#10;(4,0)–(4,4); (6,0)–(6,4); (7,2) node[]{};&#10;&#10;(0.75,0)–(0.75,1.5)–(0,2)–(0.75,2.5)–(0.75,4);&#10;(0.75,1.5)–(1.5,2)–(0.75,2.5); (2.25,0)–(2.25,4); (3.25,2) node[]{};&#10;&#10;(0.75,0)–(0.75,1.5)–(0,2)–(0.75,2.5)–(0.75,4);&#10;(0.75,1.5)–(1.5,2)–(0.75,2.5); (-0.75,0)–(-0.75,4); (2.5,2) node[]{};&#10;&#10;(0.75,0)–(0.75,1.5)–(0,2)–(0.75,2.5)–(0.75,4);&#10;(0.75,1.5)–(1.5,2)–(0.75,2.5);&#10;(2.75,0)–(2.75,1.5)–(2,2)–(2.75,2.5)–(2.75,4);&#10;(2.75,1.5)–(3.5,2)–(2.75,2.5);&#10;&#10; Dup, Dup with the following mixed distributive law:&#10;&#10;(0,0)–(0,1)–(1,1.5)–(1,3.5)–(0,4)–(0,5);&#10;(2,0)–(2,1)–(1,1.5)–(1,3.5)–(2,4)–(2,5); (1,1.5) circle(0.6); (1,3.5)&#10;circle(0.6); (1,1.5) node []{}; (1,3.5) node []{}; (3,2) node[]{};&#10;(4,0)–(4,5); (6,0)–(6,5); (7,2) node[]{};&#10;&#10;(8,4.5)–(8,1.5)–(8.75,1)–(8.75,-0.5);&#10;(8.75,1)–(9.5,1.5)–(9.5,2.5)–(10.25,3)–(10.25,4.5);&#10;(10.25,3)–(11,2.5)–(11,-0.5); (8.75,1) circle(0.6); (10.25,3)&#10;circle(0.6); (8.75,1) node []{}; (10.25,3) node []{}; (11.75,2.5)&#10;node[]{};&#10;&#10;(3,4.5)–(3,1.5)–(2.25,1)–(2.25,-0.5);&#10;(2.25,1)–(1.5,1.5)–(1.5,2.5)–(0.75,3)–(0.75,4.5);&#10;(0.75,3)–(0,2.5)–(0,-0.5); (2.25,1) circle(0.6); (0.75,3) circle(0.6);&#10;(2.25,1) node []{}; (0.75,3) node []{};&#10;&#10;(0,0)–(0,1)–(1,1.5)–(1,3.5)–(0,4)–(0,5);&#10;(2,0)–(2,1)–(1,1.5)–(1,3.5)–(2,4)–(2,5); (1,1.5) circle(0.6); (1,3.5)&#10;circle(0.6); (1,1.5) node []{}; (1,3.5) node []{}; (3,2) node[]{};&#10;&#10;(8,4.5)–(8,1.5)–(8.75,1)–(8.75,-0.5);&#10;(8.75,1)–(9.5,1.5)–(9.5,2.5)–(10.25,3)–(10.25,4.5);&#10;(10.25,3)–(11,2.5)–(11,-0.5); (8.75,1) circle(0.6); (10.25,3)&#10;circle(0.6); (8.75,1) node []{}; (10.25,3) node []{};&#10;&#10;(0,0)–(0,1)–(1,1.5)–(1,3.5)–(0,4)–(0,5);&#10;(2,0)–(2,1)–(1,1.5)–(1,3.5)–(2,4)–(2,5); (1,1.5) circle(0.6); (1,3.5)&#10;circle(0.6); (1,1.5) node []{}; (1,3.5) node []{}; (3,2) node[]{};&#10;&#10;(3,4.5)–(3,1.5)–(2.25,1)–(2.25,-0.5);&#10;(2.25,1)–(1.5,1.5)–(1.5,2.5)–(0.75,3)–(0.75,4.5);&#10;(0.75,3)–(0,2.5)–(0,-0.5); (2.25,1) circle(0.6); (0.75,3) circle(0.6);&#10;(2.25,1) node []{}; (0.75,3) node []{};&#10;&#10;(0,0)–(0,1)–(1,1.5)–(1,3.5)–(0,4)–(0,5);&#10;(2,0)–(2,1)–(1,1.5)–(1,3.5)–(2,4)–(2,5); (1,1.5) circle(0.6); (1,3.5)&#10;circle(0.6); (1,1.5) node []{}; (1,3.5) node []{}; (3,2) node[]{};&#10;(4,0)–(4,5); (6,0)–(6,5); (7,2) node[]{};&#10;&#10;(8,4.5)–(8,1.5)–(8.75,1)–(8.75,-0.5);&#10;(8.75,1)–(9.5,1.5)–(9.5,2.5)–(10.25,3)–(10.25,4.5);&#10;(10.25,3)–(11,2.5)–(11,-0.5); (8.75,1) circle(0.6); (10.25,3)&#10;circle(0.6); (8.75,1) node []{}; (10.25,3) node []{}; (11.75,2.5)&#10;node[]{};&#10;&#10;(3,4.5)–(3,1.5)–(2.25,1)–(2.25,-0.5);&#10;(2.25,1)–(1.5,1.5)–(1.5,2.5)–(0.75,3)–(0.75,4.5);&#10;(0.75,3)–(0,2.5)–(0,-0.5); (2.25,1) circle(0.6); (0.75,3) circle(0.6);&#10;(2.25,1) node []{}; (0.75,3) node []{};&#10;&#10;Note that if -bialgebras satisfy the rigidity theorem with a given&#10;confluence law , so does -bialgebras with the confluence law obtained as&#10;the dual of , or, graphically, as the horizontal mirror image of .&#10;&#10;Some cases are not obtained by duality of the same product, for instance&#10;in the dendriform case, the isomorphism given by Foissy’s mixed&#10;distributive law () in arity two (between and ) is given by: The matrix&#10;of is diagonalisable but admits as an eigenvalue. Indeed, Foissy uses&#10;two different dendriform products defined on dendriform algebras and&#10;computes the mixed distributive laws between one and the dual of the&#10;other.&#10;&#10;In the 2-as case computed by Loday et Ronco in , the isomorphism given&#10;by Hopf and n.u.i. mixed distributive laws in arity two is&#10;diagonalisable but admits and as an eigenvalue. It would be interesting&#10;to know if there exists two different 2-as products such that when&#10;looking at the mixed distributive laws between one and the dual of the&#10;other, one recovers Loday and Ronco’s mixed distributive laws.">
  </outline>
  <outline text="PreLie Case." _note="We consider here the PreLie operad and the rooted tree basis introduced&#10;by Chapoton and Livernet in : the free PreLie algebra on a vector space&#10;is spanned by rooted (non planar) trees with vertices indexed by . This&#10;example was the motivation for the introduction of confluence laws.&#10;&#10;We recall that the relation satisfied by a PreLie product is given by:&#10;&#10;Combinatorially, the product is the sum over all possible ways to add an&#10;edge between a vertex of and the root of . The root of the obtained tree&#10;is the root of .&#10;&#10;The dual coproduct is then given by the sum over all possible ways to&#10;delete an edge in the tree: where is the connected component of&#10;containing the root of and is the other connected component.&#10;&#10;This coproduct is obtained by taking only connected components in&#10;Connes-Kreimer coproduct.&#10;&#10;To apply the rigidity theorem to some algebras, we compute the&#10;associated confluence law:&#10;&#10;\[RelCompPL\] The PreLie product and its dual coproduct satisfy the&#10;following confluence law, for and , some primitive elements in a given&#10;-bialgebra: where and .&#10;&#10;(0,0)–(0,1)–(1,1.5)–(1,2.5)–(0,3)–(0,4);&#10;(2,0)–(2,1)–(1,1.5)–(1,2.5)–(2,3)–(2,4); (3,2) node[]{}; (4,5) node[]{};&#10;(4,0)–(4,4); (6,0)–(6,4); (7,2) node[]{};&#10;&#10;(8,4)–(8,1.5)–(8.75,1)–(8.75,0);&#10;(8.75,1)–(9.5,1.5)–(9.5,2.5)–(10.25,3)–(10.25,4);&#10;(10.25,3)–(11,2.5)–(11,0); (11.75,2) node[]{};&#10;&#10;(3,4)–(3,1.5)–(2.25,1)–(2.25,0);&#10;(2.25,1)–(1.5,1.5)–(1.5,2.5)–(0.75,3)–(0.75,4); (0.75,3)–(0,2.5)–(0,0);&#10;(4,2) node[]{};&#10;&#10;(17,0)–(17,1.25)–(16,2)–(17,2.75)–(17,4); (17,1.25)..controls (18,2) and&#10;(18.5,2.5) .. (18.5,3)–(18.5,4); (17,2.75)..controls (18,2) and&#10;(18.5,1.5).. (18.5,1)–(18.5,0);&#10;&#10;The previous definition of the confluence law is easier to apply. We&#10;also state another definition, closer to the formal definition of&#10;confluence law but strictly equivalent to the previous one, for and :&#10;&#10;where the sum is taken over products satisfying , where is the operad&#10;composition of PreLie and only one element S is taken in the orbit by&#10;the action of the symmetric group (for instance, only one representative&#10;of is chosen.)&#10;&#10;For the first expression, the decomposition is done following the&#10;deleted edge: it can be between and , in , or in . If it is in , it can&#10;be between the root of and the root of or somewhere else.&#10;&#10;The second expression follows quite easily from the definition of the&#10;dual coproduct.&#10;&#10;It has been pointed to the authors that the sketch of this confluence&#10;law can also be found in .&#10;&#10;Let us give explicitely the second formulation of confluence laws on&#10;some example. For and , we get: Note that there are two terms per way to&#10;choose one edge in a left subtree and one edge in the right subtree of a&#10;node due to symmetries of .&#10;&#10;Applying the algorithm, the idempotent is given by: where we see a&#10;rooted tree as the Hasse diagram of a poset with a unique minimal&#10;element (the root) and is the set of linear extension of the poset .&#10;&#10;We show that this idempotent vanishes on any non trivial rooted tree by&#10;an inclusion-exclusion principle. For any , the coefficient in front of&#10;a tree in , with having edges different from the ones in , is obtained&#10;from coproducts deleting these edges and others by:&#10;&#10;Hence the result.&#10;&#10;We now apply rigidity theorem for PreLie algebras to three examples in&#10;the literature.&#10;&#10;\[Box trees\] We use the obtained criterion to give a new proof of the&#10;freeness of the algebra of partitioned trees introduced in . Partitioned&#10;trees are equivalent to box trees introduced in .&#10;&#10;Let us consider a quadruple , where&#10;&#10; is a finite set called the set of LABELS,&#10;&#10; is a partition of called the set of VERTICES,&#10;&#10; is an element of called the root,&#10;&#10; is a map from to called the set of EDGES.&#10;&#10;We will denote by , the map from to which associates to a vertex the&#10;vertex containing the label . The pair is then an oriented graph, with&#10;vertices labelled by subsets of .&#10;&#10;A quadruple is a BOX TREE if and only if the graph is a tree, rooted in&#10;, with edges oriented toward the root.&#10;&#10;A label is called PARENT of a vertex if .&#10;&#10;In Figure \[exemple box tree\], an example of box trees is presented.&#10;The root is the double rectangle.&#10;&#10;(-0.35,-0.35) rectangle(2.35,0.35); (-0.3,-0.3) rectangle(2.3,0.3);&#10;(-0.3,0.7) rectangle(1.3,1.3); (1.7,0.7) rectangle(2.3,1.3); (-0.3,1.7)&#10;rectangle(0.3,2.3); (0.7,1.7) rectangle(1.3,2.3); (1.7,1.7)&#10;rectangle(2.3,2.3); (1,0.7) – (1,0.15); (2,0.7) – (2,0.15); (1,1.7) –&#10;(1,1.15); (0,1.7) – (1,1.15); (2,1.7) – (2,1.15); (0,0) node[]{}; (1,0)&#10;node[]{}; (2,0) node[]{}; (2,1) node[]{}; (2,2) node[]{}; (0,1)&#10;node[]{}; (1,1) node[]{}; (1,2) node[]{}; (0,2) node[]{};&#10;&#10;The product is given by the natural PreLie product on trees.&#10;&#10;On this algebra, we define the following coproduct: This coproduct&#10;satisfies the previous confluence law. Hence the associated algebra is&#10;PreLie free, with primitive given by trees with no edges.&#10;&#10;\[hypertree\] The bijection between decorated hypertrees and a pair&#10;given by some type of box trees and decorated sets motivated the&#10;introduction of the following product on hypertrees introduced by Berge&#10;in and studied by the second author in , and :&#10;&#10;A HYPERGRAPH (ON A SET ) is an ordered pair where is a finite set and is&#10;a collection of elements of cardinality at least two, belonging to the&#10;power set . The elements of are called VERTICES and those of are called&#10;EDGES.&#10;&#10;An example of hypergraph is presented in figure \[hypfig\].&#10;&#10;(0,0) – (0,1) node\[midway, left\][A]{}; (0,1) – (1,1) node\[midway,&#10;above\][B]{}; (1,1) – (1,0) – (2,0) – (2,1) – (1,1); (1.5,0.5)&#10;node[C]{}; (2,0) – (2,1)–(3,1) – (2,0); (2.30,0.70) node[D]{}; (0,0)&#10;circle (0.2); (0,1) circle (0.2); (1,1) circle (0.2); (1,0) circle&#10;(0.2); (2,0) circle (0.2); (2,1) circle (0.2); (3,1) circle (0.2); (0,0)&#10;node[]{}; (0,1) node[]{}; (1,1) node[]{}; (1,0) node[]{}; (2,1)&#10;node[]{}; (2,0) node[]{}; (3,1) node[]{};&#10;&#10;Let be a hypergraph.&#10;&#10;A WALK FROM A VERTEX OR AN EDGE TO A VERTEX OR AN EDGE IN is an&#10;alternating sequence of vertices and edges beginning by and ending by&#10;where for all , , and . The LENGTH of a walk is the number of edges and&#10;vertices in the walk.&#10;&#10;In the previous example, there are several walks from to : and . A walk&#10;from to is .&#10;&#10;A HYPERTREE is a non-empty hypergraph such that, given any distinct&#10;vertices and in ,&#10;&#10;there exists a walk from to in with distinct edges , i.e. is CONNECTED,&#10;&#10;and this walk is unique, i.e. has NO CYCLES.&#10;&#10;The pair is called HYPERTREE ON . If is the set , then is called an&#10;HYPERTREE ON VERTICES.&#10;&#10;An example of an hypertree is presented in figure \[htfig\].&#10;&#10;(0,0) – (1,1) – (0,1) – (0,0); (1,0) – (1,1); (0,0) circle (0.2); (0,1)&#10;circle (0.2); (1,1) circle (0.2); (1,0) circle (0.2); (0,0) node[]{};&#10;(0,1) node[]{}; (1,1) node[]{}; (1,0) node[]{};&#10;&#10;Let us consider a rooted hypertree , i.e. a hypertree with a&#10;distinguished vertex. Given an edge of , there is one vertex of which is&#10;the nearest from the root of in : let us call it the PETIOLE of .&#10;&#10;We define a PreLie product on rooted hypertrees as the sum of all the&#10;ways to graft the root of on a vertex of , where the grafting is given&#10;by adding an edge between and .&#10;&#10;We represent below the product of two rooted hypertrees:&#10;&#10;(0,0) – (1,1) – (0,1) – (0,0); (1,0) – (1,1); (0,0) circle (0.3); (0,1)&#10;circle (0.2); (1,1) circle (0.2); (1,0) circle (0.2); (0,0) circle&#10;(0.2); (0,0) node[]{}; (0,1) node[]{}; (1,1) node[]{}; (1,0) node[]{};&#10;&#10;(0,1)–(0,0) – (1,1) ; (0,0) circle (0.3); (0,0) circle (0.2); (1,1)&#10;circle (0.2); (0,1) circle (0.2); (0,0) node[]{}; (1,1) node[]{}; (0,1)&#10;node[]{};&#10;&#10;(0,0)–(-1,1);&#10;&#10;(0,0) – (1,1) – (0,1) – (0,0); (1,0) – (1,1); (0,0) circle (0.3); (0,1)&#10;circle (0.2); (1,1) circle (0.2); (1,0) circle (0.2); (0,0) circle&#10;(0.2); (0,0) node[]{}; (0,1) node[]{}; (1,1) node[]{}; (1,0) node[]{};&#10;&#10;(-1,2)–(-1,1) – (0,2) ; (-1,1) circle (0.2); (0,2) circle (0.2); (-1,2)&#10;circle (0.2); (-1,1) node[]{}; (0,2) node[]{}; (-1,2) node[]{};&#10;&#10;(0,1)–(0,2);&#10;&#10;(0,0) – (1,1) – (0,1) – (0,0); (1,0) – (1,1); (0,0) circle (0.3); (0,1)&#10;circle (0.2); (1,1) circle (0.2); (1,0) circle (0.2); (0,0) circle&#10;(0.2); (0,0) node[]{}; (0,1) node[]{}; (1,1) node[]{}; (1,0) node[]{};&#10;&#10;(0,3)–(0,2) – (1,3) ; (0,2) circle (0.2); (1,3) circle (0.2); (0,3)&#10;circle (0.2); (0,2) node[]{}; (1,3) node[]{}; (0,3) node[]{};&#10;&#10;(1,1)–(1,2);&#10;&#10;(0,0) – (1,1) – (0,1) – (0,0); (1,0) – (1,1); (0,0) circle (0.3); (0,1)&#10;circle (0.2); (1,1) circle (0.2); (1,0) circle (0.2); (0,0) circle&#10;(0.2); (0,0) node[]{}; (0,1) node[]{}; (1,1) node[]{}; (1,0) node[]{};&#10;&#10;(1,3)–(1,2) – (2,3) ; (1,2) circle (0.2); (2,3) circle (0.2); (1,3)&#10;circle (0.2); (1,2) node[]{}; (2,3) node[]{}; (1,3) node[]{};&#10;&#10;(1,0)–(2,1);&#10;&#10;(0,0) – (1,1) – (0,1) – (0,0); (1,0) – (1,1); (0,0) circle (0.3); (0,1)&#10;circle (0.2); (1,1) circle (0.2); (1,0) circle (0.2); (0,0) circle&#10;(0.2); (0,0) node[]{}; (0,1) node[]{}; (1,1) node[]{}; (1,0) node[]{};&#10;&#10;(2,2)–(2,1) – (3,2) ; (2,1) circle (0.2); (3,2) circle (0.2); (2,2)&#10;circle (0.2); (2,1) node[]{}; (3,2) node[]{}; (2,2) node[]{};&#10;&#10;.&#10;&#10;On this algebra, we define the following coproduct: This coproduct&#10;satisfies the previous confluence law. Hence the associated algebra is&#10;PreLie free, with primitive given by hypertrees with no binary edge,&#10;i.e. edge of cardinality two.&#10;&#10;\[Fat trees\] In and , the second author also studied the notion of&#10;(rooted) fat trees introduced in :&#10;&#10;A FAT TREE ON A SET is a partition of , whose parts are called VERTICES,&#10;together with edges linking elements of different vertices, such that:&#10;&#10;a WALK on the fat tree is an alternating sequence , where for every ,&#10;and are elements of different vertices and is an edge between and , and&#10;for every between and , and are elements of the same vertex;&#10;&#10;For every pair of elements of different vertices , there exists one and&#10;only one walk from to .&#10;&#10;A ROOTED FAT TREE is a fat tree with a distinguished element called the&#10;ROOT.&#10;&#10;In Figure \[exemple fat\], an example of a rooted fat tree is presented.&#10;The root is circled.&#10;&#10;(-0.3,-0.3) rectangle(2.3,0.3); (-0.3,0.7) rectangle(1.3,1.3); (1.7,0.7)&#10;rectangle(2.3,1.3); (-0.3,1.7) rectangle(0.3,2.3); (0.7,1.7)&#10;rectangle(1.3,2.3); (1.7,1.7) rectangle(2.3,2.3); (1,0.85) – (1,0.15);&#10;(2,0.85) – (2,0.15); (1,1.85) – (1,1.15); (0,1.85) – (1,1.15); (2,1.85)&#10;– (2,1.15); (0,0) circle (0.2); (0,0) node[]{}; (1,0) node[]{}; (2,0)&#10;node[]{}; (2,1) node[]{}; (2,2) node[]{}; (0,1) node[]{}; (1,1)&#10;node[]{}; (1,2) node[]{}; (0,2) node[]{};&#10;&#10;The vector space of rooted fat trees can easily be endowed with a PreLie&#10;product given by the tree structure.&#10;&#10;On this algebra, we define the following coproduct: This coproduct&#10;satisfies the previous confluence law. Hence the associated algebra is&#10;PreLie free, with primitive given by fat trees with no edges.&#10;&#10;This example shows that the formula should contain a sum over&#10;permutations of primitive elements to take into account the action of&#10;the symmetric group, and automorphism groups of operations, which does&#10;not appear in . For instance, in PreLie(3), we have, denoting the&#10;generating product and coproduct respectively by and : for any triples&#10;of primitive elements . The second term of the sum will always appear if&#10;the first one appear because of the equality:">
  </outline>
  <outline text="Perm Case." _note="We now apply the rigidity theorem in dual case to Operad Perm,&#10;introduced by Chapoton in endowed with the usual vector space basis&#10;given by pointed sets.&#10;&#10;We recall that the relation satisfied by a Perm product is given by:&#10;&#10;Combinatorially, the product is the pointed set obtained by the union of&#10;and pointed in the pointed element of .&#10;&#10;The dual coproduct is then given by the sum over all possible ways to&#10;split the set in two pointed set and such that is the union of and and&#10;the pointed element of is the pointed element of : where, for any&#10;pointed set , denotes the pointed element of .&#10;&#10;In this case, the idempotent is given explicitly by the following&#10;formula: where is defined recursively by:&#10;&#10;We use the notation because the diagram of is a diamond.&#10;&#10;We show by induction that . The iterated coproduct satisfies the&#10;following relation: Indeed, only terms in the coproduct whose left part&#10;has at least elements remain after coproducts. To choose such a&#10;decomposition, we have choices.&#10;&#10;To apply the rigidity theorem to some algebras, we compute the&#10;associated confluence law:&#10;&#10;The Perm product and its dual coproduct satisfy on primitive elements&#10;the following confluence law, with and , for any element , where is the&#10;Kronecker symbol: where and .&#10;&#10;The coproduct of the product is obtained by merging and , forgetting the&#10;pointed element of and then splitting the pointed set into two pointed&#10;sets, the left one containing the pointed element of . The equality is&#10;obtained by considering the different cases:&#10;&#10;if the splitting separates and , is on the left side and can be pointed&#10;in any element,&#10;&#10;if the splitting splits only, the right part of the coproduct can be&#10;pointed in an element of or any element of ,&#10;&#10;if the splitting splits only, the pointed element of the left part of&#10;the coproduct is fixed and the right part can contain the pointed&#10;element of (which is in ) or not and then be pointed in any element.&#10;&#10;if the splitting splits both and , the pointed element of can be on the&#10;right or on the left part and the pointed element of the right part can&#10;be chosen in or in .">
  </outline>
  <outline text="NAP Case." _note="We consider here the NAP operad (see and ). Livernet has proven in the&#10;existence of a mixed distributive law such that any conilpotent PreLie&#10;coNAP bialgebra satisfying the associated mixed distributive law is free&#10;and cofree over its primitive elements. We study here NAP coNAP&#10;bialgebras.&#10;&#10;The NAP product on a vector space satisfies the following relation, for&#10;all , and in :&#10;&#10;A basis of a free NAP algebra over a vector space is given by the set of&#10;rooted trees on vertices labelled by elements from , denoted by . The&#10;product of two trees and in this algebra is then the tree obtained by&#10;grafting the root of to the root of (see Figure \[T.NAPS\]).&#10;&#10;\[level distance=10mm, every node/.style=[circle,inner sep=1pt,&#10;draw]{}\] \[grow’=up\] child [node [2]{}]{} child [node [3]{}]{};&#10;&#10;\[level distance=10mm, every node/.style=[circle,inner sep=1pt,&#10;draw]{}\] \[grow’=up\] child [node [5]{}]{};&#10;&#10;\[level distance=10mm, every node/.style=[circle,inner sep=1pt,&#10;draw]{}\] \[grow’=up\] child [node [2]{}]{} child [node [3]{}]{} child&#10;[node [4]{} child [node [5]{}]{}]{};&#10;&#10;The coproduct of a tree in this algebra, given as the dual of the&#10;product, is the sum of all possible trees obtained by deleting an edge&#10;attached to the root of . The part containing the root of is then the&#10;left part of the coproduct (see Figure \[DNAP(T)\]).&#10;&#10;To apply the rigidity theorem to some algebras, we compute the&#10;associated confluence law (which is a mixed distributive law):&#10;&#10;The NAP product and its associated dual coproduct satisfy the following&#10;mixed distributive law: where (Sweedler’s notation).&#10;&#10;(0,0)–(0,1)–(1,1.5)–(1,2.5)–(0,3)–(0,4);&#10;(2,0)–(2,1)–(1,1.5)–(1,2.5)–(2,3)–(2,4); (3,2) node []{}; (4,0)–(4,4);&#10;(6,0)–(6,4); (7,2) node[]{}; (9,0)–(9,1)–(8,2)–(9,3)–(9,4);&#10;(9,1)..controls (10,2) and (10.5,2.5) .. (10.5,3)–(10.5,4);&#10;(9,3)..controls (10,2) and (10.5,1.5).. (10.5,1)–(10.5,0);&#10;&#10; is the sum of all possibilities of deleting an edge containing the root&#10;of in the tree obtained by adding an edge between the root of and the&#10;one of . The result comes from the following decomposition: either the&#10;edge deleted is or it is an edge of .&#10;&#10;The previous reasoning gives us the following expression for idempotent,&#10;checked in the proof below: where is defined recursively by:&#10;&#10;The operator can be rewritten in terms of rooted trees by . The partial&#10;sum vanishes over all rooted trees on at least two vertices, whose root&#10;has at most children.&#10;&#10;Any free PreLie algebra can be endowed with a natural structure of free&#10;NAP algebra. Note that it is not the case for non free PreLie algebras:&#10;for instance, the PreLie structure on Mag operad cannot be endowed with&#10;a NAP product (see ).&#10;&#10;The examples developed in the subsection \[PLcase\] can then be seen as&#10;NAP-algebras when considering grafting to the root only.&#10;&#10;Considering Example \[Box trees\] endowed with the natural NAP structure&#10;associated to the PreLie product, we can define the following coNAP&#10;coproduct: where is the set of edges of adjacent to the root of .&#10;&#10;This coproduct satisfies the previous mixed distributive law. Hence the&#10;associated algebra is NAP free, with primitive given by trees with no&#10;edges.&#10;&#10;Considering Example \[hypertree\], we define a NAP product on rooted&#10;hypertrees as the hypertree obtained by grafting the root of on the root&#10;of , where the grafting is given by adding an edge between and .&#10;&#10;On this algebra, we define the following coproduct: where is the set of&#10;edges of adjacent to the root of .&#10;&#10;This coproduct satisfies the previous mixed distributive law. Hence the&#10;associated algebra is NAP free, with primitive given by hypertrees with&#10;no binary edge, i.e. edge of cardinality two.&#10;&#10;Considering Example \[Fat trees\] endowed with the natural NAP structure&#10;associated to the PreLie product, we can define the following coNAP&#10;coproduct: where is the set of edges of adjacent to the root of .&#10;&#10;This coproduct satisfies the previous mixed distributive law. Hence the&#10;associated algebra is NAP free, with primitive given by trees with no&#10;edges.">
  </outline>
  <outline text="PAN Case." _note="We consider here the Koszul dual of the NAP operad, denoted by PAN. The&#10;PAN product on a vector space satisfies the following relation, for all&#10;, and in :&#10;&#10;The operad PAN is the Koszul dual of the operad NAP.&#10;&#10;We use the methods of V. Dotsenko and E. Hoffbeck (see ) to determine&#10;the Koszul dual of NAP operad. Let us recall the relation in NAP: The&#10;orthogonal of this relation is precisely the relations of PAN.&#10;&#10;A basis of a free PAN algebra over a vector space is given by the set of&#10;pointed sets on elements labelled by elements from . Denoting in bold&#10;the pointed element of the set, the product of two pointed sets and in&#10;this algebra is then the pointed set if , otherwise.&#10;&#10;The coproduct of a pointed set pointed in in this algebra, given as the&#10;dual of the product, is given by: where the set is pointed in .&#10;&#10;To apply the rigidity theorem to some algebras, we compute the&#10;associated confluence law:&#10;&#10;The PAN product and its associated dual coproduct satisfy the following&#10;confluence law on the primitive elements of any conilpotent&#10;PAN-bialgebra: where (Sweedler’s notation) and is the Kronecker symbol.&#10;&#10;(-1,0)–(-1,1)–(-2,1.5)–(-2,2.5)–(-1,3)–(-1,4);&#10;(-3,0)–(-3,1)–(-2,1.5)–(-2,2.5)–(-3,3)–(-3,4); (1.5,2) node []{};&#10;(5,0)–(5,4); (7,0)–(7,4); (8,2) node[]{};&#10;(10,0)–(10,1)–(9,2)–(10,3)–(10,4); (10,1)..controls (11,2) and&#10;(11.5,2.5) .. (11.5,3)–(11.5,4); (10,3)..controls (11,2) and&#10;(11.5,1.5).. (11.5,1)–(11.5,0);&#10;&#10;If , . Otherwise, the coproduct is obtained by either separating and or&#10;splitting .&#10;&#10;The previous reasoning gives us the following expression for idempotent,&#10;checked in the proof below: where is defined recursively by:&#10;&#10;We show by induction that . Indeed, the iterated coproduct satisfies the&#10;following relation: The equality then comes from Newton binomial&#10;theorem.&#10;&#10;COPAN-PERM BIALGEBRAS&#10;&#10;Any Perm algebra can be endowed with a structure of coPAN bialgebras by&#10;considering the coproduct dual to the natural structure of PAN-algebra.&#10;&#10;The following confluence law follows directly from the definitions:&#10;&#10;The Perm product and the associated dual coPAN-coproduct satisfy the&#10;following confluence law on the primitive elements of any conilpotent&#10;coPAN-Perm-bialgebra: where and (Sweedler’s notation).">
  </outline>
  <outline text="Associative, Leibniz, Poisson and Zinbiel case." _note="We now consider rigidity theorems obtained from operads which underlying&#10;free algebras is the tensor algebra (with different products):&#10;Associative, Leibniz, Poisson and Zinbiel. These operads were introduced&#10;respectively in , and .&#10;&#10;The relations satisfied by these operads are respectively:&#10;&#10;for the Associative product , (the will be sometimes omitted)&#10;&#10;for the Leibniz product , ,&#10;&#10;for the Poisson products and , is (associative) commutative, is a Lie&#10;bracket and&#10;&#10;for the Zinbiel product ,&#10;&#10;Using relations, Poisson can be interpreted as (commutative products of&#10;Lie brackets of elements). A basis of Poisson operad is then given by&#10;the usual Lyndon basis of Lie algebras, with commutative terms sorted by&#10;non increasing order. The obtained terms are then naturally bracketed,&#10;the Lie brackets being determined by left-to-right minima and being&#10;naturally bracketed as Lyndon words (for instance, stands for ). We&#10;denote these representation in bold to distinguish it from the&#10;representation below.&#10;&#10;To identify it as associative elements, one has to use the injection of&#10;Lie algebras into associative algebras defined by and the injection of&#10;commutative algebras into associative algebras defined by .&#10;&#10;Using the above injections and with implicit between elements in the&#10;right part of the equality, we obtain a basis of the Poisson operad. The&#10;elements of small arities are then given by:&#10;&#10;in arity , and&#10;&#10;in arity ,&#10;&#10;Combinatorially, these products correspond on the tensor algebra to:&#10;&#10;the concatenation for the associative product:&#10;&#10;for the Leibniz product , with and ,&#10;&#10;the shuffle product for the Poisson product and the commutator of&#10;concatenation for the Poisson bracket :&#10;&#10;and&#10;&#10;the halfshuffle for the Zinbiel product: where , with and .&#10;&#10;The associated dual coproducts are then given on the tensor algebra by:&#10;&#10;the deconcatenation for the associative product:&#10;&#10;for the Leibniz coproduct ,&#10;&#10;the coshuffle coproduct for the Poisson product and the commutator of&#10;deconcatenation for the Poisson bracket :&#10;&#10;and with and .&#10;&#10;the cohalfshuffle for the Zinbiel coproduct: with and .&#10;&#10;The mixed distributive laws for the different relations are given by:&#10;&#10;ASSOCIATIVE-ASSOCIATIVE CASE: n.u.i. mixed distributive law proven in&#10;(written on Example \[2.1.5\]),&#10;&#10;ASSOCIATIVE-ZINBIEL CASE: semi-Hopf mixed distributive law proven in&#10;(written on Example \[2.1.5\]). Note that the product used is exactly&#10;the shuffle product ,&#10;&#10;ASSOCIATIVE-LEIBNIZ CASE: To express a confluence law, we need some&#10;operators expressed in terms of coassociative coproduct and Leibniz&#10;product: where and is the Kronecker symbol,&#10;&#10;where , , , and the sequences are extracted thanks to deconcatenation&#10;and concatenation defined just above.&#10;&#10;The confluence law is then given combinatorially, according to where the&#10;deconcatenation occurs, by:&#10;&#10;ASSOCIATIVE-POISSON CASE: The mixed distributive law is given&#10;combinatorially by: and where and .&#10;&#10;ZINBIEL-LEIBNIZ CASE: Remark first that the concatenation can be&#10;obtained recursively by: where .&#10;&#10;We can then define as previously the operations and .&#10;&#10;The confluence law is thus given combinatorially by:&#10;&#10;No term can be obtained by splitting because a term can be obtained&#10;thanks to different elements of (according to how the elements are&#10;mixed) and then the coefficient of this term is exactly .">
  </outline>
  <outline text="Dendriform and Tridendriform case." _note="These cases are treated in the article . The relations obtained for the&#10;bidendriform bialgebra are different from the ones obtained by Foissy in&#10;.">
  </outline>
  <outline text="2-as and dipt case." _note="We now compute mixed distributive laws for Operads 2-as and Dipt,&#10;introduced by J.-L. Loday and M. Ronco in and .&#10;&#10;We recall that the relation satisfies by 2-as products and are given by:&#10;&#10;Combinatorially, the free 2-associative algebra on a vector space is&#10;spanned by words on planar trees with leaves decorated by elements of .&#10;The product is then the concatenation of trees in the word and is a&#10;grafting on a new root.&#10;&#10;Following the dual case for the associative operad, the products and&#10;their dual coproducts are linked by the mixed distributive law given in&#10;the following array:&#10;&#10;We recall that the relation satisfies by dipterous products and are&#10;given by:&#10;&#10;Combinatorially (see and ), the free dipterous algebra on a vector space&#10;is spanned by words on planar trees with leaves decorated by elements of&#10;. The product is then the concatenation of trees in the word and is&#10;given recursively by: where and are trees and is the grafting of all the&#10;trees on a new root.&#10;&#10;The coproduct is then given by considering the unique leftmost path from&#10;the root of the tree to the first node of arity different from two (this&#10;path can be trivial if the arity of the root is not two): there is as&#10;many term in the coproduct as there are edges in this path and a term is&#10;obtained from an edge by deleting all edges starting from vertices on&#10;the path between the root and and reordering the terms according to the&#10;previous recursive equation.&#10;&#10;An example of dipterous product and coproduct is presented below:&#10;&#10;The products and their dual coproducts are then linked by the following&#10;mixed distributive law according to where the edge comes from: where for&#10;any operation (Sweedler’s notation of coproduct).">
  </outline>
</outline>
  </body>
</opml>