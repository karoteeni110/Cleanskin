<?xml version="1.0" encoding="UTF-8"?>
<opml version="2.0">
  <head>
    <title></title>
    <abstract> </abstract>
  </head>
  <body>
<outline text="CSCN Problem’s NP-Completeness" _note="We have formalized the problem of the Core Structural Connectivity&#10;Network taking into account the density and connectedness of the core&#10;subgraph and the sparsity of the outer one. We will now prove that, with&#10;this formalization, the problem is -Complete.&#10;&#10;Given weighted graphs (the SAMPLE GRAPHS) with a common node set, a&#10;complete edges set () and weights of their edges, and given real&#10;numbers, find connected graph (the CORE GRAPH) such that for and as&#10;defined in Eq. (\[alpha\]) and Eq .(\[beta\]).&#10;&#10;In Theorem \[the:NP-complete-with-Steiner\] we have proved that  is&#10;-complete. Hence, to be able to solve it in reasonable time we need a&#10;relaxation to make it tractable or an approximate algorithm for the&#10;complete version. In this article we will propose both.">
</outline>
<outline text="Relaxation of the CSCN problem" _note="We proved in the previous section that the connectivity constraint is&#10;the main reason of the difficulty of the problem. Without it, it becomes&#10;tractable. So we solve, in this section, a relaxed version of problem&#10;without the connectivity constraint. Then, we use this solution to&#10;approximate the full problem.&#10;&#10;The decision version of  without the connectivity constraint is in ¶.&#10;&#10;Compute for each&#10;&#10;Algorithm \[alg\_max\_edges\], in each step , defines as the maximum&#10;weighted edges and tries to use that to fulfill the constraints.&#10;&#10;Assume that there exists an that fulfills the constraints. There are two&#10;cases: 1) has the maximum weighted edges, 2) there are , such that . In&#10;1), Algorithm \[alg\_max\_edges\] will find . In 2), let another subset&#10;of . Then because the edges in are the same as the ones in except from&#10;one that has a larger weight. For the same reason, Thus, we found a new&#10;subset of that stills fulfills the constraints. We can do the same&#10;process with (replace an edge with another one of larger weight)&#10;iteratively, always getting subsets that fulfills the constraints, until&#10;we cannot do this anymore. At that point we will have a subset that has&#10;only the maximum edges and fulfills the constraints. Thus, algorithm&#10;\[alg\_max\_edges\] will find this subset.&#10;&#10;We now need to prove algorithm \[alg\_max\_edges\] runs in polynomial&#10;time in the size of . The first operation, computing for each , implies&#10;computing the mean and standard deviation for each edge across the&#10;population, which can be done in per edge (where is the size of the&#10;population). This is for all the edges. The second step, sorting, can be&#10;done in .&#10;&#10;The main loop runs at most times, and in each loop it adds an edge to ,&#10;computes and and performs two comparisons. The comparisons can be done&#10;in constant time, as the addition to if we use a linked list of edges to&#10;represent it. To compute and it is needed to iterate once again (the&#10;part in for , the part in for ) adding the weights together and then&#10;performing two divisions. This can be done in linear time in the size of&#10;, and even quicker (constant time) if we optimize it by keeping the&#10;values of and across loops and updating them with the weight of the edge&#10;that changed sets.&#10;&#10;Then, algorithm \[alg\_max\_edges\] solves the  in or in if a little&#10;optimization is used.">
</outline>
<outline text="Heuristic approach" _note="In Section \[algorithm\_section\] we developed&#10;Algorithm \[alg\_max\_edges\] to solve the problem of finding the Core&#10;Structural Connectivity Network in polynomial time. However, this&#10;algorithm does not guarantee a connected result. We solve the original&#10;problem, presented in Section \[problem\_section\], by first applying&#10;Algorithm \[alg\_max\_edges\] and then modifying the resulting core&#10;graph to guarantee its connectedness. This results in an approximate&#10;solution for the full problem computable in polynomial time.&#10;&#10;To extend into a connected graph we add the necessary edges while&#10;decreasing the minimum possible the objective function defined in&#10;Eq. \[optimization\]. For this, we use the same approach that Wassermann&#10;et al. . Namely, we make a multigraph with the connected components of&#10;as nodes, complete it with all the possible edges between those&#10;connected components, and run a Maximum Spanning Tree algorithm. This&#10;selects the edges needed to produce a connected subgraph with the&#10;maximum possible weight. For the full details, see Wassermann et al. .&#10;This way we get a connected subgraph close to the best possible&#10;subgraph, which we obtained using Algorithm \[alg\_max\_edges\].">
</outline>
  </body>
</opml>