<?xml version="1.0" encoding="UTF-8"?>
<opml version="2.0">
  <head>
    <title>Flexible Representation and Manipulation\
of Audio Signals on Quantum Computers</title>
    <abstract> </abstract>
  </head>
  <body>
<outline text="A flexible representation of quantum audio and its preparations">
  <outline text="FRQA" _note="In electrical engineering, analog audio signals are often considered as a voltage that is varying over time. An Analog-to-Digital Converter (ADC) discretely takes samples from the analog signals at a given frequency (i.e. sampling rate) and according to the given binary sequence length (a.k.a. resolution), each sampled value is converted into a number based on its voltage level. In this fashion, digital audio is produced and represented as a sequence of numbers that express instantaneous amplitudes of the audio signal being sampled.  As a quantum representation, QRDA utilizes two entangled qubit sequences to store the audio amplitude and time information. Therein, the amplitude information is considered as a string of non-negative integers in the form: where is the length of binary sequence used to store each number, ( = 0, 1, …, -1) denotes the amplitude value in an -sized QRDA audio.  This extension facilitates the audio representation and manipulation in quantum computing domain. Nonetheless, for reasons we adduce below, the unipolar encoding strategy used in QRDA may not be applicable for the accurate computation and processing operations in quantum audio processing:  In QRDA, in Eq. ( ) can only represent non-negative numbers. Hence, some arithmetic operations pertaining to amplitude values are prone to errors. For instance, there are two amplitude values and (), it is virtually impossible to implement the operation and depict the result.  QRDA is an unipolar representation, thus it cannot display or determine the midrange of the waveform in the processing operations. Accordingly, the single values from two waveforms are added together is by no means to give a correct mixing function, e.g., addition of the opposite amplitude values in two waveforms will accumulate to higher amplitude instead of counteracting or offsetting each other.  In this study, a flexible representation of quantum audio, i.e. FRQA, is proposed. FRQA encodes the amplitude values in quantum audio in a bipolar (both non-negative and negative) manner, i.e. {, …, -1, 0, 1, …, }. Compared with the only known effort to perform audio signal processing on quantum computers (i.e. the QRDA), our proposal is more intuitive and graphic with the sign indicating the variation of the waveform, making it conceptually more like the real waveform of digital audio signals. More importantly, FRQA facilitates the realization of basic processing operations in an effective manner, e.g., (1) FRQA allows two sample values to be accurately added (or mixed in audio parlance) and it enables easy handling of the overflow and warp-around situations by using quantum circuits; (2) FRQA permits signal subtraction to be executed by simple logical addition operation with the inverted inputs, which offers a considerable saving in hardware complexity (since only carry logic is necessary and no borrow mechanism need be supported).  As conceived, the formalism of logic arithmetics provide FRQA with the adequate tools needed for effective quantum audio processing. Moreover, in digital audio processing, the most widespread method to represent bipolar numbers is based on using two’s complement notation. Hence, the extension to encode the amplitude value in quantum audio using the two’s complement arithmetic is both analogous and astute. Equation ( ) describes the stipulation in the form: where denotes the time information of a -sized quantum audio signal, is the binary sequence encoding the two’s complement notation of the amplitude value. Two cases of the binary sequence are listed as follows:  If the amplitude value is non-negative, then and is simply represented as a binary sequence of the value itself.  If the amplitude value is negative, then and is represented by the two’s complement mode of its absolute value.  Therefore, the quantum representative expression of an -sized FRQA audio can be written as below: where is the two’s complement representation of each amplitude value and , , is the corresponding time information. The state is normalized, i.e. . It is trivial that, as formalised in Eq. ( ), the FRQA needs qubits to represent a quantum audio with samples.  For an -sized ( cannot be represented by ) FRQA audio, employing qubits to represent the time information will produce audio redundancies . In this study, the amplitude values of all the redundancies are set as , so the FRQA state in Eq. ( ) can be rewritten into the form: where  Figure   shows a segment of an audio signal and its representative expression using the FRQA representation. In this example, amplitude values are sampled between -2 and 3, for which 3 qubits are needed to store the amplitude information in FRQA audio. The length of the audio is 13, then . Therefore, in total 7 qubits are required to represent this quantum audio signal.  ">
  </outline>
  <outline text="FRQA preparation" _note="In quantum computation, in order to prepare a desired quantum audio signal, it is necessary to transform a quantum computer from its initialized state to the specified state. The quantum mechanical build up of quantum computers dictate that all transformations are unitary in nature. This specifies the use of unitary matrices and simple basic gates to manipulate quantum data. In this subsection, we will present a description of the procedure required to prepare an FRQA state.  As stated earlier, in digital audio, the value of each sampled point is stored on an assigned -length binary sequence, i.e. , , which indicates the sequence is able to hold the amplitude values from 0 to . In order to quantize the amplitude value () and convert it into the two’s complement system (), we need to perform the value-setting operation which could be achieved by the following two sub-operations:  QUANTIZATION: Using the classical binary representation of as the reference, the initialized states in the quantum computer could be transformed into their desired quantum states. The layout of how to accomplish this has been widely discussed in the literature, notably .  CONVERSION: In order to convert the ordinary quantum state to its two’s complement system, the CNOT gate operation is executed on the Most-Significant-Bit (MSB) of the qubit sequence. In this manner, the output will be the desired quantum amplitude state, i.e. .  To illustrate these steps, consider the conversion of a 3-qubit resolution to the amplitude information in quantum audio as presented in TABLE  . A 3-qubit resolution holds the values ranging from 0 to 7. These numbers are binarized and quantized in two’s complement notation for further computation in quantum audio processing.        [cccc]{} Resolution &amp; Binary sequence &amp; Two’s complement &amp; Amplitude\ 7 &amp; 111 &amp; 011 &amp; 3\ 6 &amp; 110 &amp; 010 &amp; 2\ 5 &amp; 101 &amp; 001 &amp; 1\ 4 &amp; 100 &amp; 000 &amp; 0\ 3 &amp; 011 &amp; 111 &amp; -1\ 2 &amp; 010 &amp; 110 &amp; -2\ 1 &amp; 001 &amp; 101 &amp; -3\ 0 &amp; 000 &amp; 100 &amp; -4\  Therefore, the value-setting operation to perform the above procedure can be executed using Eqs. ( ) and ( ): where is the XOR operation. It is apparent to clarify that the operation works by means of an additional CNOT gate to negate the MSB only when , otherwise, it remains unchanged. Following this, the quantum transformation of to set amplitude value for each sample is shown in Eq. ( ):  In this manner, a unitary transform that encodes the amplitude information by means of two’s complement arithmetic is available during the preparation procedure. There are two steps to achieve the preparation procedure that are discussed as below:  **Step 1**: The initial state is transformed into the intermediate state using the 2-D identity matrix I and 2-D Hadamard matrix H presented in Eq. ( ):  Since the tensor product of Identity matrices and Hadamard matrices are denoted by and , respectively, applying the transform on produces the intermediate state in the form:  So far, the time information of the FRQA model has been initialized. At this moment, the intermediate state can be regarded as the superposition of all the samples of an empty digital audio, i.e. with all amplitude values set as .  **Step 2**: The value-setting operation is used to generate the amplitude information for each sample. Since can only handle one sample at a time, considering a -sized quantum audio, sub-operations are needed to execute this transformation. While is considered as an -controlled operation to integrate the amplitude values into each instant of time. For a given sample , is defined in Eq. ( ):  Applying on the the intermediate state gives us:  From Eq. ( ), it is clear that for all the sub-operations , we have:  After the two steps described above, the initialized state is transformed into the desired FRQA state by applying the unitary transform . Subsequently, we will continue to discuss the complexity of the preparation procedure.  Complexity theory on quantum computation has been studied to discover and analyze the transformations from the basic gates, viz. the complexity of quantum algorithms is usually computed in terms of quantum gates . Indeed, the circuit complexity depends largely on the strategy employed for circuit decomposition and the basic operation unit that is designated to be . In this study, we will confine our discussion to the CNOT gate for the complexity evaluation as it is a relatively “expensive” elementary gate that can be easily utilized to simulate the other complicated gates. The decomposition networks for some of the complicated quantum gates used in this paper is presented in Fig.  , where the -controlled NOT gate can be decomposed into Toffoli gates and 1 CNOT gate   and the Toffoli gate can be approximately simulated by 6 CNOT gates .  Based on the foregoing, it is clear that the implementation of transform in Step 1 requires Hadamard gates to execute. In addition, transform in Step 2 can be divided into sub-operations (i.e. ) to store the amplitude information for each sample. Therefore, with the assistance of enough ancillary qubits, each sub-operation can be directly implemented using Toffoli gates and no more than CNOT gates. Hence, the complexity of preparing a -sized FRQA state is: which indicates the efficiency of the preparation process. In order to further illustrate the complexity of constructing an FRQA quantum audio, we select the initialization of the sample at in Fig.   as an example. The network for implementing the operation, i.e.  )\], is depicted in Fig.  .  ">
  </outline>
  <outline text="FRQA retrieval" _note="The essential requirements for representing a quantum audio are the simplicity and efficiency in the storage and retrieval of the audio information. The storage of an FRQA audio is achieved by the preparation process as discussed in the preceding subsection. In this subsection, the rudiments required for the FRQA signal retrieval will be formalised.  Quantum measurement is the unique way of recovering classical information from a quantum state. To retrieve the amplitude information of each sample, quantum measurements and as defined in Eqs. ( ) and ( ) are used:  Firstly, executing the quantum measurement operation on the time sequence extracts corresponding information of sample as , which is shown in Eq. ( ): and then, the projective measurement is used to recover the amplitude value from the quantum state:  Through these measurement operations, the amplitude value of sample will be recovered. This means that all the samples in a quantum audio signal can be recovered in the same way, so the original digital audio can be retrieved from the FRQA state (Note that it is the theoretical discussion about the quantum information retrieval. We will not touch at all on the consequence of decoherence or any errors appeared in the process.)">
  </outline>
</outline>
<outline text="Operations on quantum audio signals" _note="Basic signal operations are the foundations of digital audio processing. The ability to extend similar operations to quantum audio processing is essential to validating the utility of this emerging sub-field of quantum information processing. In this section, we will present a few basic audio signal operations including signal addition, signal inversion, signal delay, and signal reversal based on the FRQA representation.">
  <outline text="Signal addition" _note="Signal addition is among the fundamental operations in audio signal processing. This operation involves the addition of amplitudes of two or more signals at each instant of time. By means of this operation, a series of audio signal processing like echo or reverb addition and active noise reduction can be implemented. Representing the amplitude values in two’s complement system in FRQA facilitates determining the results of the arithmetic operations and depicting the waveform with respect to the midrange. Hence, we can define the signal addition operation based on this arithmetic advantage as below.  Assuming that and are two audio segments as presented in Eqs. ( )-( ), the signal addition operation produces the output of as shown in Eq. ( ): where and where so where  Quantum algorithms are tools for constructing advanced operations using circuit elements. In order to construct the quantum circuit to execute the signal addition operation, we start by introducing two commonly-used quantum modules that are presented in Fig.  .  The ADDER module is designed to realize the operation , where and are two quantum sequences both with qubits, and = is a quantum sequence with qubits that represents the result of addition. By using the ADDER module and necessary control conditions, we can realize the addition of amplitude values in two segments of quantum audio at any given instant of time.  The other module presented in Fig.   is the quantum comparator module that is used to compare two -qubit binary sequences ( and ) and stores the result in the ancilla qubits . A useful output of in this study is when , then . The comparator module guarantees that the two operands in the addition are the amplitude values of the two audio segments at the same instant of time.  Hence, the operation of FRQA-based signal addition operation can be written in the form:  The quantum circuit to realize the operation is depicted in Fig.  , where the ADDER operation is applied on the amplitude content and the comparator operation is applied on the time content. Additionally, in order to avoid the overflow during two’s complement addition, we design a sign extension module (denoted as “EXT&quot; in Fig.  ) which helps to increase the length of the binary sequence while preserving the sign information in the ADDER module. To conclude our discussion of the signal addition operation, an example for the case when and is presented in Fig.  .  As seen in Fig.  , the circuit network for implementing the signal addition operation is divided into 3 parts: a comparator module, a -controlled “EXT&quot; module, and a -controlled ADDER module. Implementations of the ADDER and comparator module have been extensively discussed in and . Additionally, the computational complexities of the two modules are and , respectively, where and denote the length of the inputs as shown in Fig.  . Consequently, to effectively quantify the complexity of the operation depicted in Fig.  , we only need to determine the complexity of the -controlled “EXT&quot; module and -controlled ADDER module.  The -controlled “EXT&quot; module is a pair of -controlled NOT gates, so complexity of this part is . The ADDER module consists of Toffoli gates and CNOT gates , so the -controlled unit consists of -controlled NOT gates and -controlled NOT gates, thereby the complexity of this controlled module is . Based on these analyses, the complexity of the entire signal addition operation is .  ">
  </outline>
  <outline text="Signal inversion" _note="Inverting a signal is common in signal processing algorithms. A meaningful usage of inversion is to transform the signal subtraction to signal addition by means of inverted inputs (audio cancellation is realized as so). In audio signal processing, signal inversion is realized by inverting all amplitude values of an audio signal. When amplitude values are represented by bipolar values, the operation is essentially an alteration of positive and negative signs. In this subsection, the FRQA-based signal inversion operation is formalised.  Assuming that is an FRQA audio in the form presented in Eq. ( ), the signal inversion operation applied on will produce the output of in the form shown in Eq. ( ): where  As in two’s complement arithmetic, an effective way to negate a number is inverting all the qubits and adding “1”. This procedure in quantum audio processing is further explained using the following steps:  **Step 1:** Invert all the qubits in by performing operation : where  **Step 2:** Add “1” to the inverted result and neglect the overflow by applying operation : where  It should be noted that similar to what is obtained in (classical) digital audio signal processing, a slight skewing of the data range is unavoidable as we cannot find the inverted counterpart of in the sampled amplitude values . To overcome this, we restrict our discussion within the amplitude value range from to . The quantum circuit for inverting an FRQA audio signal is shown in Fig.  , wherein, the operation in Step 1 can be directly implemented by using NOT gates and in the operation in Step 2, Toffoli gates and CNOT gates are required, thus the complexity of this operation is .  A simple example to illustrate how a quantum audio signal is inverted would suffice. The circuit network required to execute this procedure is presented in Fig.  , where the FRQA audio in Fig.   is used as the input audio signal.  ">
  </outline>
  <outline text="Signal delay" _note="Signal delay is the operation that records an input signal and then plays it back after a period of time. This operation is a common audio effect that is often used to create the sound of a repeating and decaying echo. In this subsection, the FRQA-based signal delay operation is formalised.  Assuming is the original audio signal, then audio signal is regarded as a delayed version of audio if:  where denotes the time information of amplitude values, is a fixed interval which specifies the desired delay of the system. Using the foregoing, the signal delay operation can be described using Eqs. ( )-( ):  Both the time information and of the original and delayed audio signal need to be in the range , where apparently is beyond the interval. Therefore, we separate the time information into two parts, i.e. and , for discussion.  As shown in Eq. ( ), when , , in which case, the time information can be obtained directly by means of the ADDER module on time content. However, when , we need to employ the carry qubit of the ADDER module to achieve the interval shift and set the amplitudes as the delay period.  The general circuit for the quantum audio signal delay operation is presented in Fig.  . In addition, Fig.   presents a simple example of the FRQA-based signal delay, where (a) is the input audio signal ( and ) and (b) is the signal that is delayed by 2 time units. The quantum circuit for this operation can be constructed as in Fig.  .  The implementation of signal delay consists of one ADDER module (on time content) and Toffoli gates, so the complexity of this operation is .  ">
  </outline>
  <outline text="Signal reversal" _note="Signal reversal is the process of reversing a selected audio signal such that the end of the signal is heard first and the beginning last. This operation can be used to create interesting sound effects or make small portions of inappropriate language unintelligible. Based on the FRQA state, we can define the signal reversal operation on quantum computers and construct the quantum circuit to accomplish it.  Assuming that is an FRQA audio signal in the form presented in Eq. ( ), the signal reversal operation applied on produces an output of the form:  where  Hence, the signal reversal operation can be defined as below:  The general circuit to execute the signal reversal operation is presented in Fig.  (a). Although it is glaring that this operation can be directly implemented by using NOT gates, in order to further enunciate its realization, we use the quantum audio signal in Fig.  (a) as input signal whose output is presented in Fig.  (b). As seen, the result shows that all the time points are played in a reversed order.  In addition, some control condition constraints on the time content will allow us to confine the execution of the reversal operation to a desired period. For example, in Fig.  (a), the time wire is employed as the control wire to confine the reversal operation to the last half of the audio signal. As seen from the result in Fig.  (b) that only the last 4 time points in Fig.  (a) are reversed and the others are retained as in the input signal.  It should be mentioned that the complexity of the extended operation increases with the number of control qubits. In the worst case, the implementation of this operation requires an -controlled NOT gate, thereby the complexity is .  ">
  </outline>
</outline>
<outline text="Conclusions" _note="The characteristics of the physical support used to embody information decide the power of a certain computational paradigm. Quantum computation has emerged as a powerful tool for efficient and secure information processing. As with any effort to process any type of information, the requirements for its encoding must be formalised. The study presented in this work explored the use of quantum mechanical properties that are at the core of quantum computers in order to encode, store, and manipulate audio signals. Inspired by the rudiments employed to capture digital audio signals, the first known effort to represent quantum audio signals (the QRDA) was broached. While QRDA extended audio processing into the quantum computing domain, its numerical representation of amplitude values only offers an encoding method for unipolar (i.e. non-negative) numbers so that its operations are susceptible to errors. The FRQA proposed in this study offers an accurate computation and extensive signal operations alternative to the QRDA. The FRQA protocol encodes amplitude values in two’s complement notation so that the arithmetic advantages of doing so can be utilized to facilitate the construction of quantum circuits for amplitude transformations. By exploiting this, various operations that allow for designing advanced audio processing applications can be proposed.  Based on this new FRQA representation, basic manipulations targeting the amplitude and time components of the audio signals such as the quantum audio signal addition, inversion, reversal, and delay were formalised and insightful examples depicting their utility were also presented and discussed. The quantum circuits required to execute these basic operations on quantum audio signals were also presented and the computational requirements for their realization were analyzed.  In future work, the results from this study can be extended towards the following directions. First, considering the importance of basic operations in quantum audio processing, the operations presented in the study need to improved and new ones added to ensure the execution of more advanced algorithmic tasks. Secondly, the possibility of using quantum-based signal processing operations, such as quantum Fourier transformations and wavelet transformations which have proven well-studied in other quantum information processing applications to facilitate quantum audio manipulation needs to explored. Thirdly, the “silent” quantum movies proposed in provided impetus for the need of sound or audio on the quantum computing paradigm. A useful integration of movie strip (technically a collection of quantum images) with audio signal information will complete the quantum movie representation and facilitate more interesting applications. Finally, when the basic quantum audio signal operations are perfected, they could serve as the building block for the realization of more sophisticated algorithms used for particular applications such as watermarking, steganography, and encryption. These improvements will facilitate multimedia security during quantum information transmission.">
</outline>
<outline text="Acknowledgments" _note="This work is supported by the National Natural Science Foundation of China (No. 61502053). Additionally, AMI acknowledges funding from the Prince Sattam Bin Abdulaziz University via the Deanship for Scientific Research Project Number 2016/01/6641.">
</outline>
<outline text="Acknowledgment" _note="[99]{} Feynman R. Simulating physics with computers. International Journal of Theoretical Physics, 1982, 21: 467-488 Deutsch D. Quantum theory, the church-turing principle and the universal quantum computer. In: Proceedings of the Royal Society of London A, 1985, 97-117 Shor P. Algorithms for quantum computation: discrete logarithms and factoring. In: Proceedings of the 35th Annual Symposium on Foundations of Computer Science, 1994, 124-134 Grover L. A fast quantum mechanical algorithm for database search. In: Proceedings of the 28th Annual ACM Symposium on Theory of Computing, 1996, 212-219 Vlasov A. Quantum computations and images recognition. arXiv:quant-ph/9703010, 1997 Lugiato L, Gatti A, Brambilla E. Quantum imaging. Journal of Optics B: Quantum and Semiclassical Optics, 2002, 4: 176-183 Yan F, Iliyasu A, Venegas-Andraca S. A survey of quantum image representations. Quantum Information Processing, 2016, 15: 1-35 Zölzer U. Digital audio signal processing. John Wiley &amp; Sons Ltd, United Kingdom, 2008 Wang J. QRDA: quantum representation of digital audio. International Journal of Theoretical Physics, 2016, 55: 1622-1641 Barenco A, Bennett C, Cleve R, et al. Elementary gates for quantum computation. Physical Review A, 1995, 52: 3457-3467 Venegas-Andraca S, Bose S. Storing, processing, and retrieving an image using quantum mechanics. In: Proceedings of SPIE Conference of Quantum Information and Computation, 2003, 134-147 Le P, Dong F, Hirota K. A flexible representation of quantum images for polynomial preparation, image compression, and processing operations. Quantum Information Processing, 2011, 10: 63-84 Vlatko V, Adriano B, Artur E. Quantum networks for elementary arithmetic operations. Physical Review A, 1996, 54: 147-153 Nielsen M, Chuang I. Quantum computation and quantum information. Cambridge University Press, United Kingdom, 2000 Wang J, Jiang N, Wang L. Quantum image translation. Quantum Information Processing, 2015, 14: 1589-1604 Jiang N, Wu W, Wang L. The quantum realization of arnold and fibonacci image scrambling. Quantum Information Processing, 2014, 13: 1223-1236 Fijany A, Williams C. Quantum wavelet transforms fast algorithms and complete circuits. Lecture Notes in Computer Science, 1999, 1509: 10-33 Iliyasu A, Le P, Dong F, et al. A framework for representing and producing movies on quantum computers. International Journal of Quantum Information, 2011, 9: 1459-1497">
</outline>
  </body>
</opml>