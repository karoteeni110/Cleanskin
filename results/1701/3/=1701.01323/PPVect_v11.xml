<?xml version="1.0" encoding="UTF-8"?>
<opml version="2.0">
  <head>
    <title>Confluence laws and Hopf-Borel type theorem for operads</title>
    <abstract>In 2008, Loday shed light on the existence of Hopf-Borel theorems for
operads. Using the vocabulary of category theory, Livernet,
Mesablishvili and Wisbauer extended such theorems to monads. In both
cases, the reasoning was to start from a mixed distributive law and then
to prove that it induces an isomorphism of species to finally get a
rigidity theorem. Our reasoning goes here backward: we prove that from
an isomorphism of species one can get what we called a confluence law,
which generalises mixed distributive laws, and that it is enough to
obtain a rigidity theorem. This enables us to show that for any operads
and having the same underlying -module, there exists a confluence law
such that any conilpotent co-bialgebra satisfying is free and cofree
over its primitive elements. Our reasoning permits us to generate many
new examples, while recovering the known ones by considering dual
relations. </abstract>
  </head>
  <body>
<outline text="Introduction" _note="Distributive laws first appeared in 1969 in Beck’s article . It takes its name from the distributivity of addition over multiplication studied in primary school. Distributive laws give a confluent way to rewrite expressions mixing different products. An example of distributive laws is the one mixing the commutative product and the Lie bracket in a Poisson algebra. This notion has then been studied by Burroni in for algebras and by Markl in generalising this definition to operads and linking it to the topological notion of Koszulness. Fox and Markl have adapted in the notion of distributive laws to expressions mixing operations and cooperations: they called the obtained rewriting rules MIXED DISTRIBUTIVE LAWS.  Let us call a -bialgebra a vector space endowed with an algebra structure encoded by an operad , a coalgebra structure encoded by a cooperad with both linked through a mixed distributive law . Such a bialgebra satisfies, under some assumptions, a Hopf-Borel type theorem: any conilpotent -bialgebra is free and cofree over its primitive elements. Such a theorem is called a RIGIDITY THEOREM. Particular cases of rigidity theorems were proven for instance in for commutative cocommutative Hopf bialgebras, in for associative coassociative bialgebras, in for Zinbiel coassociative bialgebras, in for dendriform codendriform algebras and in for PreLie coNAP bialgebras. The general framework for this theorem was introduced by Loday in . Rigidity theorems were then further studied, for instance in and applications can be found for example in to compute explicit bases of algebras. While studying the general framework and its rewriting for particular symmetric operads, it became clear to the authors that the three hypotheses of this theorem had to be clarified and some further clarifications were needed in the proof.  In this article we prove that one only of the hypotheses formulated by Loday in is needed to get a rigidity theorem. This viewpoint enables us to provide an answer to a conjecture of Loday: for a given operad which encoded the structure of algebra and of coalgebra of a bialgebras there exists a generalisation of mixed distributive laws, called CONFLUENCE LAWS between the structures such that a rigidity theorem holds. We also develop the case of explicit isomorphism os species between and . In such a framework, we are able to make explicit an inductive algorithm to compute the idempotent and the confluence law. This framework also includes the particular case where the coproducts are given as the dual of the products, in which case, we can recover most of the known cases. Moreover it provides a suitable environment for the development of rewriting and Groebner bases theories for -algebras. Indeed the confluence laws allow to decide whether a polynomial is a divisor of another one.  This article is organised as follows. The first part focuses on the general theory and then particularises to the framework where bases for operads are known. The second part develops the dual case and is illustrated through examples.  More precisely, in the first section, we recall Loday’s theorem with its three hypotheses (H0), (H1), (H2iso): for any bialgebra satisfying mixed distributive laws (H0), one can compute a morphism , functorial in (H1). If this morphism is bijective (H2iso) then a rigidity theorem holds. We point out here that the core property is that the morphism induces a family of -modules isomorphisms . This property alone gives the confluence law which are enough to obtain a rigidity theorem and can be computed explicitly when orthogonal bases are known (see Subsection  ).  Then in the second part, the dual case is explored. The above isomorphisms can be obtained by duality with respect to a fixed basis. We explain this construction and give a simple condition for it to satisfy the hypotheses of rigidity theorem: its compatibility to the -module structure. We then list the examples in literature which can be obtained in that way before illustrating the strength of this case with a bunch of brand new examples: PreLie coPreLie, Perm coPerm, NAP coNAP, PAN coPAN, PAN coPerm, Leibniz coAssociative, Poisson coAssociative, Leibniz coZinbiel, 2as co2as or even Dipt coDipt bialgebras.">
</outline>
<outline text="General Case" _note="We prove in this section that only one of the hypotheses for Loday’s rigidity theorem on generalised bialgebras is needed to get such a theorem. Indeed, the hypothesis (H2iso) implies the hypothesis (H1) and a weaken version of (H0), which are enough to get a rigidity theorem. This new improvement in the needed hypotheses enables us to prove a conjecture of Loday and to reach many new cases.  We first recall Loday’s formulation of rigidity theorem before studying the intertwining between hypotheses of the theorem. We then study the case when bases are orthogonal, so that we can compute explicitly confluence laws and idempotent, which was one problem raised in . We finally give a new formulation of rigidity theorem.">
  <outline text="Loday’s rigidity theorem." _note="We recall from that a SPECIES is a functor from the category of finite sets and bijections to the category of vector spaces. It is possible to define a composition on species (see ) and an OPERAD is then given by the data of a species and a map . The reader can consult for further explanations.  Let be a field of characteristic . Let be two algebraic operads. In this article, we will only consider CONNECTED operads, i.e. such that and and such that and are finite dimensional.  Let us first recall the definition of an algebra, a cooperad and a coalgebra over an operad.   An ALGEBRA over an operad is a vector space equipped with a -equivariant morphism . We denote the free algebra over an operad whose vector space of generators is by .  A COOPERAD is the data of a family of -modules for every integer and of two morphisms of -modules and (counit) satisfying some coassociativity and counitality axioms. When is an operad, is a cooperad, called the DUAL COOPERAD of .   A COALGEBRA over an operad is a vector space equipped with a -equivariant morphism . This definition is equivalent to the definition of a coalgebra over the cooperad , which is the data of a map . We denote the free coalgebra over an operad whose vector space of primitives is by .    We put the emphasis on the notation of the maps which will be used later on: an algebra over the operad is a vector space endowed with a map and a coalgebra over the cooperad is a vector space endowed with a map .  Following , we define the notion of mixed distributive laws:    A COMPATIBILITY RELATION is defined as a sequence of maps where the summation is taken over all the and . A compatibility relation is a MIXED DISTRIBUTIVE LAW if  it is compatible with the action of the symmetric group : where , and is denoted by ,  it is compatible with the operad structures of and .  The algebra is then endowed with a structure of -coalgebra and the coalgebra is then endowed with a structure of -algebra.  We call -bialgebra any bialgebra which is a -algebra, a -coalgebra and such that products and coproducts satisfy the mixed distributive laws . We need moreover the following notion:  The cofiltration can be defined on any -coalgebra : . The vector space is the vector space of PRIMITIVE ELEMENTS. We moreover denote by the canonical inclusion.  A -coalgebra is said to be CONILPOTENT if .  When there will be no ambiguity, we will only write .  The rigidity theorem as stated by Loday is:  Let be a bialgebra type which satisfies  (H0)  :   the compatibility relations are distributive,  (H1)  :   the free -algebra is naturally a -bialgebra,  (H2iso)  :   the -coalgebra map is an isomorphism.  Then any conilpotent -bialgebra is free and cofree over its primitive elements">
  </outline>
  <outline text="Confluence laws." _note="The reasoning in Loday’s theorem is to first consider a mixed distributive law thanks to which one can compute a map sending to . To use this theorem, one then has to prove that the induced morphism is an isomorphism.  We adopt here another reasoning: we start from the data of such an isomorphism and prove that we get back the hypotheses of the theorem, more precisely, we prove the existence of an associated confluence law. Our reasoning is splitted on the next five subsections: in this subsection, we introduce the notion of confluence laws. We then explain why the hypothesis on cannot be reduced in the subsection  . From an isomorphism we get a homogeneous confluence law in the subsection  , before reaching confluence laws in the subsection   and stating the equivalence between conditions of the rigidity theorem. We finally state our main result in the subsection  .  We introduce in this subsection a generalisation of mixed distributive laws, that we call CONFLUENCE LAWS:    A CONFLUENCE LAW between operads and is a family of maps such that is compatible with the structure of operad of and with the action of the symmetric group .  It is clear that mixed distributive laws as defined in Definition   gives a confluence law, by looking at the restrition of mixed distributive laws to primitive elements.  An example of such a confluence law is presented in Equation .  Confluence laws are equivalent to the data of a -module morphism as presented in . We thank again M. Livernet for helping us clearing this link and clarifying the definition of -bialgebras.  Let us now define -bialgebras.    Refering to notations of Notation  , a -bialgebra is a -vector space endowed with a structure of -algebra, a structure of -coalgebra, such that the following diagram commutes:  \(m)   [ [ ]{}(\_1 H) &amp; [ ]{}(H) &amp; H &amp; [ ]{}\^\*(H)\ [ ]{}(H) &amp; &amp; &amp; [ ]{}\^\*[ ]{}(H)\ ]{}; (m-2-1) edge node   []{} (m-2-4) (m-1-1) edge node   []{} (m-1-2) (m-1-1) edge node   []{} (m-2-1) (m-1-2) edge node   []{} (m-1-3) (m-1-3) edge node   []{} (m-1-4) (m-2-4) edge node   []{} (m-1-4);  Now we have defined the objets on which we will be working, let us look at them more closely.">
  </outline>
  <outline text="Injectivity on ." _note="In , a condition on for the existence of a rigidity theorem is that the morphism is an isomorphism for every vector space . We first give an example of the necessity of the injectivity of before studying the link between filtration and cofiltration in the associated bialgebras. This link is crucial because, as we will see later, the idempotent is nothing but the projection on primitive elements parallel to decomposable elements.  The following example will show that the lack of injectivity of induces a counter-example in the rigidity theorem.    Consider the coassociative associative bialgebras where the mixed distributive law is the Hopf mixed distributive law. We compute from the mixed distributive law: it is given by . It is to be noted that the constructed is not a monomorphism (therefore not an isomorphism and nor a epimorphism), failing to verify all the hypotheses for the existence of a rigidity theorem.  Let us consider Solomon-Tits algebra, see for example , the space of surjections endowed with the shuffle product and the block coproduct:  For , we write and . Let , , where the sum is over all the stuffles . Given a map there exists a unique surjective map in such that if, and only if, , for . The map is called the [STANDARDISATION]{} of (see for instance ). Let , we define the co-restriction of to by , for . We define by: and we extend it by linearity to all (see for instance ).  The mixed distributive law between the product and the coproduct is the Hopf mixed distributive law, which can be checked by direct inspection.   is conilpotent as for any element in , where and .  By a direct computation, one can prove that the element cannot be constructed as a linear combination of products of primitive elements. And is therefore not generated by its primitives though it does verify the conilpotent and the existence of the mixed distributive law hypotheses.">
  </outline>
  <outline text="Homogeneous confluence laws." _note="We first decribe the link between filtration and cofiltration in the free bialgebra. We then use this link to define homogeneous confluence laws, which are the step between the isomorphism and the associated confluence law .  The data of a family of isomorphisms functorial in and sending natural graduation by product to natural cograduation by coproduct, is equivalent to the data of a family of isomorphisms of -modules .  As is a field of characteristic , we can identify coinvariants and invariants and the notion of free (conilpotent) coalgebra over the operad is given by the Schur functor defined by .  The data of a family of isomorphisms of -modules defines a natural transformation between the Schur functor associated to the operad , and the Schur functor associated to the cooperad , described above. This natural transformation is directly equivalent to a family of isomorphisms functorial in sending graduation to cograduation .  Let us now suppose the existence of a family of isomorphisms functorial in , sending graduation by product to cograduation by coproduct. Then, , for any integer . Hence defines a family of isomorphisms of -modules .  We will denote by the morphism of -modules induced by the family of .  For the trivial representation, the only isomorphisms are homotheties, but it is not always the case (it depends on the chosen decomposition in irreducible representations of the -module, which is unique only up to isomorphisms).  We call HOMOGENEOUS CONFLUENCE LAW the set of all rewritings of compositions of a cooperation of arity , , with an operation of arity , , applied to primitive elements in terms of the primitive elements . We denote this set by . Then we have:  In other words, homogeneous confluence laws are to confluence laws what filtered distributive laws are to distributive laws (see ).  A homogeneous confluence law is then strictly equivalent to endowing the free -algebra over a vector space with a structure of -coalgebra sending the graduation of the algebra to the cograduation of the coalgebra. Indeed, the following result follows:    The data of is equivalent to the data of a homogeneous confluence law.  Given a homogeneous confluence law, we can consider the map from to itself where at the source is viewed as an algebra and at the target is seen as a coalgebra. It produces a family of morphism , sending filtration by product to cofiltration by coproduct, and as result a morphism defined by  Denoting by the duality pairing between and its dual space , and the action of an element of the symmetric group on an element of , we define the homogeneous confluence law from the morphism by: where , and .  Notice that we have:  The two constructions are inverse of each other.">
  </outline>
  <outline text="Equivalence between conditions." _note="Now, we will use homogeneous confluence laws and the previous subsection to prove the equivalence between hypothesises of the rigidity theorem, as stated by Loday.    Let and be two algebraic operads. The existence of a confluence law implies the existence of a family of -module morphism , for any positive integer . Moreover, the bijectivity of all enables us to define the associated confluence law.  If such bijections exist, then and have the same underlying -module (and share the same species).  An homogeneous confluence law can be directly computed from a confluence law by forgetting some information.  We define from the associated confluence law .  We use the following notation and .  The confluence law is defined as the following composite, using notations of Definition  :  As the operations are functorial in , we get a family of maps . Moreover, is a morphism of -modules, hence maps are compatible with the action of the symmetric group .  We finally have to show the compatibility with the operad structure of . This comes from the following commuting diagram, holding for any vector space :  \(m)   [ ([ ]{}(k\_1)…[ ]{}(k\_l)) [ ]{}(l) [ ]{}(n) V\^[n]{} &amp;[ ]{}(k) [ ]{}(n) V\^[n]{}\ \_[\_[j=1]{}\^l q\_j=n]{} \_[j=1]{}\^l ( [ ]{}(k\_j)[ ]{}(q\_j) V\^[q\_j]{}) &amp; \_[\_[i=1]{}\^k r\_i = n]{} \_[i=1]{}\^k ([ ]{}(r\_i)V\^[r\_i]{} ),\ ]{}; (m-2-1) edge node   []{} (m-2-2) (m-1-1) edge node   []{} (m-1-2) (m-1-1) edge node   []{} (m-2-1) (m-1-2) edge node   []{} (m-2-2);  where .  This diagram is obtained by using the definition of as the composition given above. Using this definition, the commutativity of the diagram relies on two facts: most of the operations do not occur on the same part of the tensorial product and the definition of the coproduct gives itself the commutativity of one part of the diagram thanks to the following diagram, holding on any of the previous :  \(m)   [ ([ ]{}(k\_1)…[ ]{}(k\_l)) [ ]{}(l) H\_n &amp;[ ]{}(k) H\_n\ \_[\_[j=1]{}\^l q\_j=n]{} \_[j=1]{}\^l ( [ ]{}(k\_j)H\_[q\_j]{} ) &amp; \_[\_[i=1]{}\^k r\_i = n]{} \_[i=1]{}\^k H\_[r\_i]{},\ ]{}; (m-2-1) edge node   []{} (m-2-2) (m-1-1) edge node   []{} (m-1-2) (m-1-1) edge node   []{} (m-2-1) (m-1-2) edge node   []{} (m-2-2);  where .  If the confluence law is given by an isomorphism , we will write equivalently the associated bialgebras -bialgebras or -bialgebras.  There can be different confluence laws associated to the same couple of operads: see for instance the mixed distributive laws for the Dendriform coDendriform bialgebra computed by Foissy in and the one referred in .  PROJECTION  The last step before reaching the rigidity theorem is to prove the existence of a “good” projection of the coalgebra on the primitive elements, named IDEMPOTENT.  Let us now consider a (not necessarily free or cofree) conilpotent -bialgebra . We denote by the cofiltration on and the -module morphism associated to the confluence law.  We first show the following lemmas:    The bialgebra is generated, as an algebra, by its primitive elements.  We proove the lemma by reductio ad absurdum. Let us consider the minimal integer such that there exists an element in , which is not in the subalgebra generated by primitive elements of . We will construct a in the subalgebra generated by primitive elements of such that belongs to , and then is in the subalgebra generated by primitive elements.  For any (linear) basis of , there exists a basis of such that . We denote by the real number , denoting by the action of an element of the symmetric group on an element of the considered -module. The bialgebra satisfies a confluence law and then also a homogeneous confluence law. Hence, we have for any primitive elements , according to Equation : As belongs to , for any between and the coproduct of the element can be written as:  Without loss of generality, we can consider the case:  for a given tuple of primitive elements , as can be decomposed as a sum of such elements.  Let us now consider an element . Let us determine the appropriate . Then, we have, using Equation : Then, using Equations and , for all , is equivalent to:  Moreover, for any , , which gives on , for any :  Thanks to Equations and , choosing for any and gives in the subalgebra of generated by primitive elements such that is in , hence is also in the subalgebra of generated by primitive elements by minimality of and so is .    The vector space admits a supplementary space in , which is .  First, we have by definition .  Let us now show that , for all . Let us consider an element in . As is injective, there is an element such that , thus .  Then, we have , for all . Thus, . This comes from Equation .  Let us prove that . As an algebra, . By Lemma  , we have that . Let us consider an element . Then we can write (not necessarily uniquely) as: where and .  From Equation , we have . From the bijectivity of , (see the second point of this proof). Then, as , we get the decomposition: where and .  For any element , we can then define the projection on parallel to the , .  The map is linear and satisfies and . We will call this map the IDEMPOTENT associated to -bialgebras (see Corollary  ).">
  </outline>
  <outline text="Rigidity theorem." _note="We now give a new formulation of rigidity theorem which takes into account the previous subsections and confluence laws.    Let be a field of characteristic and let us consider two connected algebraic operads and , such that and are finite dimensional vector spaces. To any family of -modules isomorphisms can be associated a confluence law such that any conilpotent -bialgebras is free and cofree over the vector space of its primitive elements Moreover, if any free and cofree -bialgebra is also a -bialgebra, with a confluence law or a mixed distributive laws, then any conilpotent -bialgebras is free and cofree over its primitive elements. In other words, the result does not depend on the choice of a confluence law.  Then, on any -bialgebra the idempotent is exactly the projection on parallel to the (see  ), hence the following result:    The idempotent is unique.  The idempotent described above is the same as the one introduced in . It is the generalisation of the Eulerian idempotent used in , whose origin lays in , obtained in the case .  We follow here the sketch of the proof of Loday in and Patras in , using the confluence laws and the idempotent introduced previously.  We want now to prove that there is an isomorphism between and , where the latter is the free and cofree bialgebra over . We call and respectively the canonical injection from to and surjection from to . Let us define the unique lifting of by the universal property of the -conilpotent cofreeness. Consider the natural injection and its lifting by the universal property of freeness. We represent below these morphisms:  \(m)   [ [ ]{}([ ]{}) &amp;\ [ ]{}&amp; [ ]{}\ [ ]{}\^c([ ]{})&amp;\ \ ]{}; (m-1-1) edge node   []{} (m-2-1) (m-2-2.north) edge node   []{} (m-1-1.south east) (m-3-1.north east) edge node   []{} (m-2-2.south) (m-2-1.south east)edge node   []{} (m-2-2.south west) (m-2-2.north west) edge node   []{} (m-2-1.north east) (m-2-1) edge node   []{} (m-3-1) (m-1-1.south west) edge  node   []{} (m-3-1.north west);  First, is a bialgebra morphism: it is an algebra morphism by the universal property and we show using the filtration of provided by the conilpotency of that it is also a coalgebra morphism. Indeed, by construction, is sent bijectively to . Let us now consider . By freeness, there exists in and such that . Hence, we have for any cooperation : The confluence law can then be denoted, by distributivity, by: for any primitive elements , where has arity , and is in , the set of permutations of such that for any .  Note that the reasoning does not depend on the choice of such a confluence law.  We have: This proves that is a bialgebra isomorphism.  This implies that is a coalgebra morphism, which is the identity on primitive elements. Hence, we have by cofreeness the equality , which implies that is injective and surjective. Finally, is also injective: otherwise, there would be a minimal integer () such that there exists such that . By definition of , there exists a cooperation such that . Using the fact that is a coalgebra morphism, we obtain and which contradicts the minimality of .  Finally, the map is a vector space isomorphism which preserves the graduation and the result follows using the isomorphim between and .  An immediate result of this theorem is the following corollary:  Given two algebraic operads and and a confluence law induced by an isomorphism , an -algebra is free if and only if it is possible to define a -coproduct on satisfying the confluence law .  :   This is a consequence of the existence of a confluence law. If is     free, then there exists a vector space such that and then is     naturally equipped with a structure of -bialgebras thanks to the     mixed distributive law .  :   This is a consequence of the rigidity theorem.  This provides an efficient tool to solve the problem of freeness of algebras encoded by an operad (see ) and to give generators and divisibility in free algebras.  Moreover, another application of the theorem is the following answer to a conjecture of Loday in :  For any connected algebraic operads and sharing the same underlying finite dimensional -modules , there exists a family of -modules isomorphisms , and thus there exists a confluence law associated to such that any conilpotent -bialgebra is free and cofree over its primitives.  Any character of a representation of the symmetric group is integer-valued, hence for any representation of the symmetric group, it is possible to construct a -module isomorphism between and its dual . Let us choose : we obtain a family of -modules isomorphisms between and satisfying the hypothesis of Theorem  . Applying this theorem gives the result.  The following corollary is then immediate:  If and are two operads sharing the same underlying -module, then any free -algebra is a free -algebra.  Note that it is not the case for non free algebras.">
  </outline>
  <outline text="Orthogonal bases." _note="In this subsection, we provide an explicit inductive description of confluence laws and idempotent in favourable cases.  For every , we consider, if they exist, two generating sets and of the -module and respectively, such that for all and . Let us remark that to obtain such generating sets, we should take at most one element in every orbit of on . Such a generating set can be found for instance if the only relations in the -module are of the form for in and .  Then, considering such a basis, Equation gives: with .  Let us remark that we have by definition of , with the equality when is injective, which will be supposed in what follows.  The confluence law is then given for any cooperation and operation by induction on the cofiltration , with by: where is the tensorial product of operations obtained when evaluating on primitive elements (see  ) and is the tensorial product of operations obtained when evaluating on primitive elements.  The maps give the mixed distributive law on elements in , where .  The idempotent is given as the inductive limit of the maps defined on the cofiltration by on and on by:  Note that by decomposition of Lemma  , on for all , hence is the identity on . We prove in what follows that the map obtained is an idempotent:    The constructed map satisfies: on any conilpotent bialgebra .  We prove by induction on that:  As on primitive elements, we have for any primitive element . Let us suppose the property true for any . If for , by induction hypothesis.  If , we have However, for any , we have: Hence is in for and .  This provides an explicit inductive description of the idempotent and the confluence law. In the next section, we apply these constructions.">
  </outline>
</outline>
<outline text="Dual case" _note="There is no canonical vector space isomorphism between a vector space and its dual. Moreover, as the morphism must also be a -module morphism, not all isomorphisms between and will give rise to a rigidity theorem. We provide in this section a criterion on a given basis to get such a family of -module isomorphisms and then apply it to several cases.">
  <outline text="General results." _note="We consider two connected algebraic operads and . To satisfy a rigidity theorem, these operads must have the same underlying -modules. Let us now consider a basis of the vector space , we consider the morphism given by the duality with respect to . We denote by the union .  Let us now consider a free -algebra . The basis induces a basis of . Given an element of and an operation , the coproduct given by duality on is then defined as: where is the Kronecker symbol.  Note that thanks to Equation , both definitions coincide.  In operadic terms, this definition can be rewritten, for any operation , cooperation and elements : where denotes the coefficient of in .  For the to be -module morphisms, the basis has to satisfy some conditions:  The basis is said to be a COMPATIBLE BASIS if products and dual coproducts expressed in this basis commute with the action of the symmetric group. In other words, for any cooperation , any operation and any , we have:  Thanks to the shape of homogeneous confluence laws (Equation ), we obtain directly:  If the considered basis is a compatible basis, then the family is a family of -module isomorphisms and the rigidity theorem applies: any conilpotent -bialgebra is free and cofree over the vector space of its primitives.  An example of bases of operads which are not compatible is given by the Lyndon basis and the comb basis of the operad Lie (see for computation on the comb basis).  If we consider non symmetric operads, any basis is compatible and then we obtain the following result which gives an explicit family of -modules isomorphisms :  For any non symmetric operads and , any basis of and of there exists a confluence law whose associated isomorphisms are given by sending on the dual basis of such that the rigidity theorem applies.    Using the duality on usual bases of known operads, we find back the following cases. We represent a product by  (-1,1)–(0,0)–(1,1); (0,0)–(0,-1); (0,0) circle(0.5); (0,0) node[]{};  and a coproduct by  (-1,-1)–(0,0)–(1,-1); (0,0)–(0,1); (0,0) circle(0.5); (0,0) node[]{};  , omitting to precise the product or the coproduct if there is no ambiguity.   Comm, Comm with the Hopf mixed distributive law:  (0,0)–(0,1)–(1,1.5)–(1,2.5)–(0,3)–(0,4); (2,0)–(2,1)–(1,1.5)–(1,2.5)–(2,3)–(2,4); (3,2) node[]{}; (4,0)–(4,4); (6,0)–(6,4); (7,2) node[]{};  (4,0)–(4,1.5)–(6,2.5)–(6,4); (4,4)–(4,2.5)–(6,1.5)–(6,0); (7,2) node[]{};  (8,4)–(8,1.5)–(8.75,1)–(8.75,0); (8.75,1)–(9.5,1.5)–(9.5,2.5)–(10.25,3)–(10.25,4); (10.25,3)–(11,2.5)–(11,0); (11.75,2) node[]{};  (21.5,0)–(21.5,1.25)–(22.5,2)–(21.5,2.75)–(21.5,4); (21.5,1.25)..controls (20.5,2) and (20,2.5) .. (20,3)–(20,4); (21.5,2.75)..controls (20.5,2) and (20,1.5).. (20,1)–(20,0); (23.5,2) node[]{};  (3,4)–(3,1.5)–(2.25,1)–(2.25,0); (2.25,1)–(1.5,1.5)–(1.5,2.5)–(0.75,3)–(0.75,4); (0.75,3)–(0,2.5)–(0,0); (4,2) node[]{};  (17,0)–(17,1.25)–(16,2)–(17,2.75)–(17,4); (17,1.25)..controls (18,2) and (18.5,2.5) .. (18.5,3)–(18.5,4); (17,2.75)..controls (18,2) and (18.5,1.5).. (18.5,1)–(18.5,0); (19.5,2) node[]{};  (1,0)–(1,1.25)–(0,2)–(1,2.75)–(1,4); (1,2.75)–(3,1.25)–(3,0); (1,1.25)–(3,2.75)–(3,4); (3,1.25)–(4,2)–(3,2.75);   As, As with the n.u.i. mixed distributive law:  (0,0)–(0,1)–(1,1.5)–(1,2.5)–(0,3)–(0,4); (2,0)–(2,1)–(1,1.5)–(1,2.5)–(2,3)–(2,4); (3,2) node[]{};  (4,0)–(4,4); (6,0)–(6,4); (7,2) node[]{};  (8,4)–(8,1.5)–(8.75,1)–(8.75,0); (8.75,1)–(9.5,1.5)–(9.5,2.5)–(10.25,3)–(10.25,4); (10.25,3)–(11,2.5)–(11,0); (11.75,2) node[]{};  (3,4)–(3,1.5)–(2.25,1)–(2.25,0); (2.25,1)–(1.5,1.5)–(1.5,2.5)–(0.75,3)–(0.75,4); (0.75,3)–(0,2.5)–(0,0);   As, Zinb with the semi-Hopf mixed distributive law, denoted by the generating operation of Zinbiel:  (0,0)–(0,1)–(1,1.5)–(1,2.5)–(0,3)–(0,4); (2,0)–(2,1)–(1,1.5)–(1,2.5)–(2,3)–(2,4); (3,2) node[]{}; (4,0)–(4,4); (6,0)–(6,4); (7,2) node[]{};  (8,4)–(8,1.5)–(8.75,1)–(8.75,0); (8.75,1)–(9.5,1.5)–(9.5,2.5)–(10.25,3)–(10.25,4); (10.25,3)–(11,2.5)–(11,0); (11.75,2) node[]{};  (17,0)–(17,1.25)–(16,2)–(17,2.75)–(17,4); (17,1.25)..controls (18,2) and (18.5,2.5) .. (18.5,3)–(18.5,4); (17,2.75)..controls (18,2) and (18.5,1.5).. (18.5,1)–(18.5,0); (19.5,2) node[]{};  (3,4)–(3,1.5)–(2.25,1)–(2.25,0); (2.25,1)–(1.5,1.5)–(1.5,2.5)–(0.75,3)–(0.75,4); (0.75,3)–(0,2.5)–(0,0); (2.25,1) circle(0.4); (2.25,1) node []{}; (4,2) node[]{};  (1,0)–(1,1.25)–(0,2)–(1,2.75)–(1,4); (1,2.75)–(3,1.25)–(3,0); (1,1.25)–(3,2.75)–(3,4); (3,1.25)–(4,2)–(3,2.75); (3,1.25) circle(0.4); (3,1.25) node []{};  ,  with .  []{} Mag, Mag with the magmatic mixed distributive law:  (0,0)–(0,1)–(1,1.5)–(1,2.5)–(0,3)–(0,4); (2,0)–(2,1)–(1,1.5)–(1,2.5)–(2,3)–(2,4); (3,2) node[]{};  (4,0)–(4,4); (6,0)–(6,4);  []{} Mag, Mag with the infinite magmatic mixed distributive law:  (0,0)–(0,1)–(1,1.5)–(1,2.5)–(0,3)–(0,4); (2,0)–(2,1)–(1,1.5)–(1,2.5)–(2,3)–(2,4); (1,0)–(1,4); (3,2) node[]{};  (4,0)–(4,4); (5,0)–(5,4); (6,0)–(6,4);  (0,0)–(0,1)–(1,1.5)–(1,2.5)–(0,3)–(0,4); (2,0)–(2,1)–(1,1.5)–(1,2.5)–(2,3)–(2,4); (1,1.5)–(1,4); (3,2) node[]{};  (0,0)–(0,1)–(1,1.5)–(1,2.5)–(0,3)–(0,4); (2,0)–(2,1)–(1,1.5)–(1,2.5)–(2,3)–(2,4); (1,0)–(1,2.5); (3,2) node[]{};  []{} NAP, PreLie with the Livernet mixed distributive law:  (0,0)–(0,1)–(1,1.5)–(1,2.5)–(0,3)–(0,4); (2,0)–(2,1)–(1,1.5)–(1,2.5)–(2,3)–(2,4); (3,2) node[]{};  (4,0)–(4,4); (6,0)–(6,4); (7,2) node[]{};  (3,4)–(3,1.5)–(2.25,1)–(2.25,0); (2.25,1)–(1.5,1.5)–(1.5,2.5)–(0.75,3)–(0.75,4); (0.75,3)–(0,2.5)–(0,0); (4,2) node[]{};  (17,0)–(17,1.25)–(16,2)–(17,2.75)–(17,4); (17,1.25)..controls (18,2) and (18.5,2.5) .. (18.5,3)–(18.5,4); (17,2.75)..controls (18,2) and (18.5,1.5).. (18.5,1)–(18.5,0);   Nil, Nil with nil mixed distributive law:  (0,0)–(0,1)–(1,1.5)–(1,2.5)–(0,3)–(0,4); (2,0)–(2,1)–(1,1.5)–(1,2.5)–(2,3)–(2,4); (3,2) node[]{};  (4,0)–(4,4); (6,0)–(6,4); (7,2) node[]{};  (0.75,0)–(0.75,1.5)–(0,2)–(0.75,2.5)–(0.75,4); (0.75,1.5)–(1.5,2)–(0.75,2.5); (2.25,0)–(2.25,4); (3.25,2) node[]{};  (0.75,0)–(0.75,1.5)–(0,2)–(0.75,2.5)–(0.75,4); (0.75,1.5)–(1.5,2)–(0.75,2.5); (-0.75,0)–(-0.75,4); (2.5,2) node[]{};  (0.75,0)–(0.75,1.5)–(0,2)–(0.75,2.5)–(0.75,4); (0.75,1.5)–(1.5,2)–(0.75,2.5); (2.75,0)–(2.75,1.5)–(2,2)–(2.75,2.5)–(2.75,4); (2.75,1.5)–(3.5,2)–(2.75,2.5);   Dup, Dup with the following mixed distributive law:  (0,0)–(0,1)–(1,1.5)–(1,3.5)–(0,4)–(0,5); (2,0)–(2,1)–(1,1.5)–(1,3.5)–(2,4)–(2,5); (1,1.5) circle(0.6); (1,3.5) circle(0.6); (1,1.5) node []{}; (1,3.5) node []{}; (3,2) node[]{}; (4,0)–(4,5); (6,0)–(6,5); (7,2) node[]{};  (8,4.5)–(8,1.5)–(8.75,1)–(8.75,-0.5); (8.75,1)–(9.5,1.5)–(9.5,2.5)–(10.25,3)–(10.25,4.5); (10.25,3)–(11,2.5)–(11,-0.5); (8.75,1) circle(0.6); (10.25,3) circle(0.6); (8.75,1) node []{}; (10.25,3) node []{}; (11.75,2.5) node[]{};  (3,4.5)–(3,1.5)–(2.25,1)–(2.25,-0.5); (2.25,1)–(1.5,1.5)–(1.5,2.5)–(0.75,3)–(0.75,4.5); (0.75,3)–(0,2.5)–(0,-0.5); (2.25,1) circle(0.6); (0.75,3) circle(0.6); (2.25,1) node []{}; (0.75,3) node []{};  (0,0)–(0,1)–(1,1.5)–(1,3.5)–(0,4)–(0,5); (2,0)–(2,1)–(1,1.5)–(1,3.5)–(2,4)–(2,5); (1,1.5) circle(0.6); (1,3.5) circle(0.6); (1,1.5) node []{}; (1,3.5) node []{}; (3,2) node[]{};  (8,4.5)–(8,1.5)–(8.75,1)–(8.75,-0.5); (8.75,1)–(9.5,1.5)–(9.5,2.5)–(10.25,3)–(10.25,4.5); (10.25,3)–(11,2.5)–(11,-0.5); (8.75,1) circle(0.6); (10.25,3) circle(0.6); (8.75,1) node []{}; (10.25,3) node []{};  (0,0)–(0,1)–(1,1.5)–(1,3.5)–(0,4)–(0,5); (2,0)–(2,1)–(1,1.5)–(1,3.5)–(2,4)–(2,5); (1,1.5) circle(0.6); (1,3.5) circle(0.6); (1,1.5) node []{}; (1,3.5) node []{}; (3,2) node[]{};  (3,4.5)–(3,1.5)–(2.25,1)–(2.25,-0.5); (2.25,1)–(1.5,1.5)–(1.5,2.5)–(0.75,3)–(0.75,4.5); (0.75,3)–(0,2.5)–(0,-0.5); (2.25,1) circle(0.6); (0.75,3) circle(0.6); (2.25,1) node []{}; (0.75,3) node []{};  (0,0)–(0,1)–(1,1.5)–(1,3.5)–(0,4)–(0,5); (2,0)–(2,1)–(1,1.5)–(1,3.5)–(2,4)–(2,5); (1,1.5) circle(0.6); (1,3.5) circle(0.6); (1,1.5) node []{}; (1,3.5) node []{}; (3,2) node[]{}; (4,0)–(4,5); (6,0)–(6,5); (7,2) node[]{};  (8,4.5)–(8,1.5)–(8.75,1)–(8.75,-0.5); (8.75,1)–(9.5,1.5)–(9.5,2.5)–(10.25,3)–(10.25,4.5); (10.25,3)–(11,2.5)–(11,-0.5); (8.75,1) circle(0.6); (10.25,3) circle(0.6); (8.75,1) node []{}; (10.25,3) node []{}; (11.75,2.5) node[]{};  (3,4.5)–(3,1.5)–(2.25,1)–(2.25,-0.5); (2.25,1)–(1.5,1.5)–(1.5,2.5)–(0.75,3)–(0.75,4.5); (0.75,3)–(0,2.5)–(0,-0.5); (2.25,1) circle(0.6); (0.75,3) circle(0.6); (2.25,1) node []{}; (0.75,3) node []{};  Note that if -bialgebras satisfy the rigidity theorem with a given confluence law , so does -bialgebras with the confluence law obtained as the dual of , or, graphically, as the horizontal mirror image of .  Some cases are not obtained by duality of the same product, for instance in the dendriform case, the isomorphism given by Foissy’s mixed distributive law () in arity two (between and ) is given by: The matrix of is diagonalisable but admits as an eigenvalue. Indeed, Foissy uses two different dendriform products defined on dendriform algebras and computes the mixed distributive laws between one and the dual of the other.  In the 2-as case computed by Loday et Ronco in , the isomorphism given by Hopf and n.u.i. mixed distributive laws in arity two is diagonalisable but admits and as an eigenvalue. It would be interesting to know if there exists two different 2-as products such that when looking at the mixed distributive laws between one and the dual of the other, one recovers Loday and Ronco’s mixed distributive laws.">
  </outline>
  <outline text="PreLie Case." _note="We consider here the PreLie operad and the rooted tree basis introduced by Chapoton and Livernet in : the free PreLie algebra on a vector space is spanned by rooted (non planar) trees with vertices indexed by . This example was the motivation for the introduction of confluence laws.  We recall that the relation satisfied by a PreLie product is given by:  Combinatorially, the product is the sum over all possible ways to add an edge between a vertex of and the root of . The root of the obtained tree is the root of .  The dual coproduct is then given by the sum over all possible ways to delete an edge in the tree: where is the connected component of containing the root of and is the other connected component.  This coproduct is obtained by taking only connected components in Connes-Kreimer coproduct.  To apply the rigidity theorem to some algebras, we compute the associated confluence law:    The PreLie product and its dual coproduct satisfy the following confluence law, for and , some primitive elements in a given -bialgebra: where and .  (0,0)–(0,1)–(1,1.5)–(1,2.5)–(0,3)–(0,4); (2,0)–(2,1)–(1,1.5)–(1,2.5)–(2,3)–(2,4); (3,2) node[]{}; (4,5) node[]{}; (4,0)–(4,4); (6,0)–(6,4); (7,2) node[]{};  (8,4)–(8,1.5)–(8.75,1)–(8.75,0); (8.75,1)–(9.5,1.5)–(9.5,2.5)–(10.25,3)–(10.25,4); (10.25,3)–(11,2.5)–(11,0); (11.75,2) node[]{};  (3,4)–(3,1.5)–(2.25,1)–(2.25,0); (2.25,1)–(1.5,1.5)–(1.5,2.5)–(0.75,3)–(0.75,4); (0.75,3)–(0,2.5)–(0,0); (4,2) node[]{};  (17,0)–(17,1.25)–(16,2)–(17,2.75)–(17,4); (17,1.25)..controls (18,2) and (18.5,2.5) .. (18.5,3)–(18.5,4); (17,2.75)..controls (18,2) and (18.5,1.5).. (18.5,1)–(18.5,0);  The previous definition of the confluence law is easier to apply. We also state another definition, closer to the formal definition of confluence law but strictly equivalent to the previous one, for and :  where the sum is taken over products satisfying , where is the operad composition of PreLie and only one element S is taken in the orbit by the action of the symmetric group (for instance, only one representative of is chosen.)  For the first expression, the decomposition is done following the deleted edge: it can be between and , in , or in . If it is in , it can be between the root of and the root of or somewhere else.  The second expression follows quite easily from the definition of the dual coproduct.  It has been pointed to the authors that the sketch of this confluence law can also be found in .  Let us give explicitely the second formulation of confluence laws on some example. For and , we get: Note that there are two terms per way to choose one edge in a left subtree and one edge in the right subtree of a node due to symmetries of .  Applying the algorithm, the idempotent is given by: where we see a rooted tree as the Hasse diagram of a poset with a unique minimal element (the root) and is the set of linear extension of the poset .  We show that this idempotent vanishes on any non trivial rooted tree by an inclusion-exclusion principle. For any , the coefficient in front of a tree in , with having edges different from the ones in , is obtained from coproducts deleting these edges and others by:  Hence the result.  We now apply rigidity theorem for PreLie algebras to three examples in the literature.    We use the obtained criterion to give a new proof of the freeness of the algebra of partitioned trees introduced in . Partitioned trees are equivalent to box trees introduced in .  Let us consider a quadruple , where   is a finite set called the set of LABELS,   is a partition of called the set of VERTICES,   is an element of called the root,   is a map from to called the set of EDGES.  We will denote by , the map from to which associates to a vertex the vertex containing the label . The pair is then an oriented graph, with vertices labelled by subsets of .  A quadruple is a BOX TREE if and only if the graph is a tree, rooted in , with edges oriented toward the root.  A label is called PARENT of a vertex if .  In Figure  , an example of box trees is presented. The root is the double rectangle.  (-0.35,-0.35) rectangle(2.35,0.35); (-0.3,-0.3) rectangle(2.3,0.3); (-0.3,0.7) rectangle(1.3,1.3); (1.7,0.7) rectangle(2.3,1.3); (-0.3,1.7) rectangle(0.3,2.3); (0.7,1.7) rectangle(1.3,2.3); (1.7,1.7) rectangle(2.3,2.3); (1,0.7) – (1,0.15); (2,0.7) – (2,0.15); (1,1.7) – (1,1.15); (0,1.7) – (1,1.15); (2,1.7) – (2,1.15); (0,0) node[]{}; (1,0) node[]{}; (2,0) node[]{}; (2,1) node[]{}; (2,2) node[]{}; (0,1) node[]{}; (1,1) node[]{}; (1,2) node[]{}; (0,2) node[]{};  The product is given by the natural PreLie product on trees.  On this algebra, we define the following coproduct: This coproduct satisfies the previous confluence law. Hence the associated algebra is PreLie free, with primitive given by trees with no edges.    The bijection between decorated hypertrees and a pair given by some type of box trees and decorated sets motivated the introduction of the following product on hypertrees introduced by Berge in and studied by the second author in , and :  A HYPERGRAPH (ON A SET ) is an ordered pair where is a finite set and is a collection of elements of cardinality at least two, belonging to the power set . The elements of are called VERTICES and those of are called EDGES.  An example of hypergraph is presented in figure  .  (0,0) – (0,1) node [A]{}; (0,1) – (1,1) node [B]{}; (1,1) – (1,0) – (2,0) – (2,1) – (1,1); (1.5,0.5) node[C]{}; (2,0) – (2,1)–(3,1) – (2,0); (2.30,0.70) node[D]{}; (0,0) circle (0.2); (0,1) circle (0.2); (1,1) circle (0.2); (1,0) circle (0.2); (2,0) circle (0.2); (2,1) circle (0.2); (3,1) circle (0.2); (0,0) node[]{}; (0,1) node[]{}; (1,1) node[]{}; (1,0) node[]{}; (2,1) node[]{}; (2,0) node[]{}; (3,1) node[]{};  Let be a hypergraph.  A WALK FROM A VERTEX OR AN EDGE TO A VERTEX OR AN EDGE IN is an alternating sequence of vertices and edges beginning by and ending by where for all , , and . The LENGTH of a walk is the number of edges and vertices in the walk.  In the previous example, there are several walks from to : and . A walk from to is .  A HYPERTREE is a non-empty hypergraph such that, given any distinct vertices and in ,  there exists a walk from to in with distinct edges , i.e. is CONNECTED,  and this walk is unique, i.e. has NO CYCLES.  The pair is called HYPERTREE ON . If is the set , then is called an HYPERTREE ON VERTICES.  An example of an hypertree is presented in figure  .  (0,0) – (1,1) – (0,1) – (0,0); (1,0) – (1,1); (0,0) circle (0.2); (0,1) circle (0.2); (1,1) circle (0.2); (1,0) circle (0.2); (0,0) node[]{}; (0,1) node[]{}; (1,1) node[]{}; (1,0) node[]{};  Let us consider a rooted hypertree , i.e. a hypertree with a distinguished vertex. Given an edge of , there is one vertex of which is the nearest from the root of in : let us call it the PETIOLE of .  We define a PreLie product on rooted hypertrees as the sum of all the ways to graft the root of on a vertex of , where the grafting is given by adding an edge between and .  We represent below the product of two rooted hypertrees:  (0,0) – (1,1) – (0,1) – (0,0); (1,0) – (1,1); (0,0) circle (0.3); (0,1) circle (0.2); (1,1) circle (0.2); (1,0) circle (0.2); (0,0) circle (0.2); (0,0) node[]{}; (0,1) node[]{}; (1,1) node[]{}; (1,0) node[]{};  (0,1)–(0,0) – (1,1) ; (0,0) circle (0.3); (0,0) circle (0.2); (1,1) circle (0.2); (0,1) circle (0.2); (0,0) node[]{}; (1,1) node[]{}; (0,1) node[]{};  (0,0)–(-1,1);  (0,0) – (1,1) – (0,1) – (0,0); (1,0) – (1,1); (0,0) circle (0.3); (0,1) circle (0.2); (1,1) circle (0.2); (1,0) circle (0.2); (0,0) circle (0.2); (0,0) node[]{}; (0,1) node[]{}; (1,1) node[]{}; (1,0) node[]{};  (-1,2)–(-1,1) – (0,2) ; (-1,1) circle (0.2); (0,2) circle (0.2); (-1,2) circle (0.2); (-1,1) node[]{}; (0,2) node[]{}; (-1,2) node[]{};  (0,1)–(0,2);  (0,0) – (1,1) – (0,1) – (0,0); (1,0) – (1,1); (0,0) circle (0.3); (0,1) circle (0.2); (1,1) circle (0.2); (1,0) circle (0.2); (0,0) circle (0.2); (0,0) node[]{}; (0,1) node[]{}; (1,1) node[]{}; (1,0) node[]{};  (0,3)–(0,2) – (1,3) ; (0,2) circle (0.2); (1,3) circle (0.2); (0,3) circle (0.2); (0,2) node[]{}; (1,3) node[]{}; (0,3) node[]{};  (1,1)–(1,2);  (0,0) – (1,1) – (0,1) – (0,0); (1,0) – (1,1); (0,0) circle (0.3); (0,1) circle (0.2); (1,1) circle (0.2); (1,0) circle (0.2); (0,0) circle (0.2); (0,0) node[]{}; (0,1) node[]{}; (1,1) node[]{}; (1,0) node[]{};  (1,3)–(1,2) – (2,3) ; (1,2) circle (0.2); (2,3) circle (0.2); (1,3) circle (0.2); (1,2) node[]{}; (2,3) node[]{}; (1,3) node[]{};  (1,0)–(2,1);  (0,0) – (1,1) – (0,1) – (0,0); (1,0) – (1,1); (0,0) circle (0.3); (0,1) circle (0.2); (1,1) circle (0.2); (1,0) circle (0.2); (0,0) circle (0.2); (0,0) node[]{}; (0,1) node[]{}; (1,1) node[]{}; (1,0) node[]{};  (2,2)–(2,1) – (3,2) ; (2,1) circle (0.2); (3,2) circle (0.2); (2,2) circle (0.2); (2,1) node[]{}; (3,2) node[]{}; (2,2) node[]{};  .  On this algebra, we define the following coproduct: This coproduct satisfies the previous confluence law. Hence the associated algebra is PreLie free, with primitive given by hypertrees with no binary edge, i.e. edge of cardinality two.    In and , the second author also studied the notion of (rooted) fat trees introduced in :  A FAT TREE ON A SET is a partition of , whose parts are called VERTICES, together with edges linking elements of different vertices, such that:  a WALK on the fat tree is an alternating sequence , where for every , and are elements of different vertices and is an edge between and , and for every between and , and are elements of the same vertex;  For every pair of elements of different vertices , there exists one and only one walk from to .  A ROOTED FAT TREE is a fat tree with a distinguished element called the ROOT.  In Figure  , an example of a rooted fat tree is presented. The root is circled.  (-0.3,-0.3) rectangle(2.3,0.3); (-0.3,0.7) rectangle(1.3,1.3); (1.7,0.7) rectangle(2.3,1.3); (-0.3,1.7) rectangle(0.3,2.3); (0.7,1.7) rectangle(1.3,2.3); (1.7,1.7) rectangle(2.3,2.3); (1,0.85) – (1,0.15); (2,0.85) – (2,0.15); (1,1.85) – (1,1.15); (0,1.85) – (1,1.15); (2,1.85) – (2,1.15); (0,0) circle (0.2); (0,0) node[]{}; (1,0) node[]{}; (2,0) node[]{}; (2,1) node[]{}; (2,2) node[]{}; (0,1) node[]{}; (1,1) node[]{}; (1,2) node[]{}; (0,2) node[]{};  The vector space of rooted fat trees can easily be endowed with a PreLie product given by the tree structure.  On this algebra, we define the following coproduct: This coproduct satisfies the previous confluence law. Hence the associated algebra is PreLie free, with primitive given by fat trees with no edges.  This example shows that the formula should contain a sum over permutations of primitive elements to take into account the action of the symmetric group, and automorphism groups of operations, which does not appear in . For instance, in PreLie(3), we have, denoting the generating product and coproduct respectively by and : for any triples of primitive elements . The second term of the sum will always appear if the first one appear because of the equality:">
  </outline>
  <outline text="Perm Case." _note="We now apply the rigidity theorem in dual case to Operad Perm, introduced by Chapoton in endowed with the usual vector space basis given by pointed sets.  We recall that the relation satisfied by a Perm product is given by:  Combinatorially, the product is the pointed set obtained by the union of and pointed in the pointed element of .  The dual coproduct is then given by the sum over all possible ways to split the set in two pointed set and such that is the union of and and the pointed element of is the pointed element of : where, for any pointed set , denotes the pointed element of .  In this case, the idempotent is given explicitly by the following formula: where is defined recursively by:  We use the notation because the diagram of is a diamond.  We show by induction that . The iterated coproduct satisfies the following relation: Indeed, only terms in the coproduct whose left part has at least elements remain after coproducts. To choose such a decomposition, we have choices.  To apply the rigidity theorem to some algebras, we compute the associated confluence law:  The Perm product and its dual coproduct satisfy on primitive elements the following confluence law, with and , for any element , where is the Kronecker symbol: where and .  The coproduct of the product is obtained by merging and , forgetting the pointed element of and then splitting the pointed set into two pointed sets, the left one containing the pointed element of . The equality is obtained by considering the different cases:  if the splitting separates and , is on the left side and can be pointed in any element,  if the splitting splits only, the right part of the coproduct can be pointed in an element of or any element of ,  if the splitting splits only, the pointed element of the left part of the coproduct is fixed and the right part can contain the pointed element of (which is in ) or not and then be pointed in any element.  if the splitting splits both and , the pointed element of can be on the right or on the left part and the pointed element of the right part can be chosen in or in .">
  </outline>
  <outline text="NAP Case." _note="We consider here the NAP operad (see and ). Livernet has proven in the existence of a mixed distributive law such that any conilpotent PreLie coNAP bialgebra satisfying the associated mixed distributive law is free and cofree over its primitive elements. We study here NAP coNAP bialgebras.  The NAP product on a vector space satisfies the following relation, for all , and in :  A basis of a free NAP algebra over a vector space is given by the set of rooted trees on vertices labelled by elements from , denoted by . The product of two trees and in this algebra is then the tree obtained by grafting the root of to the root of (see Figure  ).      child [node [2]{}]{} child [node [3]{}]{};      child [node [5]{}]{};      child [node [2]{}]{} child [node [3]{}]{} child [node [4]{} child [node [5]{}]{}]{};  The coproduct of a tree in this algebra, given as the dual of the product, is the sum of all possible trees obtained by deleting an edge attached to the root of . The part containing the root of is then the left part of the coproduct (see Figure  ).  To apply the rigidity theorem to some algebras, we compute the associated confluence law (which is a mixed distributive law):  The NAP product and its associated dual coproduct satisfy the following mixed distributive law: where (Sweedler’s notation).  (0,0)–(0,1)–(1,1.5)–(1,2.5)–(0,3)–(0,4); (2,0)–(2,1)–(1,1.5)–(1,2.5)–(2,3)–(2,4); (3,2) node []{}; (4,0)–(4,4); (6,0)–(6,4); (7,2) node[]{}; (9,0)–(9,1)–(8,2)–(9,3)–(9,4); (9,1)..controls (10,2) and (10.5,2.5) .. (10.5,3)–(10.5,4); (9,3)..controls (10,2) and (10.5,1.5).. (10.5,1)–(10.5,0);   is the sum of all possibilities of deleting an edge containing the root of in the tree obtained by adding an edge between the root of and the one of . The result comes from the following decomposition: either the edge deleted is or it is an edge of .  The previous reasoning gives us the following expression for idempotent, checked in the proof below: where is defined recursively by:  The operator can be rewritten in terms of rooted trees by . The partial sum vanishes over all rooted trees on at least two vertices, whose root has at most children.  Any free PreLie algebra can be endowed with a natural structure of free NAP algebra. Note that it is not the case for non free PreLie algebras: for instance, the PreLie structure on Mag operad cannot be endowed with a NAP product (see ).  The examples developed in the subsection   can then be seen as NAP-algebras when considering grafting to the root only.  Considering Example   endowed with the natural NAP structure associated to the PreLie product, we can define the following coNAP coproduct: where is the set of edges of adjacent to the root of .  This coproduct satisfies the previous mixed distributive law. Hence the associated algebra is NAP free, with primitive given by trees with no edges.  Considering Example  , we define a NAP product on rooted hypertrees as the hypertree obtained by grafting the root of on the root of , where the grafting is given by adding an edge between and .  On this algebra, we define the following coproduct: where is the set of edges of adjacent to the root of .  This coproduct satisfies the previous mixed distributive law. Hence the associated algebra is NAP free, with primitive given by hypertrees with no binary edge, i.e. edge of cardinality two.  Considering Example   endowed with the natural NAP structure associated to the PreLie product, we can define the following coNAP coproduct: where is the set of edges of adjacent to the root of .  This coproduct satisfies the previous mixed distributive law. Hence the associated algebra is NAP free, with primitive given by trees with no edges.">
  </outline>
  <outline text="PAN Case." _note="We consider here the Koszul dual of the NAP operad, denoted by PAN. The PAN product on a vector space satisfies the following relation, for all , and in :  The operad PAN is the Koszul dual of the operad NAP.  We use the methods of V. Dotsenko and E. Hoffbeck (see ) to determine the Koszul dual of NAP operad. Let us recall the relation in NAP: The orthogonal of this relation is precisely the relations of PAN.  A basis of a free PAN algebra over a vector space is given by the set of pointed sets on elements labelled by elements from . Denoting in bold the pointed element of the set, the product of two pointed sets and in this algebra is then the pointed set if , otherwise.  The coproduct of a pointed set pointed in in this algebra, given as the dual of the product, is given by: where the set is pointed in .  To apply the rigidity theorem to some algebras, we compute the associated confluence law:  The PAN product and its associated dual coproduct satisfy the following confluence law on the primitive elements of any conilpotent PAN-bialgebra: where (Sweedler’s notation) and is the Kronecker symbol.  (-1,0)–(-1,1)–(-2,1.5)–(-2,2.5)–(-1,3)–(-1,4); (-3,0)–(-3,1)–(-2,1.5)–(-2,2.5)–(-3,3)–(-3,4); (1.5,2) node []{}; (5,0)–(5,4); (7,0)–(7,4); (8,2) node[]{}; (10,0)–(10,1)–(9,2)–(10,3)–(10,4); (10,1)..controls (11,2) and (11.5,2.5) .. (11.5,3)–(11.5,4); (10,3)..controls (11,2) and (11.5,1.5).. (11.5,1)–(11.5,0);  If , . Otherwise, the coproduct is obtained by either separating and or splitting .  The previous reasoning gives us the following expression for idempotent, checked in the proof below: where is defined recursively by:  We show by induction that . Indeed, the iterated coproduct satisfies the following relation: The equality then comes from Newton binomial theorem.  COPAN-PERM BIALGEBRAS  Any Perm algebra can be endowed with a structure of coPAN bialgebras by considering the coproduct dual to the natural structure of PAN-algebra.  The following confluence law follows directly from the definitions:  The Perm product and the associated dual coPAN-coproduct satisfy the following confluence law on the primitive elements of any conilpotent coPAN-Perm-bialgebra: where and (Sweedler’s notation).">
  </outline>
  <outline text="Associative, Leibniz, Poisson and Zinbiel case." _note="We now consider rigidity theorems obtained from operads which underlying free algebras is the tensor algebra (with different products): Associative, Leibniz, Poisson and Zinbiel. These operads were introduced respectively in , and .  The relations satisfied by these operads are respectively:  for the Associative product , (the will be sometimes omitted)  for the Leibniz product , ,  for the Poisson products and , is (associative) commutative, is a Lie bracket and  for the Zinbiel product ,  Using relations, Poisson can be interpreted as (commutative products of Lie brackets of elements). A basis of Poisson operad is then given by the usual Lyndon basis of Lie algebras, with commutative terms sorted by non increasing order. The obtained terms are then naturally bracketed, the Lie brackets being determined by left-to-right minima and being naturally bracketed as Lyndon words (for instance, stands for ). We denote these representation in bold to distinguish it from the representation below.  To identify it as associative elements, one has to use the injection of Lie algebras into associative algebras defined by and the injection of commutative algebras into associative algebras defined by .  Using the above injections and with implicit between elements in the right part of the equality, we obtain a basis of the Poisson operad. The elements of small arities are then given by:  in arity , and  in arity ,  Combinatorially, these products correspond on the tensor algebra to:  the concatenation for the associative product:  for the Leibniz product , with and ,  the shuffle product for the Poisson product and the commutator of concatenation for the Poisson bracket :  and  the halfshuffle for the Zinbiel product: where , with and .  The associated dual coproducts are then given on the tensor algebra by:  the deconcatenation for the associative product:  for the Leibniz coproduct ,  the coshuffle coproduct for the Poisson product and the commutator of deconcatenation for the Poisson bracket :  and with and .  the cohalfshuffle for the Zinbiel coproduct: with and .  The mixed distributive laws for the different relations are given by:  ASSOCIATIVE-ASSOCIATIVE CASE: n.u.i. mixed distributive law proven in (written on Example  ),  ASSOCIATIVE-ZINBIEL CASE: semi-Hopf mixed distributive law proven in (written on Example  ). Note that the product used is exactly the shuffle product ,  ASSOCIATIVE-LEIBNIZ CASE: To express a confluence law, we need some operators expressed in terms of coassociative coproduct and Leibniz product: where and is the Kronecker symbol,  where , , , and the sequences are extracted thanks to deconcatenation and concatenation defined just above.  The confluence law is then given combinatorially, according to where the deconcatenation occurs, by:  ASSOCIATIVE-POISSON CASE: The mixed distributive law is given combinatorially by: and where and .  ZINBIEL-LEIBNIZ CASE: Remark first that the concatenation can be obtained recursively by: where .  We can then define as previously the operations and .  The confluence law is thus given combinatorially by:  No term can be obtained by splitting because a term can be obtained thanks to different elements of (according to how the elements are mixed) and then the coefficient of this term is exactly .">
  </outline>
  <outline text="Dendriform and Tridendriform case." _note="These cases are treated in the article . The relations obtained for the bidendriform bialgebra are different from the ones obtained by Foissy in .">
  </outline>
  <outline text="2-as and dipt case." _note="We now compute mixed distributive laws for Operads 2-as and Dipt, introduced by J.-L. Loday and M. Ronco in and .  We recall that the relation satisfies by 2-as products and are given by:  Combinatorially, the free 2-associative algebra on a vector space is spanned by words on planar trees with leaves decorated by elements of . The product is then the concatenation of trees in the word and is a grafting on a new root.  Following the dual case for the associative operad, the products and their dual coproducts are linked by the mixed distributive law given in the following array:  We recall that the relation satisfies by dipterous products and are given by:  Combinatorially (see and ), the free dipterous algebra on a vector space is spanned by words on planar trees with leaves decorated by elements of . The product is then the concatenation of trees in the word and is given recursively by: where and are trees and is the grafting of all the trees on a new root.  The coproduct is then given by considering the unique leftmost path from the root of the tree to the first node of arity different from two (this path can be trivial if the arity of the root is not two): there is as many term in the coproduct as there are edges in this path and a term is obtained from an edge by deleting all edges starting from vertices on the path between the root and and reordering the terms according to the previous recursive equation.  An example of dipterous product and coproduct is presented below:  The products and their dual coproducts are then linked by the following mixed distributive law according to where the edge comes from: where for any operation (Sweedler’s notation of coproduct).">
  </outline>
</outline>
  </body>
</opml>