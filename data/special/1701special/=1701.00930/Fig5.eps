%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: Fig5.pdf
%%Creator: Adobe Acrobat 10.1.16
%%For: shilpi
%%CreationDate: 02/09/2017, 12:19:47
%%BoundingBox: 0 0 1100 1080
%%HiResBoundingBox: 0 0 1100 1080
%%CropBox: 0 0 1100 1080
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 644 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.2-c001 63.139439, 2010/09/27-13:37:26        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   pdf:Producer="Adobe PDF library 5.00"
   xmp:CreateDate="2017-08-28T16:06:28+06:00"
   xmp:ModifyDate="2017-09-02T12:19:04+05:30"
   xmp:CreatorTool="Adobe Illustrator 10.0"
   xmp:MetadataDate="2017-09-02T12:19:04+05:30"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -1080 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 1080 li
1100 1080 li
1100 0 li
cp
clp
gsave
0 1080 mo
1100 1080 li
1100 0 li
0 0 li
cp
clp
set_def_flat
77.4873 978.681 mo
487.18 978.681 li
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
1 sep
f
1 lw
2 lc
1 lj
10 ml
[] 0 dsh
true sadj
77.4873 978.681 mo
487.18 978.681 li
@
77.4873 55.6523 mo
487.18 55.6523 li
@
96.9966 978.681 mo
96.9966 987.91 li
f
.5 lw
96.9966 978.681 mo
96.9966 987.91 li
@
194.542 978.681 mo
194.542 987.91 li
f
194.542 978.681 mo
194.542 987.91 li
@
292.088 978.681 mo
292.088 987.91 li
f
292.088 978.681 mo
292.088 987.91 li
@
389.634 978.681 mo
389.634 987.91 li
f
389.634 978.681 mo
389.634 987.91 li
@
77.4873 978.681 mo
77.4873 55.6523 li
f
1 lw
77.4873 978.681 mo
77.4873 55.6523 li
@
487.18 978.681 mo
487.18 55.6523 li
f
487.18 978.681 mo
487.18 55.6523 li
@
77.4873 885.081 mo
70.8413 885.081 li
@
77.4873 771.477 mo
70.8413 771.477 li
@
77.4873 657.872 mo
70.8413 657.872 li
@
77.4873 544.268 mo
70.8413 544.268 li
@
77.4873 430.663 mo
70.8413 430.663 li
@
77.4873 317.059 mo
70.8413 317.059 li
@
77.4873 203.455 mo
70.8413 203.455 li
@
77.4873 89.8506 mo
70.8413 89.8506 li
@
77.4873 964.486 mo
74.1646 964.486 li
@
77.4873 944.481 mo
74.1646 944.481 li
@
77.4873 930.288 mo
74.1646 930.288 li
@
77.4873 919.279 mo
74.1646 919.279 li
@
77.4873 910.283 mo
74.1646 910.283 li
@
77.4873 902.678 mo
74.1646 902.678 li
@
77.4873 896.09 mo
74.1646 896.09 li
@
77.4873 890.279 mo
74.1646 890.279 li
@
77.4873 850.882 mo
74.1646 850.882 li
@
77.4873 830.878 mo
74.1646 830.878 li
@
77.4873 816.684 mo
74.1646 816.684 li
@
77.4873 805.675 mo
74.1646 805.675 li
@
77.4873 796.68 mo
74.1646 796.68 li
@
77.4873 789.074 mo
74.1646 789.074 li
@
77.4873 782.485 mo
74.1646 782.485 li
@
77.4873 776.675 mo
74.1646 776.675 li
@
77.4873 737.278 mo
74.1646 737.278 li
@
77.4873 717.273 mo
74.1646 717.273 li
@
77.4873 703.08 mo
74.1646 703.08 li
@
77.4873 692.07 mo
74.1646 692.07 li
@
77.4873 683.075 mo
74.1646 683.075 li
@
77.4873 675.47 mo
74.1646 675.47 li
@
77.4873 668.882 mo
74.1646 668.882 li
@
77.4873 663.07 mo
74.1646 663.07 li
@
77.4873 623.674 mo
74.1646 623.674 li
@
77.4873 603.669 mo
74.1646 603.669 li
@
77.4873 589.476 mo
74.1646 589.476 li
@
77.4873 578.466 mo
74.1646 578.466 li
@
77.4873 569.471 mo
74.1646 569.471 li
@
77.4873 561.865 mo
74.1646 561.865 li
@
77.4873 555.276 mo
74.1646 555.276 li
@
77.4873 549.466 mo
74.1646 549.466 li
@
77.4873 510.069 mo
74.1646 510.069 li
@
77.4873 490.064 mo
74.1646 490.064 li
@
77.4873 475.871 mo
74.1646 475.871 li
@
77.4873 464.862 mo
74.1646 464.862 li
@
77.4873 455.866 mo
74.1646 455.866 li
@
77.4873 448.261 mo
74.1646 448.261 li
@
77.4873 441.673 mo
74.1646 441.673 li
@
77.4873 435.861 mo
74.1646 435.861 li
@
77.4873 396.465 mo
74.1646 396.465 li
@
77.4873 376.46 mo
74.1646 376.46 li
@
77.4873 362.267 mo
74.1646 362.267 li
@
77.4873 351.257 mo
74.1646 351.257 li
@
77.4873 342.262 mo
74.1646 342.262 li
@
77.4873 334.656 mo
74.1646 334.656 li
@
77.4873 328.068 mo
74.1646 328.068 li
@
77.4873 322.257 mo
74.1646 322.257 li
@
77.4873 282.861 mo
74.1646 282.861 li
@
77.4873 262.856 mo
74.1646 262.856 li
@
77.4873 248.662 mo
74.1646 248.662 li
@
77.4873 237.653 mo
74.1646 237.653 li
@
77.4873 228.658 mo
74.1646 228.658 li
@
77.4873 221.052 mo
74.1646 221.052 li
@
77.4873 214.464 mo
74.1646 214.464 li
@
77.4873 208.653 mo
74.1646 208.653 li
@
77.4873 169.256 mo
74.1646 169.256 li
@
77.4873 149.251 mo
74.1646 149.251 li
@
77.4873 135.058 mo
74.1646 135.058 li
@
77.4873 124.049 mo
74.1646 124.049 li
@
77.4873 115.053 mo
74.1646 115.053 li
@
77.4873 107.448 mo
74.1646 107.448 li
@
77.4873 100.86 mo
74.1646 100.86 li
@
77.4873 95.0488 mo
74.1646 95.0488 li
@
2 lw
0 lc
96.9966 967.018 mo
96.9985 771.477 li
100.94 964.89 li
104.881 964.989 li
108.822 965.089 li
112.763 965.188 li
116.705 965.287 li
120.646 965.387 li
124.587 965.485 li
128.528 965.585 li
132.47 965.685 li
136.411 965.783 li
140.352 965.883 li
144.293 965.982 li
148.234 966.081 li
152.176 966.181 li
156.117 966.28 li
160.058 966.379 li
163.999 966.479 li
167.941 966.578 li
171.882 966.677 li
175.823 966.776 li
179.764 966.876 li
183.706 966.975 li
187.646 967.074 li
191.588 967.174 li
195.529 967.272 li
199.471 967.372 li
203.412 967.472 li
207.353 967.57 li
211.294 967.67 li
215.235 967.77 li
219.177 967.868 li
223.118 967.968 li
227.059 968.067 li
231 968.166 li
234.941 968.266 li
238.882 968.365 li
242.824 968.464 li
246.765 968.563 li
250.707 968.663 li
254.647 968.762 li
258.589 968.861 li
262.53 968.96 li
266.471 969.06 li
270.413 969.159 li
274.354 969.258 li
278.295 969.357 li
282.236 969.457 li
286.178 969.556 li
290.119 969.655 li
294.06 969.755 li
298.001 969.854 li
301.942 969.953 li
305.883 970.053 li
309.824 970.151 li
313.766 970.251 li
317.707 970.35 li
321.648 970.449 li
325.59 970.549 li
329.531 970.647 li
333.472 970.747 li
337.413 970.847 li
341.354 970.945 li
345.295 971.045 li
349.237 971.145 li
353.179 971.243 li
357.12 971.343 li
361.061 971.441 li
365.002 971.541 li
368.943 971.641 li
372.884 971.739 li
376.825 971.839 li
380.767 971.938 li
384.708 972.037 li
388.649 972.137 li
392.591 972.235 li
396.532 972.335 li
400.473 972.435 li
404.415 972.533 li
408.355 972.633 li
412.296 972.732 li
416.237 972.831 li
420.179 972.931 li
424.12 973.029 li
428.062 973.129 li
432.003 973.229 li
435.944 973.327 li
439.885 973.427 li
443.826 973.525 li
447.768 973.625 li
451.709 973.725 li
455.65 973.823 li
459.592 973.923 li
463.533 974.021 li
467.474 974.121 li
471.415 974.221 li
475.356 974.319 li
479.297 974.419 li
483.239 974.518 li
487.18 974.617 li
@
96.9966 739.809 mo
96.9985 544.268 li
100.94 693.31 li
104.881 693.437 li
108.822 693.564 li
112.763 693.692 li
116.705 693.82 li
120.646 693.948 li
124.587 694.076 li
128.528 694.204 li
132.47 694.332 li
136.411 694.46 li
140.352 694.587 li
144.293 694.715 li
148.234 694.843 li
152.176 694.971 li
156.117 695.099 li
160.058 695.226 li
163.999 695.354 li
167.941 695.481 li
171.882 695.608 li
175.823 695.736 li
179.764 695.864 li
183.706 695.992 li
187.646 696.119 li
191.588 696.247 li
195.529 696.375 li
199.471 696.502 li
203.412 696.63 li
207.353 696.758 li
211.294 696.885 li
215.235 697.013 li
219.177 697.14 li
223.118 697.268 li
227.059 697.396 li
231 697.522 li
234.941 697.65 li
238.882 697.777 li
242.824 697.905 li
246.765 698.032 li
250.707 698.16 li
254.647 698.287 li
258.589 698.415 li
262.53 698.542 li
266.471 698.67 li
270.413 698.797 li
274.354 698.925 li
278.295 699.052 li
282.236 699.179 li
286.178 699.307 li
290.119 699.434 li
294.06 699.562 li
298.001 699.688 li
301.942 699.815 li
305.883 699.943 li
309.824 700.07 li
313.766 700.197 li
317.707 700.325 li
321.648 700.452 li
325.59 700.579 li
329.531 700.707 li
333.472 700.834 li
337.413 700.961 li
341.354 701.088 li
345.295 701.216 li
349.237 701.343 li
353.179 701.47 li
357.12 701.597 li
361.061 701.724 li
365.002 701.851 li
368.943 701.979 li
372.884 702.105 li
376.825 702.232 li
380.767 702.359 li
384.708 702.486 li
388.649 702.613 li
392.591 702.74 li
396.532 702.868 li
400.473 702.995 li
404.415 703.122 li
408.355 703.249 li
412.296 703.376 li
416.237 703.503 li
420.179 703.63 li
424.12 703.757 li
428.062 703.884 li
432.003 704.011 li
435.944 704.138 li
439.885 704.265 li
443.826 704.392 li
447.768 704.519 li
451.709 704.646 li
455.65 704.771 li
459.592 704.898 li
463.533 705.025 li
467.474 705.152 li
471.415 705.279 li
475.356 705.406 li
479.297 705.533 li
483.239 705.66 li
487.18 705.786 li
@
96.9966 512.6 mo
96.9985 317.059 li
100.94 389.624 li
104.881 390.623 li
108.822 391.619 li
112.763 392.614 li
116.705 393.608 li
120.646 394.6 li
124.587 395.59 li
128.528 396.578 li
132.47 397.565 li
136.411 398.55 li
140.352 399.533 li
144.293 400.515 li
148.234 401.494 li
152.176 402.472 li
156.117 403.447 li
160.058 404.421 li
163.999 405.393 li
167.941 406.363 li
171.882 407.331 li
175.823 408.296 li
179.764 409.26 li
183.706 410.222 li
187.646 411.181 li
191.588 412.139 li
195.529 413.094 li
199.471 414.046 li
203.412 414.997 li
207.353 415.945 li
211.294 416.891 li
215.235 417.834 li
219.177 418.775 li
223.118 419.714 li
227.059 420.65 li
231 421.584 li
234.941 422.515 li
238.882 423.443 li
242.824 424.369 li
246.765 425.292 li
250.707 426.213 li
254.647 427.13 li
258.589 428.045 li
262.53 428.958 li
266.471 429.867 li
270.413 430.773 li
274.354 431.677 li
278.295 432.578 li
282.236 433.475 li
286.178 434.37 li
290.119 435.261 li
294.06 436.149 li
298.001 437.035 li
301.942 437.917 li
305.883 438.796 li
309.824 439.671 li
313.766 440.543 li
317.707 441.413 li
321.648 442.278 li
325.59 443.141 li
329.531 443.999 li
333.472 444.854 li
337.413 445.706 li
341.354 446.555 li
345.295 447.399 li
349.237 448.24 li
353.179 449.078 li
357.12 449.911 li
361.061 450.741 li
365.002 451.567 li
368.943 452.39 li
372.884 453.208 li
376.825 454.022 li
380.767 454.833 li
384.708 455.64 li
388.649 456.442 li
392.591 457.241 li
396.532 458.036 li
400.473 458.826 li
404.415 459.613 li
408.355 460.395 li
412.296 461.173 li
416.237 461.947 li
420.179 462.717 li
424.12 463.482 li
428.062 464.243 li
432.003 465 li
435.944 465.752 li
439.885 466.5 li
443.826 467.244 li
447.768 467.983 li
451.709 468.717 li
455.65 469.447 li
459.592 470.173 li
463.533 470.894 li
467.474 471.61 li
471.415 472.322 li
475.356 473.029 li
479.297 473.732 li
483.239 474.43 li
487.18 475.123 li
@
96.9966 285.392 mo
96.9985 89.8506 li
100.94 123.525 li
104.881 126.004 li
108.822 128.478 li
112.763 130.947 li
116.705 133.41 li
120.646 135.868 li
124.587 138.32 li
128.528 140.767 li
132.47 143.206 li
136.411 145.639 li
140.352 148.064 li
144.293 150.483 li
148.234 152.894 li
152.176 155.296 li
156.117 157.69 li
160.058 160.076 li
163.999 162.453 li
167.941 164.819 li
171.882 167.176 li
175.823 169.523 li
179.764 171.859 li
183.706 174.184 li
187.646 176.497 li
191.588 178.798 li
195.529 181.086 li
199.471 183.361 li
203.412 185.623 li
207.353 187.87 li
211.294 190.103 li
215.235 192.32 li
219.177 194.522 li
223.118 196.707 li
227.059 198.875 li
231 201.027 li
234.941 203.16 li
238.882 205.274 li
242.824 207.369 li
246.765 209.444 li
250.707 211.499 li
254.647 213.533 li
258.589 215.545 li
262.53 217.535 li
266.471 219.502 li
270.413 221.445 li
274.354 223.365 li
278.295 225.26 li
282.236 227.13 li
286.178 228.974 li
290.119 230.792 li
294.06 232.583 li
298.001 234.347 li
301.942 236.083 li
305.883 237.791 li
309.824 239.471 li
313.766 241.121 li
317.707 242.743 li
321.648 244.334 li
325.59 245.896 li
329.531 247.427 li
333.472 248.928 li
337.413 250.398 li
341.354 251.837 li
345.295 253.246 li
349.237 254.623 li
353.179 255.969 li
357.12 257.284 li
361.061 258.567 li
365.002 259.82 li
368.943 261.042 li
372.884 262.233 li
376.825 263.394 li
380.767 264.524 li
384.708 265.624 li
388.649 266.694 li
392.591 267.735 li
396.532 268.747 li
400.473 269.73 li
404.415 270.685 li
408.355 271.611 li
412.296 272.51 li
416.237 273.382 li
420.179 274.228 li
424.12 275.048 li
428.062 275.842 li
432.003 276.612 li
435.944 277.357 li
439.885 278.079 li
443.826 278.777 li
447.768 279.453 li
451.709 280.107 li
455.65 280.74 li
459.592 281.352 li
463.533 281.944 li
467.474 282.516 li
471.415 283.07 li
475.356 283.605 li
479.297 284.122 li
483.239 284.623 li
487.18 285.106 li
@
1 lw
2 lc
684.782 339.982 mo
1058.62 339.982 li
@
684.782 54.4561 mo
1058.62 54.4561 li
@
946.082 339.982 mo
946.082 343.719 li
@
750.611 339.982 mo
750.611 341.85 li
@
797.318 339.982 mo
797.318 341.85 li
@
833.546 339.982 mo
833.546 341.85 li
@
863.147 339.982 mo
863.147 341.85 li
@
888.174 339.982 mo
888.174 341.85 li
@
909.854 339.982 mo
909.854 341.85 li
@
928.976 339.982 mo
928.976 341.85 li
@
684.782 339.982 mo
684.782 54.4561 li
@
1058.62 339.982 mo
1058.62 54.4561 li
@
684.782 323.75 mo
681.044 323.75 li
@
684.782 282.96 mo
681.044 282.96 li
@
684.782 242.171 mo
681.044 242.171 li
@
684.782 201.382 mo
681.044 201.382 li
@
684.782 160.593 mo
681.044 160.593 li
@
684.782 119.804 mo
681.044 119.804 li
@
684.782 79.0142 mo
681.044 79.0142 li
@
684.782 336.029 mo
682.913 336.029 li
@
684.782 332.798 mo
682.913 332.798 li
@
684.782 330.068 mo
682.913 330.068 li
@
684.782 327.703 mo
682.913 327.703 li
@
684.782 325.616 mo
682.913 325.616 li
@
684.782 311.471 mo
682.913 311.471 li
@
684.782 304.288 mo
682.913 304.288 li
@
684.782 299.192 mo
682.913 299.192 li
@
684.782 295.239 mo
682.913 295.239 li
@
684.782 292.009 mo
682.913 292.009 li
@
684.782 289.279 mo
682.913 289.279 li
@
684.782 286.913 mo
682.913 286.913 li
@
684.782 284.827 mo
682.913 284.827 li
@
684.782 270.682 mo
682.913 270.682 li
@
684.782 263.499 mo
682.913 263.499 li
@
684.782 258.402 mo
682.913 258.402 li
@
684.782 254.45 mo
682.913 254.45 li
@
684.782 251.22 mo
682.913 251.22 li
@
684.782 248.489 mo
682.913 248.489 li
@
684.782 246.124 mo
682.913 246.124 li
@
684.782 244.038 mo
682.913 244.038 li
@
684.782 229.892 mo
682.913 229.892 li
@
684.782 222.71 mo
682.913 222.71 li
@
684.782 217.614 mo
682.913 217.614 li
@
684.782 213.661 mo
682.913 213.661 li
@
684.782 210.431 mo
682.913 210.431 li
@
684.782 207.701 mo
682.913 207.701 li
@
684.782 205.334 mo
682.913 205.334 li
@
684.782 203.249 mo
682.913 203.249 li
@
684.782 189.104 mo
682.913 189.104 li
@
684.782 181.92 mo
682.913 181.92 li
@
684.782 176.824 mo
682.913 176.824 li
@
684.782 172.871 mo
682.913 172.871 li
@
684.782 169.642 mo
682.913 169.642 li
@
684.782 166.911 mo
682.913 166.911 li
@
684.782 164.546 mo
682.913 164.546 li
@
684.782 162.459 mo
682.913 162.459 li
@
684.782 148.314 mo
682.913 148.314 li
@
684.782 141.131 mo
682.913 141.131 li
@
684.782 136.036 mo
682.913 136.036 li
@
684.782 132.083 mo
682.913 132.083 li
@
684.782 128.853 mo
682.913 128.853 li
@
684.782 126.122 mo
682.913 126.122 li
@
684.782 123.756 mo
682.913 123.756 li
@
684.782 121.669 mo
682.913 121.669 li
@
684.782 107.525 mo
682.913 107.525 li
@
684.782 100.342 mo
682.913 100.342 li
@
684.782 95.2461 mo
682.913 95.2461 li
@
684.782 91.2925 mo
682.913 91.2925 li
@
684.782 88.063 mo
682.913 88.063 li
@
684.782 85.333 mo
682.913 85.333 li
@
684.782 82.9668 mo
682.913 82.9668 li
@
684.782 80.8809 mo
682.913 80.8809 li
@
684.782 66.7354 mo
682.913 66.7354 li
@
684.782 59.5527 mo
682.913 59.5527 li
@
%ADOBeginSubsetFont: RWKBAA+ArialMT Initial
ct_T42Dict begin
-0.664 -0.324 2 1.039
 256 array 0 1 255 {1 index exch /.notdef put} for  /RWKBAA+ArialMT
Type42DictBegin
[<00010000000c000c000c000c4f532f3214325d84000000cc000000606376
7420adbfdf8e0000012c0000066e6670676d38a5162b0000079c00000bb0
676c796614b9e1b00000d33800005068686561649cb5e4930000134c0000
003668686561123319560000138400000024686d7478b40da312000013a8
000042346c6f6361052053b6000055dc000042386d617870168309af0000
9814000000206e616d65d01c2c360000983400002ed170726570a1b2e8ea
0000c70800000c2f67646972000000000000000000000000000303880190
00050008059a05330000011b059a0533000003d1006602120805020b0604
020202020204e0002effc00078430000000900000000544d432000400020
fffc05d3fe510133073e01b2400001ffffff0000042605bb000000200015
05ba001905ba001a05a70019042600180000ffe70000ffe80000ffe7fe69
ffe805ba0019fe69ffe802ea000000b8000000b80000000000a800ad0169
00ad00bf00c201f0001800af00b900b400c800170044009c007c00940087
0006005a00c80089005200520005004400940119ffb4002f00a1000300a1
00cd00170057007e00ba00160118ffe9007f008503d300870085000d0022
00410050006f008d014cff75005c00df04830037004c006e00700180ff58
ff8eff92ffa400a500b903c8fffd000b001a0063006300cdffee05d8ffdc
002d005c0095009900df019209b500400057008000b9039d0072009a035d
0401ff67fffa00030021007700cd0004004d00cd01c0022b004c006500e7
0118017c034305d8ffa3ffb0ffc40003001c005d0068009a00ba01350147
0221055cff4dffcd0016002d00780080009900b200b600b600b800bd00da
010c05f0ffa4fff00019002c0049007f00b400ce01c003fefd81fe3f0000
00050018002900390049006f00be00c700d0012301c1026f050c05320540
057affd4001400310055005700a700b400e601f7027e027e027f03c60446
ff42000e0085009100bf00c200c500e1011a012f014f01560229026f029e
03720008002c00310031006400690089009800c700de012b01b6020c02cf
03a304ab04fb061dfee0ff0e00060026009b009d00c1010d011801200173
018201d601e30243025f029b02e2039404a904d20761001c005e006d008d
00ab00f7011201380151015b0168017c01870191019901cd01d001e80241
0254026b02ef0368037103bd044204420453047304830586058b06e8fe58
fec4fed1fef7ff32ff860051007c008100910095009e00b400b900cf00d9
00d900df00e20105010b010e010e012001210155017b017b017e018d01a2
01a801a901b401d001d001e201e901f201f501fb020002000206021b0221
022202220223027202770294029c02cf02cf02d002ec02f903170322032b
0335033c0359036f037103870390039003b503e1041a04cf04ff05320532
0596059f05a805ab05c205f0060c0782080008ccfca3fd2afddefe00fe88
fe96feb2feb4ffe100150019001a001c001f003c005100610061006a0078
009600a500af00d3010c0118011a012a013e014c0151015f016a01710178
01820184019a01a501a801a901ae01bc01cd01d701ef0200020d021c0221
0222022e02350242024f024f025e026502710290029202b402d602fa0307
030b030f0315032a0347035d036503740379039603b003cc03dd03e203f6
03fc03fc03ff040a041f04220426042b0447045f0475049e04e704e7055c
05cb05e5060a066d068606b806f10736073e07500751075d078f07b607d4
086000b600c300b500b700000000000000000000000001e00381034503b5
008e0233041902ce02ce002d005f0064034d023f000002a80188027d01b4
02240578063b023b014e00f00426029402c6029f02f6023b034d014b0153
006a0231000000000000061404aa0000003c04c300ed04bc026502ce03b5
0078060c017e02ef060c00b201000239000001c50330042b03cb00da03df
010704a100db040a011701ed02a70350010b01bd043e05580021039c00ae
0371017d00b5024500000afb088c012b014e01aa00870054013201f803ff
0003024e00b4003703e30083006b02d800ed00770088009701640467008e
0033017c00e700a6029e0329056e062a061501c90269048a021301b40002
04a9000002390124010305140084015d039a06ef02d9007500cf040a00de
03ac04bc02cf02ae034d04f005520168006d007d00860071ff8100790558
04d2016700030156002504e00094007c033204210094007f0072005c002f
00b6001800ba00b80041034d00720018001f004c016a01550099009a009a
009800b200040078006900140057006e00ce00b4065402b80067050e0165
00e7000004cbfe52005affa60099ff67006eff92002dffd40087ff7c00b8
00a800e5008f00a80185fe7b0070001e00d900de014c054602cf0546ff2d
028a02d90253029600b700000000000000000000000000000125011800ea
00ea00ae0000003e05bb008a04d70053003fff8cffd50015002800220099
0062004a00e4006d00ee00e5004803c00033fe4e02b1ff460370007905df
0051ffa7ff1f010a0068ff6c004f00bc00a507050061072b00ed04b001d2
00b6007b00650252ff740365fe690094008f005c00400086007500890089
0471048304f9008c00910096009b00a000a500aa00af00b400b90000405b
8574737271706f6e6d6c6b6a6968676665625d58575655544f4e41403f3e
3d3c3b3a3938373534333231302f2e2d2c2b2a292827262524232221201f
1e1d1c1b1a191817161514131211100f0e0d0c0b0a090807060504030201
002c4523466020b02660b004262348482d2c452346236120b02661b00426
2348482d2c45234660b0206120b04660b004262348482d2c4523462361b0
206020b02661b02061b004262348482d2c45234660b0406120b06660b004
262348482d2c4523462361b0406020b02661b04061b004262348482d2c01
10203c003c2d2c20452320b0cd442320b8015a51582320b08d44235920b0
ed51582320b04d44235920b09051582320b00d44235921212d2c20204518
684420b001602045b04676688a4560442d2c01b10b0a432343650a2d2c00
b10a0b4323430b2d2c00b0172370b101173e01b0172370b10217453ab102
00080d2d2c45b01a234445b01923442d2c2045b00325456164b050515845
441b2121592d2cb00143632362b0002342b00f2b2d2c2045b0004360442d
2c01b00643b00743650a2d2c2069b04061b0008b20b12cc08a8cb8100062
602b0c642364615c58b00361592d2c45b0112bb0172344b0177ae4182d2c
45b0112bb01723442d2cb01243588745b0112bb0172344b0177ae41b038a
45186920b01723448a8a8720b0a05158b0112bb0172344b0177ae41b21b0
177ae45959182d2c2d2cb0022546608a46b040618c482d2c4b53205c58b0
02855958b00185592d2c20b0032545b019234445b01a23444565234520b0
0325606a20b009234223688a6a606120b01a8ab000527921b21a1a40b9ff
e0001a45208a54582321b03f1b235961441cb114008a5279b31940201945
208a54582321b03f1b235961442d2cb110114323430b2d2cb10e0f432343
0b2d2cb10c0d4323430b2d2cb10c0d432343650b2d2cb10e0f432343650b
2d2cb11011432343650b2d2c4b525845441b2121592d2c0120b003252349
b04060b0206320b000525823b002253823b002256538008a63381b212121
212159012d2c4bb06451584569b00943608a103a1b212121592d2c01b005
251023208af500b0016023edec2d2c01b005251023208af500b0016123ed
ec2d2c01b0062510f500edec2d2c20b001600110203c003c2d2c20b00161
0110203c003c2d2cb02b2bb02a2a2d2c00b00743b006430b2d2c3eb02a2a
2d2c352d2c76b8022323701020b802234520b0005058b00161593a2f182d
2c21210c6423648bb84000622d2c21b08051580c6423648bb82000621bb2
00402f2b59b002602d2c21b0c051580c6423648bb81555621bb200802f2b
59b002602d2c0c6423648bb84000626023212d2cb4000100000015b00826
b00826b00826b008260f10161345683ab001162d2cb4000100000015b008
26b00826b00826b008260f1016134568653ab001162d2c4b53234b515a58
20458a60441b2121592d2c4b545820458a60441b2121592d2c4b53234b51
5a58381b2121592d2c4b5458381b2121592d2cb0134358031b02592d2cb0
134358021b03592d2c4b54b012435c5a58381b2121592d2cb012435c580c
b00425b00425060c6423646164b807085158b00425b00425012046b01060
482046b0106048590a21211b2121592d2cb012435c580cb00425b0042506
0c6423646164b807085158b00425b00425012046b8fff060482046b8fff0
6048590a21211b2121592d2c4b53234b515a58b03a2b1b2121592d2c4b53
234b515a58b03b2b1b2121592d2c4b53234b515ab012435c5a58381b2121
592d2c0c8a034b54b00426024b545a8a8a0ab012435c5a58381b2121592d
2c4b5258b00425b0042549b00425b00425496120b0005458212043b00055
58b00325b00325b8ffc038b8ffc038591bb04054582043b0005458b00225
b8ffc038591b2043b0005458b00325b00325b8ffc038b8ffc0381bb00325
b8ffc03859595959212121212d2c462346608a8a462320468a608a61b8ff
8062232010238ab902c202c28a70456020b0005058b00161b8ffba8b1bb0
468c59b0106068013a2d2c2320b000508a8a64b10003255458b0401bb101
03255458b037438b59b04f2b5923b0622b2321235865592d2cb13a000c21
5460432d2cb1020042b123018851b1400188535a58b910000020885458b2
02010243604259b12401885158b920000040885458b2020202436042b124
01885458b2022002436042004b014b5258b2020802436042591bb9400000
80885458b202040243604259b94000008063b80100885458b20208024360
4259b94000010063b80200885458b202100243604259b12601885158b940
00020063b80400885458b202400243604259b94000040063b80800885458
b202800243604259b12801885158b94000080063b81000885458ba000201
00000243604259595959595959b10002435458400a37403a403b403e023f
021bb10102435458b237403aba0100003b0100b33e013f011bb180024352
58b237403ab80180b13b401bb901000002435258b237403aba0180003b01
401bb901800002435258b237403ab80200b13b401bb237403aba0100003b
0100595959b9400000808855b94000020063b8040088555a58b33e003f01
1bb33e003f0159595942424242422d2cb0024354584b53234b515a58381b
2121591b21212121592d2cb0572b580c028a4b53b004264b515a580a381b
0a2121591b21212121592d2c20b0024354b00123b05f237821b1000243b0
56237921b0024323b020205c58212121b100471c598a8a208a208a23b810
00635658b81000635658212121b1012c1c591b2159b08062205c58212121
b1001b1c5923b08062205c58212121b1000c1c598ab00161b8ffb31c2321
2d2c20b0024354b00123b07b237821b1000243b072237921b10002438ab0
20205c58212121b0631c598a8a208a208a23b81000635658b81000635658
b00426b0015bb00426b00426b004261b21212121b13600231c591b2159b0
042623b08062205c588a5c8a5a23212321b01d1c598ab08062205c582121
2321b00e1c59b00426b00161b8ff981c23212d2c012d2cb0022563b02060
66b00225b82000626023622d2c234ab1024e2b2d2c234ab1014e2b2d2c23
8a4a234564b0022564b002256164b03543525821206459b1024e2b23b000
505865592d2c238a4a234564b0022564b002256164b03543525821206459
b1014e2b23b000505865592d2c20b003254ab1024e2b8a103b2d2c20b003
254ab1014e2b8a103b2d2cb00325b003258ab0672b8a103b2d2cb00325b0
03258ab0682b8a103b2d2cb0032546b003254660b004252eb00425b00425
b0042620b000505821b06a1bb06c592bb0032546b00325466061b0806220
8a2010233a232010233a2d2cb0032547b003254760b0052547b0806361b0
0225b00625496323b005254ab080632058621b2159b0042646608a468a46
60b02063612d2cb00426b00425b00425b00426b06e2b208a2010233a2320
10233a2d2c2320b001545821b00225b1024e2bb0805020605920606020b0
01515821211b20b005515821206661b0402361b100032550b00325b00325
505a5820b00325618a535821b000591b21591bb00754582066616523211b
2121b000595959b1024e2b2d2cb00225b004254ab0005358b0001b8a8a23
8ab00159b004254620666120b00526b0062649b00526b00526b0702b2361
65b02060206661b02061652d2cb0022546208a20b000505821b1024e2b1b
452321596165b00225103b2d2cb0042620b802006220b80200638a236120
b05d602bb00525118a128a20398a58ba005d10000004266356602b232120
10204620b1024e2b23611b2321208a201049b1024e2b593b2d2cba005d10
000009256356602bb00525b00525b00526b06d2bb15d0725602bb00525b0
0525b00525b00525b06f2bba005d10000008266356602b20b0005258b050
2bb00525b00525b00725b00725b00525b0712bb0021738b00052b00225b0
01525a58b00425b0062549b00325b00525496020b0405258211bb0005258
20b0025458b00425b00425b00725b0072549b00217381bb00425b00425b0
0425b0062549b0021738595959595921212121212d2cb12501885058b940
00020063b8040088545cb0124b525b1bb001592d000100000006e6663561
23655f0f3cf5081b080000000000a2e3272a00000000d19de3fdfaaffd67
1000085100000009000100010000000000010000073efe4e00431000faaf
fa7a100000010000000000000000000000000000108d0600010000000000
0239000002390000023900b002d7005e0473001504730049071d00770556
00580187005a02aa007c02aa007c031d004004ac0072023900aa02aa0041
023900ba0239000004730055047300df0473003c047300560473001a0473
00550473004d047300610473005304730055023900b9023900aa04ac0070
04ac007204ac00700473005a081f006f0556fffd0556009605c7006605c7
009e055600a204e300a80639006d05c700a4023900bf0400003705560096
0473009606aa009805c7009c063900630556009e0639005805c700a10556
005c04e3003005c700a105560009078d0019055600090556000604e30029
0239008b023900000239002703c100360473ffe102aa00590473004a0473
008604000050047300460473004b02390013047300420473008701c70088
01c7ffa20400008801c7008306aa00870473008704730044047300870473
004802aa00850400003f02390024047300830400001a05c700060400000f
040000210400002802ac0039021400bc02ac002f04ac00570556fffd0556
fffd05c70068055600a205c7009c0639006305c700a10473004a0473004a
0473004a0473004a0473004a0473004a040000500473004b0473004b0473
004b0473004b023900bd023900230239ffe5023900090473008704730044
047300440473004404730044047300440473008304730083047300830473
008304730049033300800473006b0473001b0473005102cd006d044c0001
04e3009905e5000305e50003080000e102aa00de02aa003d0464004e0800
00010639005305b4009a0464004e0464004d0464004d0473fffd049c00a0
03f4003805b4007a069600a1046400000231000002f6002f02ec002d0625
007f071d004404e3008104e3009e02aa00e804ac0072046400540473002e
0464003304e5001a047300860473008c080000ef0556fffd0556fffd0639
006308000081078d00520473fffc0800000002aa005302aa004701c70080
01c7006c0464004e03f4002f04000021055600060156fe390473ffe402aa
005c02aa005c040000170400001704730049023900b901c7006c02aa0047
080000250556fffd055600a20556fffd055600a2055600a20239008d0239
ffe0023900040239001506390063063900630639006305c700a105c700a1
05c700a1023900c602aa001902aa000602aa001d02aa002e02aa00e502aa
00a202aa006b02aa003a02aa004b02aa00280473000001c700030556005c
0400003f04e3002904000028021400bc05c7fffd04730049055600060400
00210556009e0473008704ac007204ac00a102aa006b02aa001902aa0021
06ac006b06ac006b06ac0021047300000639006d04730042023900b10556
005c0400003f05c700660400005005c700660400005004730046046bffe1
02aa00ee0556fffd0473004a0556fffd0473004a05c7009e04eb004705c7
fffd055600a20473004b055600a20473004b0473009601c7004204730096
025500880473009602ac008305c7009c0473008705c7009c047300870639
00630473004405c700a102aa008505c700a102aa003c0556005c0400003f
04e300300239002404e300300300002305c700a10473008305c700a10473
008304e300290400002804e3002904000028046800a40639006006620055
04a00048047400480391006204f000440329002e05300048046bffe10400
00b002eb005208c000330800004f040000990800004f040000990800004f
040000980400009807d5016a05c0009e04ab007204d5009d04ac007104d5
022204d5010505abffe9050001c905ab027e05abffe905ab027e05abffe9
05ab027e05abffe905abffe905abffe905abffe905abffe905ab01c005ab
027e05ab01c005ab01c005abffe905abffe905abffe905ab027e05ab01c0
05ab01c005abffe905abffe905abffe905ab027e05ab01c005ab01c005ab
ffe905abffe905abffe905abffe905abffe905abffe905abffe905abffe9
05abffe905abffe905abffe905abffe905abffe905abffe905abffe905ab
ffe905ab02d605ab006605abffea05d5ffff04d500920800000007eb0130
07eb012007eb013007eb012004d500b204d5008004d5002a082b0198086b
01b807550010060000f40600006f0440003a0540003704c0003f04150040
040000250600005505e100bf038d008804d5ffd90180008002d500800715
00610296000f04d5009202d6008302d6008304d500b202d600700556fffd
0473004a05c700660400005005c7006604000050055600a20473004b0556
00a20473004b055600a20473004b0639006d047300420639006d04730042
0639006d0473004205c700a40473008705c7001f047300060239ffce0239
ffce0239ffe40239ffe40239fff60239fff50239004b01c7001904000037
01c7ffa20556009604000088040000860473009601c7006a05c7009c0473
008705c900a50473008b0639006304730044063900630473004405c700a1
02aa006a0556005c0400003f04e300300239000c05c700a10473008305c7
00a10473008305c700a10473008305c700a104730083078d001905c70006
055600060400002101c700890556fffd0473004a08000001071d00440639
005304e30081023900b9078d001905c70006078d001905c70006078d0019
05c70006055600060400002101c7008a02aaffe10473001b04cd005a06ac
006b06ac002206ac002206ac004a02aa00e202aa006b02aa00de02aaffea
0557ffff0646ffa706b4ffa80312ffa80632ffa706d8ffa70605ffa701c7
ff780556fffd055600960558fffe055600a204e3002905c700a4023900bf
055600960558000b06aa009805c7009c0533006d0639006305c700a40556
009e04f2009404e30030055600060556000906af007f05fb006102390004
0556000604a00048039100620473008b01c7006b04600088049a008c0400
0019038700480473008b0473005c01c700890400008604000018049c00a0
0400001a0395005c04730044048d008303db0056046000880433001105b4
007a063f005701c7ffc9046000880473004804600088063f0057055700a2
06eb0032045500a105c000640556005c023900bf02390004040000370875
000d081500a406d5003104a900a10515000a05c000a00556fffd054000a7
05560096045500a1056b0000055600a20763000704d5004e05c000a105c0
00a104a900a10540001206aa009805c700a40639006305c000a00556009e
05c7006604e300300515000a061500520556000905eb009f055500570755
00a1078000a106550000071500a8054000a505c0004a081500a405c7001a
0473004a0495005b0440008802eb008804ab00000473004b055afffb03ab
003204780087047800870380008604ab00180580008c046b008804730044
04550088047300870400005003aa0026040000210695004b0400000f0495
008a042b0045066b008d0695008d0500002805c0008b042b00840415002b
060000890455001f0473004b0473000002eb00890415004b0400003f01c7
00880239000901c7ffa20740001306800083047300000380008604000021
046b008803e900a1034a008808000041089500a00585002d000000000000
000000000000000000000000000000000000000000000000000000000000
0000ffac00000000000001010000ffce0310007d0000ff37023300d20000
030b0000ff04023900b90481006904560032033100190411002d04d10096
01f9009b030f005f04ca009b04b8008c01f9009b0413002803b0005003b4
003c04ca009b04cf005001f9009b02d2003c0498005a043c00190488006e
045f007303b1001903d4000a0466009604130028058e00640524002803f2
009b03f2009b03f2009b01e3005a0356005a0686009b01f9004604130028
0413002803b4ff4903b4ff490448002d058e0064058e0064058e0064058e
006404810069048100690481006904560032033100190411002d04d10096
024b0000034a000004b8008c024b00000413002803b0005003b4003c04cf
005002d2003c0498005a0488006e045f007303d4000a0466009604130028
058e00640524002801f9009b0456003203b00050045f0073049b003c0000
ffdc0000ff250000ffdc0000fe51028d00ab028d00a002da0043034d0079
01a8ffba0000004600000046000000460000004600000048000000460000
0046000000460435017c0435012e043500b7043500810435012c043500be
043500af043500810435009a043500db04350085028d00c0043500b30600
01000600010002420036060001000435009e04350098043500cb06000100
060001000600010006000100060001000000004606000100060001000600
01000600010006000100060001000600010006000100051bffba06000100
060001000600010005b5003a05b5003a01f4ffba01f4ffba060001000600
010006000100060001000481003604350036043dffba043dffba03e9004a
03e9004a067f0014077600140327ffba041effba067f0014077600140327
ffba041effba051b003204b500240300fff7060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100000000310000004600000046
000000400000004606000100060001000000ffdc0000fe510000ff160000
ff160000ff160000ff160000ff160000ff160000ff160000ff160000ff16
0000ffdc0000ff160000ffdc0000ff200000ffdc0473004a080000000600
010006000100060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
0600010006000100060001000600010006000100028d0011028d00300600
010004ee0015034d007901a8001301d6ffd701a8005601d6001103750032
0375003201a8002e01d60013051b003204b5002401f4ffba01f4ffba01a8
009301d6001305b5003a05b5003a01f4ffba01f4ffba0242fffe0300fff7
05b5003a05b5003a01f4ffba01f4ffba05b5003a05b5003a01f4ffba01f4
ffba0481003604350036043dffba043dffba0481003604350036043dffba
043dffba0481003604350036043dffba043dffba02b3005f02b3005f02b3
005f02b3005f03e9004a03e9004a03e9004a03e9004a0692003e0692003e
043fffba043fffba0692003e0692003e043fffba043fffba08c9003e08c9
003e06c5ffba06c5ffba08c9003e08c9003e06c5ffba06c5ffba04a7ffba
04a7ffba04a7ffba04a7ffba04a7ffba04a7ffba04a7ffba04a7ffba045a
002a039a00360435ffba0327ffba045a002a039a00360435ffba0327ffba
064f0027064f00270224ffba021affba04a7004604a700460224ffba021a
ffba04cf002d04cf002d0327ffba0327ffba040d0047040d004701a8ffba
01a8ffba02b4002302b400230327ffba0327ffba043500450435004501f4
ffba01f4ffba024200360300fff7039affba0327ffba0375003203750032
051b003204b50024051b003204b5002401f4ffba01f4ffba045a003104ce
0041045a002704ce003a045a005304ce004a045a005304ce004a06000100
060001000000004600000046060001000600010006000100000000460000
004606000100060001000000004800000046060001000600010006000100
000000460000004600000046000000460000004000000031060001000000
004600000046060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
060001000600010006000100028d00ca028d00c7028d00c6060001000600
010006000100060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
0100ffba0800ffba1000ffba06dc0063053f004406d500a1055b00830000
fddc0000fc2f0000fca60000fe540000fcd70000fd730000fe290000fe0d
0000fd110000fc670000fd9d0000fbf50000fc720000fed50000fed50000
ff02041b00a006ac006b06ac00190000feb60000fd730000fe080000fca6
0000fe530000fd110000fbc80000faf40000faaf0000fc720000fbaa0000
fb6a0000fcf10000fc7d0000fbdd0000fcc10000fb980000fdea0000fe84
0000fdc20000fcf10000fd5f0000fe760000febc0000fceb0000fd6c0000
fd580000fc900000fd150000fc2c0000fc130000fc120000fb960000fb96
01c700880556fffd0473004a0556fffd0473004a0556fffd0473004a0556
fffd0473004a0556fffd0473004a0556fffd0473004a0556fffd0473004a
0556fffd0473004a0556fffd0473004a0556fffd0473004a0556fffd0473
004a0556fffd0473004a055600a20473004b055600a20473004b055600a2
0473004b055600a20473004b055600a20473004b055600a20473004b0556
00a20473004b055600a20473004b0239006301c7001f023900ba01c7007c
063900630473004406390063047300440639006304730044063900630473
004406390063047300440639006304730044063900630473004406dc0063
053f004406dc0063053f004406dc0063053f004406dc0063053f004406dc
0063053f004405c700a10473008305c700a10473008306d500a1055b0083
06d500a1055b008306d500a1055b008306d500a1055b008306d500a1055b
00830556000604000021055600060400002105560006040000210556fffd
0473004a0239ffe201c7ffb0063900630473004405c700a10473008305c7
00a10473008305c700a10473008305c700a10473008305c700a104730083
0000fefe0000fefe0000fefe0000fefe0455fffd02eb000c07630007055a
fffb04a900a10380008604a900a10380008605c700a4046b00880473fffd
040000140473fffd04000014055600090400000f05550057042b00450555
00a1047300870605006304730055063900600473004405b5003a01f4ffba
0224ffba021affba04a7004601f4009e01f4001001f4001b01f4001001f4
006b01f4fff90227ffce0000000f0000fff502aa00a402aa00a400000013
00000056000000560000ffcf01a8000f01d6ffbf01a8fff501d6ffcd01a8
001d01d6fff501a8009301d6001303750032037500320375003203750032
051b003204b5002405b5003a05b5003a01f4ffba01f4ffba05b5003a05b5
003a01f4ffba01f4ffba05b5003a05b5003a01f4ffba01f4ffba05b5003a
05b5003a01f4ffba01f4ffba05b5003a05b5003a01f4ffba01f4ffba05b5
003a05b5003a01f4ffba01f4ffba05b5003a05b5003a01f4ffba01f4ffba
0481003604350036043dffba043dffba0481003604350036043dffba043d
ffba0481003604350036043dffba043dffba0481003604350036043dffba
043dffba0481003604350036043dffba043dffba0481003604350036043d
ffba043dffba02b3003202b3003202b3005f02b3005f02b3005f02b3005f
02b3003202b3003202b3005f02b3005f02b3005f02b3005f02b3005f02b3
005f02b3003802b3003802b3004902b3004903e9004a03e9004a03e9004a
03e9004a03e9004a03e9004a03e9004a03e9004a03e9004a03e9004a03e9
004a03e9004a03e9004a03e9004a03e9004a03e9004a0692003e0692003e
043fffba043fffba0692003e0692003e043fffba043fffba0692003e0692
003e043fffba043fffba08c9003e08c9003e06c5ffba06c5ffba08c9003e
08c9003e06c5ffba06c5ffba04a7ffba04a7ffba045a002a039a00360435
ffba0327ffba064f0027064f0027064f00270224ffba021affba064f0027
064f00270224ffba021affba064f0027064f00270224ffba021affba064f
0027064f00270224ffba021affba064f0027064f00270224ffba021affba
04a7004604a7004604a7004604a70046093e0032093e00320740ffba0740
ffba067f0014077600140327ffba041effba04cf002d04cf002d0327ffba
0327ffba04cf002d04cf002d0327ffba0327ffba04cf002d04cf002d0327
ffba0327ffba067f0014077600140327ffba041effba067f001407760014
0327ffba041effba067f0014077600140327ffba041effba067f00140776
00140327ffba041effba067f0014077600140327ffba041effba040d0047
040d004701a8ffba01a8ffba040d0047040d004701a8ffba01a8ffba040d
0047040d004701a8ffba01a8ffba040d0047040d004701a8ffba01a8ffba
043500450435004501f4ffba01f4ffba0435004504350045043500450435
0045043500450435004501f4ffba01f4ffba043500450435004504810036
04350036043dffba043dffba024200360300fff7031a001a031a001a031a
001a03750032037500320375003203750032037500320375003203750032
037500320375003203750032037500320375003203750032037500320375
003203750032051bffba04b5ffba051b003204b5002401f4ffba01f4ffba
0375003203750032051b003204b5002401f4ffba01f4ffba051b003204b5
0024067f0045067f0045067f0045067f004501a800280000fe290000fea2
0000fef30000ff1d0000ff120000ff920000fe7e08fc003208ad00320000
ff880000ffaf0000ff3f0000ff640000fe7e0000ff36018d000002f6fffd
0000fe820000ff1004cd00320000ff580000ff580000ff640692003e0692
003e043fffba043fffba08c9003e08c9003e06c5ffba06c5ffba045a002a
039a00360435ffba0327ffba034d007902b400230242003601f4ffba0290
ffba01f4002f01f4003b01f4001201f400b101f4006d067f001407760014
01f9009b0000fee002bc000003f2009b045afff504cefff5045a005304ce
004a045a005304ce004a045a005304ce004a045a005304ce004a045a0053
04ce004a045a005304ce004a04350071043500ad045a000f04ce000f0473
001406110014054000a7047300860540000a0473000a05c7005105c70066
0400005005c7fffd067a00140540004a04730046047400480556006e04d5
005304e3ffc40639006d04fe000f070c008701c700830239001f05560096
0400008801c7001504000018072000a405c7ffb80473008b0639006006f2
00630557004406090014047300860556009e0556006b0400004f04f20094
030b00440239002404e300140239002404e3003005fb006105c700a1062e
00100400002104e300290400002804e3002904e30031045c0044045c003f
0473003c0473005503ab003203e5002404730087021400bc034e00bc04ac
0072023900b00aaa009e09c7009e08640046087f009606aa0096039c0083
09c7009c078e009c062b0087047300550556fffd0473004a0000fefe0556
fffd0473004a08000001071d00440639006d0473001a0639006d04730042
05560096040000880639006304730044063900630473004404e30029045c
004c01c7ffa20aaa009e09c7009e086400460639006d04730042084600a4
04f2009e05c7009c047300870556fffd0473004a0556fffd0473004a0556
00a20473004b055600a20473004b0239ff8a0239ff64023900040239fff6
0639006304730044063900630473004405c700a102aaffcc05c700a102aa
006805c700a10473007605c700a1047300830556005c0400003f04e30030
02390024045c0051037e001305c700a40473008705a600a404d6005e0486
005e04e30029040000280556fffd0473004a055600a20473004b06390063
047300440000fefd06390063047300440639006304730044063900630473
004405560006040000210473005704730048047300860473008604000013
0400005004730046047300460473005505e9005503ab004903ab0032050d
0032040f00440239ffb90473004204730042047800500402001904ef0019
0473008b047300870473008701c7001901c7005702d90044029e0000026e
001401c700830493008306aa008406aa008406aa00870473ffa60473008b
046c00870473004406530044063f00570466004402aaffe402aaffe402aa
ffe402aa008502aa008502aa008502aaffe40455008a0455008a0400003f
01c7ffa20214ffb901c7ff7202cb00000239000f0239002404730019048c
0054046000880400001a05c7000604000018042800190400002804540028
045c004c045c007904000024040000500400002404000050063900630440
0088040f004904780050046b0088032e000004000008033b008804730048
040000240400005007b7004607400046080b004605b30024036f002405c0
0024061c0013054a0083050f008303e2001e043800630311006403110064
0146ffce01eb006401eb000001eb000002ea006403d90000029100000187
005a02d7005e01c7008001c7006c01c7008a02aa00fb02aa00fb02ca0032
02ca003204ac007004ac007004ac006504ac006502aa012102aa00de02aa
005902aa012102aa001d02aa005902aa00de023900b6023900b602aa00fb
02aa00fb02aa00a602aa00a602aa00a602aa001d02aaffe202aafffb0294
00000142006402b8003202a0000002ca0032031000960310009603100096
031000960310009602aa006202aa006202aa002802aa001d02aa00470457
009604570096045700960457009604570043045700430457004304570043
04570043031000430457002f0457002f0457002f0457002f0457002f0310
002f04570025045700250457002504570025045700250310002f0457001a
0457001a0457001a0457001a0457001a0310001a04570042045700420457
004204570042045700420310004204570096045700960457009604570096
0457004204570042045700420457004204570042031000420457002f0457
002f0457002f0457002f0457002f0310002f0457002f0457002f0457002f
0457002f0457002f0310002f045700260457002604570026045700260457
002603100026045700420457004204570042045700420457004203100042
045700960457009604570096045700960457004204570042045700420457
004204570042031000420457002604570026045700260457002604570026
031000260457002304570023045700230457002304570023031000230457
002f0457002f0457002f0457002f0457002f0310002f0457004b0457004b
0457004b0457004b0457004b0310004b0457009604570096045700960457
00960457004204570042045700420457004204570042031000420457001a
0457001a0457001a0457001a0457001a0310001a04570024045700240457
00240457002404570024031000240457002f0457002f0457002f0457002f
0457002f0310002f0457004e0457004e0457004e0457004e0457004e0310
004e045700960457009604570096045700960000fec10000fec60000fdac
0000fed80000ff920000fee90000ff4c0000fea00000fec40000ffce0000
ff660000fea00000fed80000fed80000ff970000ff980000ff990000fff4
0000ff420000ff420000ff440000ff5f0000fe870000ffec0000ffa60000
ff510000ff510000ff510000fec90000ff1c000000000000fee90000ff4c
0000ff930000ff2a0000ff560000ffce0000fe870000febb0000fec40000
fec40000fed80000fed80000feb30000fec90000fdad0000fec80000feb3
0000fec90000fdad0000fe160000fee60000ffa60000fe870000ff440000
feba0000ff230000ff9a0000fdac0000fe88000000000000feb00000ff98
0000fe930000ffa60000fe870000fe1c0000ff660000ff440000feb00000
feb00000feb00000ff030000ff520000fd1f0000ff530000ff530000ff53
0000feb50000feb50000ffc30000feae0000fedc0000fec70000fec80000
fedc0000fe1e0000ff420000ff510000feb70000feb002aa00de02aa0059
02aa00fa049a007004600000062e001407aa0000062e0014047b004c063f
005704cf0044063900630473004405c700700400005004e300a8033b0088
04ff0000043c0032060d000a049d0042072000a406aa0084056500630473
008b056400a40400000a0556006b0556006b04e0000504c5001905e5005f
046e004403b600140347002804cf00440495005b0400005001c7ffa20639
00600389004d03890050055600a205c000a10473004b047800870ab4006d
04fe00100639001404e70014079900bf05b500880558000104000006072e
00bf0590008806a10078057b007a086d00bf06f0008804d5006603ab001f
065f0039058200480639006004730044066d0009050c001a066d0009050c
001a08980063072c004406aa002004e6001c0987006d06d000500000fe37
0ab4006d04fe001005c7006604000050040700140000fea60000febc0000
ff980000ff980000fc2b0000fc4c05c000a10478008705400004042b0014
0556009e04730087055d00a40464008804d5004e03ab003204a900040380
000005ef002904490028070900a4052f0088091800a006f600880606003e
042b002305c700660400005004e3003003aa002607670031058700260555
0057042b004506e4000a0554000a06e4000a0554000a023900bf07630007
055afffb055700a1046800860540001204ab001805c700a4046b008805c7
00a4046b008805550057042b004506aa00980580008c02aa002e0556fffd
0473004a0556fffd0473004a08000001071d0044055600a20473004b0605
00630473005507630007055afffb04d5004e03ab003204d5004e045c004c
05c000a10478008705c000a1047800870639006304730044063900600473
004405c0004a0415002b0515000a040000210515000a040000210515000a
0400002105550057042b0045071500a805c0008b0540004a0473004607bf
004a0703004607a6006606860053054d00660413005307c3001207470018
084600a4070700880639006d0478005005f90030055300260000ff430000
ff290000ff6a0000ffac0000ff590000ff560000ff730000fed70000fe5c
0000005e0000ff560000ff56000000500000ff0b0000fe550000ff430000
ff5c0000ff750000ff640000ff560000ff0b0000ff8a0000ff560000ff43
0000ff430000ff640000ff75000000500000fddd0000ff750000ffad0000
fefe0000fefe0000fedf0000fedf0000ff580000ff200000fefe0556fffd
0473004a05560096047300860556009604730086055600960473008605c7
00660400005005c7009e0473004605c7009e0473004605c7009e04730046
05c7009e0473004605c7009e04730046055600a20473004b055600a20473
004b055600a20473004b055600a20473004b055600a20473004b04e300a8
023900130639006d0473004205c700a40473008705c700a40473008705c7
00a40473008705c700930473006805c700a4047300870239ffdf01c7ff92
023900200239000605560096040000880556009604000088055600960400
00880473009601c7007e0473009601c7ffb90473009601c7ffa504730096
01c7ffa306aa009806aa008706aa009806aa008706aa009806aa008705c7
009c0473008705c7009c0473008705c7009c0473008705c7009c04730087
063900630473004406390063047300440639006304730044063900630473
00440556009e047300870556009e0473008705c700a102aa008505c700a1
02aa008505c700a102aa005e05c700a102aa00260556005c0400003f0556
005c0400003f0556005c0400003f0556005c0400003f0556005c0400003f
04e300300239002404e300300239002404e300300239ffff04e300300239
000e05c700a10473008305c700a10473008305c700a10473008305c700a1
0473008305c700a104730083055600090400001a055600090400001a078d
001905c70006078d001905c70006055600090400000f055600090400000f
055600060400002104e300290400002804e300290400002804e300290400
0028047300870239000305c70006040000210473004a01c7008904a00048
04a0004804a0004804a0004804a0004804a0004804a0004804a000480556
fffd0556fffd068200130682001306820013068200130682005606820056
039100620391006203910062039100620391006203910062061e0000061e
0000076c0000076c0000076c0000076c00000473008b0473008b0473008b
0473008b0473008b0473008b0473008b0473008b068f0000068f0000081f
0000081f0000081f0000081f0000081ffff3081ffff301c7008101c70081
01c7ff9b01c7ff9b01c7ffeb01c7ffeb01c7ffa201c7ffa2030100000301
0000049100000491000004910000049100000491fff30491fff304730044
0473004404730044047300440473004404730044069d0000069d0000082d
0000082d000007c9000007c9000004600088046000880460008804600088
046000880460008804600088046000880682000007ae00000812000007ae
0006063f0057063f0057063f0057063f0057063f0057063f0057063f0057
063f0057065f0000065f000007ef000007ef0000078b0000078b0000078b
ffff078bffff04a0004804a0004803910062039100620473008b0473008b
01c7ffe601c7006804730044047300440460008804600088063f0057063f
005704a0004804a0004804a0004804a0004804a0004804a0004804a00048
04a000480556fffd0556fffd068200130682001306820013068200130682
0056068200560473008b0473008b0473008b0473008b0473008b0473008b
0473008b0473008b068f0000068f0000081f0000081f0000081f0000081f
0000081ffff3081ffff3063f0057063f0057063f0057063f0057063f0057
063f0057063f0057063f0057065f0000065f000007ef000007ef0000078b
0000078b0000078bffff078bffff04a0004804a0004804a0004804a00048
04a0004804a0004804a000480556fffd0556fffd0556fffd0556fffd0556
fffd02aa00e502aa00fd02aa00e502aa000602aa00060473008b0473008b
0473008b0473008b0473008b068200000682000006f3000006f3000005c7
00a402aa001302aa001302aa000601c7ffbb01c7ffab01c7ffca01c7ffca
01c7ff9301c7ff930239001a0239fff5036500000365000002aa001302aa
001302aa000604600088046000880460008804600088048d0083048d0083
0460008804600088055600060556000606e6000007180000061e000002aa
ffea02aaffea02aa0059063f0057063f0057063f0057063f0057063f0057
07650000069d000007270000065f000005fb006102aa00de02aa00e50473
000d05c7006605c7006606aa008705c70024095000a1078d00190556001f
04e30030080000290400003004c100660000ff530000ff530000ff530000
ff5301c7001901c7ffa2042b0005055600110574004602cbffa3057a0087
02f0ffc8057f000a057f000a02aa008402aa008402aa00c902aa00c902aa
00a002aa005902aaffaf02aa003a02aa0006023900b902aa00a902aa00a9
02aa00a902aa00a9032e001e032e001e02aa003a0000ff730000ffa50000
fed80000ff230000ff720000ff720000fee70000ffa50000ff530000ff53
0000ff530556009e0473008703f8001905fb0019071d0044044000190400
0050046900870469001903eb008703ab003201c700880361004104000088
033600100580008c04780087047300440400001304de004404de004404de
000d078d005003a800440473004404730044042b00840455001f0455001f
03aa00260460008804c6004405de004404c600440400001a05c700060400
002803ab0032036b003f04db001f02eb00880400001a04550088042b0084
05b4007a04ab001803a00000054f0000035100320351ffd1039800320348
00320348003203f80032036e0032015600690284002d0366003202d00032
0415003203710032036f003204180032030f003203590032039c00320376
0031036f003204fb000002fa003202fa00320304003204cc003203050064
0305003202f9003202f90032028c0032028c0032030400320142006402b6
006404950064030f00640305003202d50032030500320305003203060064
01c20032030f006403420032049500640292000003200000031500640292
0000030600320385003202bf00000142006401eb0064030f006402920000
0315006402920000030900320385003202bf0000077d00460a6600460383
00460a2f00460541ffba01e9003c045a00110000ff0d0000ff350000fece
0000feb70000fec90000ffcf0000ff4f0000ff9e0000feca02b3005f02b3
005f03e9004a03e9004a039affba0327ffba039affba0327ffba05ad0069
053d002d05fd009604dc005004e0003c05f6009b053f00280650002804ac
00720000000000000000000000000473fffc02aa005302d5ffce01a8ffba
01a8ffba01a8ffba01a8ffba0658001509c5004704000000080000000400
00000800000002ab000002000000015500000473000002390000019a0000
00ab00000000000005e5000305c7006606aa00980580008c074400830718
0046071800480556fffd05c70066040000140473000a04e300300400004f
0400002804a5001d000001020000ff420000febf0000ff3a0000ff53048d
000a05c7005105c7006605c70051045500a102eb00880000ff430000ffac
0000ffac02d2009600000000021affba0250001e0000ff3a0000ff5b0000
ff5f0000ff7e0000ff940000ff4a0000fe9c05b5003a05b5003a01f4ff96
01f4ff9605b5003a05b5003a01f4ffba01f4ffba05b5003a05b5003a01f4
ffba01f4ffba05b5003a05b5003a01f4ffba01f4ffba05b5003a05b5003a
01f4ffba01f4ffba05b5003a05b5003a01f4ffba01f4ffba05b5003a05b5
003a01f4ffba01f4ffba0481003604350036043dffba043dffba04810036
04350036043dffba043dffba02b3003202b3003202b3005f02b3005f03e9
004a03e9004a0692003e0692003e043fffba043fffba045a002a039a0036
0435ffba0327ffba045a002a039a00360435ffba0327ffba045a002a039a
00360435ffba0327ffba064f0027064f00270224ffba021affba064f0027
064f00270224ffba021affba067f0014077600140327ffba041effba067f
0014077600140327ffba041effba067f0014077600140327ffba041effba
02b4002302b400230327ffba0327ffba02b4002302b400230327ffba0327
ffba043500450435004501f4ffba01f4ffba043500450435004501f4ffba
01f4ffba043500450435004501f4ffba01f4ffba040d0047040d004701a8
ffba01a8ffba03e9004a03e9004a03e9004a03e9004a0692003e0692003e
043fffba043fffba0473ff93047300460239ffbf06aaffd50473ffb70473
ff9102aaffa402aaffa40400ffff0239ffb90400002804730089030b0064
047400480649002401c7001901c700190473001e0460001e048c000a0473
0086047300460239001305b400420400008801c7fffc06aa00870473008b
0473008702aafffb0400003f0318ffa20400001a0400000f040000280473
004a04730048047300460473004b03ab004903ab00320534005501c70088
0400001301c7ffa204730083045c004c0304006402d5003202c9003302fc
0032028c003201d5003201d5000003040032031100640142001901420064
0142006401420019022a0000014200640142000902330064049300640493
0064030fffc9030f0064030e0064030500320300003202b800320142ffca
01c20032030f001d031a00320306006402d400640292000002de003202de
003202de003202f4003202ea00320000febc0000febc0000ff730000fea9
023900b902fa003202f900320305003202a0000002f900320639006d0556
fffd0473000f05c7006602aa004104a0004804a0004804a0004804a00048
04a0004804a0004804a0004804a0004801c7ff9b01c7ffab01c7ff9b01c7
ffab01c7ff9b01c7ffbb01c7ff9b01c7ffbb046000880460008804600088
046000880460008804600088046000880460008801c7ffab01c7ffab01c7
ffbb01c7ffbb04600088046000880460008804600088045a005304ce004a
03a000130556001105c700290558000b055600a20473004b0400003301c7
ffa205e600630473004805c7000002aa000f055600060400002104000013
040000500400001301c700830455fffd02eb0001055600090400000f0556
00090400000f04d5005303ab00490540001204ab00180000fec60000fed4
0000fec60000fed40000fe5f0000fe5f0000ff720000ff730000fee7078b
000a03eb004c040000130473000a01c700150473fff40556001105c700a1
047300190239ff8b05c700a404730087055600960400008804e300290400
00280400003b049e00a403670088053000480000ff530000ffbc0000fefe
0000fefe0000fea40000fea401c7008805c900a505c7009c05c900a50000
fecd0000ff480000fec90000fece0000fec50000fed00000fed10000feee
0000fed60000fedc0000fdd90639005804730048078d001905c70006059f
00a40000feb905dc006304c60009084c001906ba0006023900b903800072
0187005a0187005a0400009904000099023900b0023900b0023900b002aa
0019000000460000003b000000310000005600000044000000560000004a
0000004904e30030047300500473005c0312003f045000480446003d0473
00310450003d047d00620427003f0473005604790054047300550319003b
0473003c047300560473003204730055047e0062042f004b04730053047b
005505c5006a05d3006305f800a6094a00a605f8009c0302003b054100a4
063900600472004601c7008903f80087020a00890473004e0250000e0478
00850473005c0473005c0302003b020a008901c700880471000004890098
04c3005c04e70098046f009804080098052f005c04f0009801ea00980373
00290489009803bc009805c7009804ec00980531005c046d00980531005c
04db0098046d004a0410002904dd0091046800080659001e046f0008046c
0008040e001f0691000006aa005c03bc003805310031046f009804e70014
04c3009004710000047100000471000004710000047100000471000004c3
005c046f0098046f0098046f0098046f009801eafff401ea008e01eaffb6
01eaffda04ec00980531005c0531005c0531005c0531005c0531005c04dd
009104dd009104dd009104dd0091046c0008047100000471000004710000
04c3005c04c3005c04c3005c04c3005c04e7009804e70014046f0098046f
0098046f0098046f0098046f0098052f005c052f005c052f005c052f005c
04f0009804f2002e01eaff9601eaffbd01eaffd401ea003e01ea00870543
0098037300290489009803bc009803bc009803bc009803bc009804ec0098
04ec009804ec009804f500980531005c0531005c0531005c04db009804db
009804db0098046d004a046d004a046d004a046d004a046d004a04100029
0410002904100029040e002904dd009104dd009104dd009104dd009104dd
009104dd00910659001e0659001e0659001e0659001e046c0008046c0008
046c0008040e001f040e001f040e001f0471000006910000053100310471
00000489009803ae009804710000046f0098040e001f04f000980531005c
01ea009804890098045a000205c7009804ec0098042f004c0531005c04e6
0098046d00980425006a04100029046c00080546004c046f00080543004c
0531005204710000046f009804f0009801ea008e0531005c046c00080531
005201eaffda046c0008046f009805af002903ae009804c7005c046d004a
01ea009801eaffda0373002906f4000f06b6009805da0029041600980463
002304e6009804710000048600980489009803ae00980469000f046f0098
06540023041f004604e5009804e50098041600980469000f05c7009804f0
00980531005c04e60098046d009804c3005c0410002904630023050d004c
046f000804dc0098047d004c06280098061e0098057c003c05e700980455
009804c6004606af009804db00120323009802aa002202aa006b02aa0019
02aa002102aa001702aa002202aa002e02aa004902aa002a02aa003302aa
002e02aa003302aa002205c5006a05c5006a05c5006a05c5006a05c5006a
05c5006a05c5006a05c5006a05c5006a05c5006a05c5006a05d3006305d3
006305d3006305d3006305d3006305d3006305d3006305d3006305d30063
05d3006305d3006305f800a605f800a605f800a605f800a605f8009c05f8
009c05f8009c05f8009c05f8009c05f8009c05f8009c05f8009c05f8009c
0302003b0302003b0302003b0302003b030200320302003b0302003b0302
003b0302003b0416ffac0302003b0302003b0302003b020a0089020a004e
0269008902a50089020a00070302003b0302003b0302003b0302003b0302
00320302003b0302003b0302003b054100a4047200460472004604720046
04720046047200460472004604720046047200460472004601c7ffa703f8
0087020a0089020a004e0269008902a50089020a00070250000e0250000e
0300000e0250000e0478008504780085047800850478008504a0005702aa
001702aa002202aa004902aa002a04ee001504ed009d04ed009d060b001a
04d5008505e3008502260099022600890226002c0226001e022600630226
00300226001b0226001d0226001d022600290226001e022600260226001d
02260008022600280c9600460e0c00460000ffba0ed200460000ff5b0000
ff910000ffb70000ff9b0481003604350036043dffba043dffba04810036
04350036043dffba043dffba0692003e0692003e043fffba043fffba03e9
004a03e9004a0481003604350036043dffba043dffba01a8ffc301d6ff5f
01a8ffe901d6ff85051b003204b5002401f4ffba01f4ffba051b003204b5
002401f4ffba01f4ffba051b003204b5002401f4ffba01f4ffba03750032
037500320375003203750032067f0045067f0045067f0045067f00450481
003604350036043dffba043dffba0692003e0692003e043fffba043fffba
0692003e0692003e043fffba043fffba04cf002d04cf002d0327ffba0327
ffba04b4ffe00500ffe00496ffe804e4ffe8075c003205da0032070e0032
051300390bb700000000fe2c0000fffc0000006b000000730000006b051b
003204b5002401f4ffba01f4ffba067f0014077600140327ffba041effba
067f0014077600140327ffba041effba051b003204b5002401f4ffba01f4
ffba051b003204b5002401f4ffba01f4ffba051b003204b5002401f4ffba
01f4ffba0000fff5049e00a403cd000a04e3003003aa002605c000a104ac
0087055600960473005a0a6600440473007e0556001d07ae001206150018
064e009e05be008707a9000906da001f0556009604000086088c000d0713
0018090e00a406ce008805c700a40455008805a300a2046f008702390013
0239001304740048062200bf032f000e04ba005c0474004905590014049b
000a06aa00980556fffd05dc00a50590004b02aaffe50473004403eb004c
0146ffce029200000556005c04e3002902390069063c00aa0b56ffc2084a
ff120b0c00320ed2004401a8ffba01a8ffba01a8ffba01d6000201a80032
01a8004601a8ffba01a8001a0251003a01a8002901a8004601a8ffba01a8
004801a8ffba01a8002901a8ffba01a8004601a8ffba01a8006e01a8ffba
01f4009e01f4001001f4001b01f4001001f4fff9022e008d01f4006b0199
004602bf003202bf00320473000f02ea001302ea00130427fff70427fff7
051b0032051b0032051b0032051b0032051b0032051b0032051b0032051b
0032048000240480002403e5ffba048000240480002403e5ffba05b5003a
05b5003a01f4ffba01f4ffba0481003604350036043dffba043dffba04a7
ffba04a7ffba04a7ffba04a7ffba064f0027064f00270224ffba021affba
04a7004604a700460224ffba021affba040d0047040d004701a8ffba01a8
ffba02b4002302b400230327ffba0327ffba051b003204b5002401f4ffba
01f4ffba051b003204b5002401f4ffba01f4ffba03b7004a03b7004a0375
003203750032036b0046036b00460000ff1e0000ff480000ff1e0000fee7
0000ff4f0000fef90000ffb50000ff520000ff470000ffb50000ff520000
ff470000ff000000fea60000ff000000ff230000ff240000ff570000ff57
0000ff920000ff920000ff920000ff920000ff2f0000fed70000ff340000
ff31045a005304ce004a0000ffac033100190411002d04d1009605240028
0000ffac0000ff2a028d00ab028d00a00444003c043d003c0444003c043d
003c0444003c043d003c0445003c0444003c043d003c04a70046028d00ab
0327002202300014017a002e0000ff760658001505ea00a505cc00a505ba
004605be004605cc00a505ac009104c800a505ca00a4067400a405ba0046
054500a5043900a5076500a50622009b0590009b04ed003c05a6008a05be
0046059a009b060900a505bb009105aaffec0599008705cc00a505980087
0657003c05e8009b061d00a505cc00a5059600460547005c056d00a5056b
0069042000a506180050057d00380642006406190046023100b601c7006c
015bff79019affa1021f001f01daffb4041c004206a900820468008704a3
004804a90087046d00870467004803ef0087046800870557008704a30048
0468008701c2008706ad008704570048046d008704680087042f0046046d
00870478008e0468008201c2ffa3046dffc403a600060468008702c60010
06a900820423005f04830087046800820468008206a60082046800870471
00420327008706a600820467fff80470004605f3003c05b40087023900b9
029800220802006c0802006c05d0004608d5008208d5008208d0008208d5
00820b1500820473001c08000000000000000000ff4d05b5003a05b5003a
01f4ffba01f4ffba015e009302b3005f02b3005f08c9003e08c9003e06c5
ffba06c5ffba067f0014077600140327ffba041effba0242003a0193003a
03e9004a03e9004a0000ffce0400003705c7ffc0046bffa30aa30000088e
000005550014048500000540001204ab001806a30000064a004c04460013
0606001306060013044b001305f2003f065b008700>
<000000000000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c000000fe000001b6000001b6
000001b6000002440000029a000002e8000002e80000054c000006860000
091000000b8800000dde00001048000012b8000012b80000161200001612
000016120000161200001612000016120000161200001612000016120000
161200001612000017a80000195a00001a7600001a7600001a7600001a76
00001bde00001bde00001e6a00001f2c00001f2c00001f2c00001f2c0000
1f2c00001f2c00001f2c00001f2c00002068000020680000206800002068
000020680000206800002068000020680000206800002068000020680000
20680000206800002430000026a00000295a00002bcc00002e4e00002ff4
0000329e0000329e000034ce000034ce000034ce0000366800003a400000
3c6e00003ec4000040fa000040fa0000423e000046ec000048a600004aac
00004d4200004d4200004d42000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800005068000050680000506800005068000050680000506800005068
000050680000506800005068000050680000506800005068000050680000
506800010000108d02b5003c00ca000700020010004000860000051705ec
000500020000003a02be0000000300000000021a00000000000300000001
000a021a0000000300000002000e02240000000300000003004402320000
000300000004000a021a0000000300000005001802760000000300000006
000e028e00000003000000070064029c0000000300000008003003000000
000300000009008a0330000000030000000d0e0603ba0001000000000000
010d11c00001000000000001000512cd0001000000000002000712d20001
000000000003002212d90001000000000004000512cd0001000000000005
000c12fb00010000000000060007130700010000000000070031130e0001
0000000000080018133f000100000000000900451357000100000000000d
0703139c0003000104030002000c1a9f000300010405000200101aab0003
000104060002000c1abb000300010407000200101ac70003000104080002
00101ad70003000104090000021e1ae70003000104090001000a021a0003
000104090002000e02240003000104090003004402320003000104090004
000a021a0003000104090005001802760003000104090006000e028e0003
00010409000700621d050003000104090008003003000003000104090009
008a0330000300010409000d0e181d6700030001040a0002000c1a9f0003
0001040b000200102b7f00030001040c0002000c1a9f00030001040e0002
000c2b8f0003000104100002000e2b9b000300010413000200122ba90003
000104140002000c1a9f000300010415000200102bbb0003000104160002
000c1a9f0003000104190002000e2bcb00030001041b000200102bd90003
0001041d0002000c1a9f00030001041f0002000c1a9f0003000104240002
000e2be900030001042a0002000e2bf700030001042d0002000e2c050003
0001080a0002000c1a9f0003000108160002000c1a9f000300010c0a0002
000c1a9f000300010c0c0002000c1a9f00a9002000320030003100350020
0054006800650020004d006f006e006f007400790070006500200043006f
00720070006f0072006100740069006f006e002e00200041006c006c0020
005200690067006800740073002000520065007300650072007600650064
002e0020000d000d0048006500620072006500770020004f00700065006e
00540079007000650020004c00610079006f007500740020006c006f0067
0069006300200063006f0070007900720069006700680074002000a90020
00320030003000330020002600200032003000300037002c002000520061
006c00700068002000480061006e0063006f0063006b002000260020004a
006f0068006e00200048007500640073006f006e002e0020005400680069
00730020006c00610079006f007500740020006c006f0067006900630020
0066006f00720020004200690062006c006900630061006c002000480065
00620072006500770020006900730020006f00700065006e00200073006f
007500720063006500200073006f00660074007700610072006500200075
006e00640065007200200074006800650020004d004900540020004c0069
00630065006e00730065003b002000730065006500200065006d00620065
00640064006500640020006c006900630065006e00730065002000640065
0073006300720069007000740069006f006e00200066006f007200200064
0065007400610069006c0073002e0041007200690061006c005200650067
0075006c00610072004d006f006e006f0074007900700065003a00410072
00690061006c00200052006500670075006c0061007200200028004d0069
00630072006f0073006f00660074002900560065007200730069006f006e
00200036002e003900300041007200690061006c004d0054004100720069
0061006c002000200069007300200061002000740072006100640065006d
00610072006b0020006f006600200054006800650020004d006f006e006f
007400790070006500200043006f00720070006f0072006100740069006f
006e002e0054006800650020004d006f006e006f00740079007000650020
0043006f00720070006f0072006100740069006f006e004d006f006e006f
007400790070006500200054007900700065002000440072006100770069
006e00670020004f006600660069006300650020002d00200052006f0062
0069006e0020004e006900630068006f006c00610073002c002000500061
0074007200690063006900610020005300610075006e0064006500720073
00200031003900380032004d006900630072006f0073006f006600740020
0073007500700070006c00690065006400200066006f006e0074002e0020
0059006f00750020006d0061007900200075007300650020007400680069
007300200066006f006e007400200074006f002000630072006500610074
0065002c00200064006900730070006c00610079002c00200061006e0064
0020007000720069006e007400200063006f006e00740065006e00740020
006100730020007000650072006d00690074007400650064002000620079
00200074006800650020006c006900630065006e00730065002000740065
0072006d00730020006f00720020007400650072006d00730020006f0066
0020007500730065002c0020006f006600200074006800650020004d0069
00630072006f0073006f00660074002000700072006f0064007500630074
002c00200073006500720076006900630065002c0020006f007200200063
006f006e00740065006e007400200069006e002000770068006900630068
0020007400680069007300200066006f006e007400200077006100730020
0069006e0063006c0075006400650064002e00200059006f00750020006d
006100790020006f006e006c0079002000280069002900200065006d0062
006500640020007400680069007300200066006f006e007400200069006e
00200063006f006e00740065006e00740020006100730020007000650072
006d00690074007400650064002000620079002000740068006500200065
006d00620065006400640069006e00670020007200650073007400720069
006300740069006f006e007300200069006e0063006c0075006400650064
00200069006e0020007400680069007300200066006f006e0074003b0020
0061006e006400200028006900690029002000740065006d0070006f0072
006100720069006c007900200064006f0077006e006c006f006100640020
007400680069007300200066006f006e007400200074006f002000610020
007000720069006e0074006500720020006f00720020006f007400680065
00720020006f007500740070007500740020006400650076006900630065
00200074006f002000680065006c00700020007000720069006e00740020
0063006f006e00740065006e0074002e00200041006e00790020006f0074
0068006500720020007500730065002000690073002000700072006f0068
006900620069007400650064002e000d000d00540068006500200066006f
006c006c006f00770069006e00670020006c006900630065006e00730065
002c0020006200610073006500640020006f006e00200074006800650020
004d004900540020006c006900630065006e007300650020002800680074
00740070003a002f002f0065006e002e00770069006b0069007000650064
00690061002e006f00720067002f00770069006b0069002f004d00490054
005f004c006900630065006e007300650029002c0020006100700070006c
00690065007300200074006f00200074006800650020004f00700065006e
00540079007000650020004c00610079006f007500740020006c006f0067
0069006300200066006f00720020004200690062006c006900630061006c
00200048006500620072006500770020201c004c00610079006f00750074
0020004c006f006700690063201d0020006100730020006a006f0069006e
0074006c007900200064006500760065006c006f00700065006400200062
0079002000520061006c00700068002000480061006e0063006f0063006b
00200061006e00640020004a006f0068006e00200048007500640073006f
006e002e0020000d000d005000650072006d0069007300730069006f006e
00200069007300200068006500720065006200790020006700720061006e
007400650064002c002000660072006500650020006f0066002000630068
0061007200670065002c00200074006f00200061006e0079002000700065
00720073006f006e0020006f0062007400610069006e0069006e00670020
006100200063006f007000790020006f006600200074006800650020004f
00700065006e00540079007000650020004c00610079006f007500740020
006c006f00670069006300200066006f00720020004200690062006c0069
00630061006c002000480065006200720065007700200061006e00640020
006100730073006f00630069006100740065006400200064006f00630075
006d0065006e0074006100740069006f006e002000660069006c00650073
002000280074006800650020201c004c00610079006f007500740020004c
006f00670069006300200053006f006600740077006100720065201d0029
002c00200074006f0020006400650061006c00200069006e002000740068
00650020004c00610079006f007500740020004c006f0067006900630020
0053006f00660074007700610072006500200077006900740068006f0075
00740020007200650073007400720069006300740069006f006e002c0020
0069006e0063006c007500640069006e006700200077006900740068006f
007500740020006c0069006d00690074006100740069006f006e00200074
00680065002000720069006700680074007300200074006f002000750073
0065002c00200063006f00700079002c0020006d006f0064006900660079
002c0020006d0065007200670065002c0020007000750062006c00690073
0068002c00200064006900730074007200690062007500740065002c0020
007300750062006c006900630065006e00730065002c00200061006e0064
002f006f0072002000730065006c006c00200063006f0070006900650073
0020006f006600200074006800650020004c00610079006f007500740020
004c006f00670069006300200053006f006600740077006100720065002c
00200061006e006400200074006f0020007000650072006d006900740020
0070006500720073006f006e007300200074006f002000770068006f006d
00200074006800650020004c00610079006f007500740020004c006f0067
0069006300200053006f0066007400770061007200650020006900730020
006600750072006e0069007300680065006400200074006f00200064006f
00200073006f002c0020007300750062006a00650063007400200074006f
002000740068006500200066006f006c006c006f00770069006e00670020
0063006f006e0064006900740069006f006e0073003a000d000d00540068
0065002000610062006f0076006500200063006f00700079007200690067
006800740020006e006f007400690063006500200061006e006400200074
0068006900730020007000650072006d0069007300730069006f006e0020
006e006f00740069006300650020007300680061006c006c002000620065
00200069006e0063006c007500640065006400200069006e00200061006c
006c00200063006f00700069006500730020006f00720020007300750062
007300740061006e007400690061006c00200070006f007200740069006f
006e00730020006f006600200074006800650020004c00610079006f0075
00740020004c006f00670069006300200053006f00660074007700610072
0065002e000d000d00540048004500200053004f00460054005700410052
0045002000490053002000500052004f0056004900440045004400200027
004100530020004900530027002c00200057004900540048004f00550054
002000570041005200520041004e005400590020004f004600200041004e
00590020004b0049004e0044002c00200045005800500052004500530053
0020004f005200200049004d0050004c004900450044002c00200049004e
0043004c005500440049004e004700200042005500540020004e004f0054
0020004c0049004d004900540045004400200054004f0020005400480045
002000570041005200520041004e00540049004500530020004f00460020
004d00450052004300480041004e0054004100420049004c004900540059
002c0020004600490054004e00450053005300200046004f005200200041
00200050004100520054004900430055004c004100520020005000550052
0050004f0053004500200041004e00440020004e004f004e0049004e0046
00520049004e00470045004d0045004e0054002e00200049004e0020004e
004f0020004500560045004e00540020005300480041004c004c00200054
0048004500200041005500540048004f005200530020004f005200200043
004f005000590052004900470048005400200048004f004c004400450052
00530020004200450020004c004900410042004c004500200046004f0052
00200041004e005900200043004c00410049004d002c002000440041004d
00410047004500530020004f00520020004f00540048004500520020004c
0049004100420049004c004900540059002c002000570048004500540048
0045005200200049004e00200041004e00200041004300540049004f004e
0020004f004600200043004f004e00540052004100430054002c00200054
004f005200540020004f00520020004f0054004800450052005700490053
0045002c002000410052004900530049004e0047002000460052004f004d
002c0020004f005500540020004f00460020004f005200200049004e0020
0043004f004e004e0045004300540049004f004e00200057004900540048
002000540048004500200053004f0046005400570041005200450020004f
0052002000540048004500200055005300450020004f00520020004f0054
0048004500520020004400450041004c0049004e0047005300200049004e
002000540048004500200053004f004600540057004100520045002e000d
a9203230313520546865204d6f6e6f7479706520436f72706f726174696f
6e2e20416c6c205269676874732052657365727665642e200d0d48656272
6577204f70656e54797065204c61796f7574206c6f67696320636f707972
6967687420a92032303033202620323030372c2052616c70682048616e63
6f636b2026204a6f686e20487564736f6e2e2054686973206c61796f7574
206c6f67696320666f72204269626c6963616c2048656272657720697320
6f70656e20736f7572636520736f66747761726520756e64657220746865
204d4954204c6963656e73653b2073656520656d626564646564206c6963
656e7365206465736372697074696f6e20666f722064657461696c732e41
7269616c526567756c61724d6f6e6f747970653a417269616c2052656775
6c617220284d6963726f736f66742956657273696f6e20362e3930417269
616c4d54417269616c20697320612074726164656d61726b206f66205468
65204d6f6e6f7479706520436f72706f726174696f6e2e546865204d6f6e
6f7479706520436f72706f726174696f6e4d6f6e6f747970652054797065
2044726177696e67204f6666696365202d20526f62696e204e6963686f6c
61732c205061747269636961205361756e6465727320313938324d696372
6f736f667420737570706c69656420666f6e742e20596f75206d61792075
7365207468697320666f6e7420746f206372656174652c20646973706c61
792c20616e64207072696e7420636f6e74656e74206173207065726d6974
74656420627920746865206c6963656e7365207465726d73206f72207465
726d73206f66207573652c206f6620746865204d6963726f736f66742070
726f647563742c20736572766963652c206f7220636f6e74656e7420696e
207768696368207468697320666f6e742077617320696e636c756465642e
20596f75206d6179206f6e6c792028692920656d62656420746869732066
6f6e7420696e20636f6e74656e74206173207065726d6974746564206279
2074686520656d62656464696e67207265737472696374696f6e7320696e
636c7564656420696e207468697320666f6e743b20616e64202869692920
74656d706f726172696c7920646f776e6c6f6164207468697320666f6e74
20746f2061207072696e746572206f72206f74686572206f757470757420
64657669636520746f2068656c70207072696e7420636f6e74656e742e20
416e79206f74686572207573652069732070726f686962697465642e0d0d
54686520666f6c6c6f77696e67206c6963656e73652c206261736564206f
6e20746865204d4954206c6963656e73652028687474703a2f2f656e2e77
696b6970656469612e6f72672f77696b692f4d49545f4c6963656e736529
2c206170706c69657320746f20746865204f70656e54797065204c61796f
7574206c6f67696320666f72204269626c6963616c2048656272657720d2
4c61796f7574204c6f676963d3206173206a6f696e746c7920646576656c
6f7065642062792052616c70682048616e636f636b20616e64204a6f686e
20487564736f6e2e200d0d5065726d697373696f6e206973206865726562
79206772616e7465642c2066726565206f66206368617267652c20746f20
616e7920706572736f6e206f627461696e696e67206120636f7079206f66
20746865204f70656e54797065204c61796f7574206c6f67696320666f72
204269626c6963616c2048656272657720616e64206173736f6369617465
6420646f63756d656e746174696f6e2066696c6573202874686520d24c61
796f7574204c6f67696320536f667477617265d3292c20746f206465616c
20696e20746865204c61796f7574204c6f67696320536f66747761726520
776974686f7574207265737472696374696f6e2c20696e636c7564696e67
20776974686f7574206c696d69746174696f6e2074686520726967687473
20746f207573652c20636f70792c206d6f646966792c206d657267652c20
7075626c6973682c20646973747269627574652c207375626c6963656e73
652c20616e642f6f722073656c6c20636f70696573206f6620746865204c
61796f7574204c6f67696320536f6674776172652c20616e6420746f2070
65726d697420706572736f6e7320746f2077686f6d20746865204c61796f
7574204c6f67696320536f667477617265206973206675726e6973686564
20746f20646f20736f2c207375626a65637420746f2074686520666f6c6c
6f77696e6720636f6e646974696f6e733a0d0d5468652061626f76652063
6f70797269676874206e6f7469636520616e642074686973207065726d69
7373696f6e206e6f74696365207368616c6c20626520696e636c75646564
20696e20616c6c20636f70696573206f72207375627374616e7469616c20
706f7274696f6e73206f6620746865204c61796f7574204c6f6769632053
6f6674776172652e0d0d54484520534f4654574152452049532050524f56
4944454420274153204953272c20574954484f55542057415252414e5459
204f4620414e59204b494e442c2045585052455353204f5220494d504c49
45442c20494e434c5544494e4720425554204e4f54204c494d4954454420
544f205448452057415252414e54494553204f46204d45524348414e5441
42494c4954592c204649544e45535320464f52204120504152544943554c
415220505552504f534520414e44204e4f4e494e4652494e47454d454e54
2e20494e204e4f204556454e54205348414c4c2054484520415554484f52
53204f5220434f5059524947485420484f4c44455253204245204c494142
4c4520464f5220414e5920434c41494d2c2044414d41474553204f52204f
54484552204c494142494c4954592c205748455448455220494e20414e20
414354494f4e204f4620434f4e54524143542c20544f5254204f52204f54
484552574953452c2041524953494e472046524f4d2c204f5554204f4620
4f5220494e20434f4e4e454354494f4e20574954482054484520534f4654
57415245204f522054484520555345204f52204f54484552204445414c49
4e475320494e2054484520534f4654574152452e0d004e006f0072006d00
61006c006f00620079010d0065006a006e00e9006e006f0072006d006100
6c005300740061006e0064006100720064039a03b103bd03bf03bd03b903
ba03ac00a90020003200300031003500200054006800650020004d006f00
6e006f007400790070006500200043006f00720070006f00720061007400
69006f006e002e00200041006c006c002000520069006700680074007300
2000520065007300650072007600650064002e0020000d000a000d000a00
48006500620072006500770020004f00700065006e005400790070006500
20004c00610079006f007500740020006c006f0067006900630020006300
6f0070007900720069006700680074002000a90020003200300030003300
20002600200032003000300037002c002000520061006c00700068002000
480061006e0063006f0063006b002000260020004a006f0068006e002000
48007500640073006f006e002e002000540068006900730020006c006100
79006f007500740020006c006f00670069006300200066006f0072002000
4200690062006c006900630061006c002000480065006200720065007700
20006900730020006f00700065006e00200073006f007500720063006500
200073006f00660074007700610072006500200075006e00640065007200
200074006800650020004d004900540020004c006900630065006e007300
65003b002000730065006500200065006d00620065006400640065006400
20006c006900630065006e00730065002000640065007300630072006900
7000740069006f006e00200066006f007200200064006500740061006900
6c0073002e0041007200690061006c002000690073002000610020007400
72006100640065006d00610072006b0020006f0066002000540068006500
20004d006f006e006f007400790070006500200043006f00720070006f00
72006100740069006f006e002e004d006900630072006f0073006f006600
7400200073007500700070006c00690065006400200066006f006e007400
2e00200059006f00750020006d0061007900200075007300650020007400
680069007300200066006f006e007400200074006f002000630072006500
6100740065002c00200064006900730070006c00610079002c0020006100
6e00640020007000720069006e007400200063006f006e00740065006e00
740020006100730020007000650072006d00690074007400650064002000
62007900200074006800650020006c006900630065006e00730065002000
7400650072006d00730020006f00720020007400650072006d0073002000
6f00660020007500730065002c0020006f00660020007400680065002000
4d006900630072006f0073006f00660074002000700072006f0064007500
630074002c00200073006500720076006900630065002c0020006f007200
200063006f006e00740065006e007400200069006e002000770068006900
6300680020007400680069007300200066006f006e007400200077006100
7300200069006e0063006c0075006400650064002e00200059006f007500
20006d006100790020006f006e006c007900200028006900290020006500
6d0062006500640020007400680069007300200066006f006e0074002000
69006e00200063006f006e00740065006e00740020006100730020007000
650072006d00690074007400650064002000620079002000740068006500
200065006d00620065006400640069006e00670020007200650073007400
720069006300740069006f006e007300200069006e0063006c0075006400
65006400200069006e0020007400680069007300200066006f006e007400
3b00200061006e006400200028006900690029002000740065006d007000
6f0072006100720069006c007900200064006f0077006e006c006f006100
640020007400680069007300200066006f006e007400200074006f002000
610020007000720069006e0074006500720020006f00720020006f007400
68006500720020006f007500740070007500740020006400650076006900
63006500200074006f002000680065006c00700020007000720069006e00
7400200063006f006e00740065006e0074002e00200041006e0079002000
6f0074006800650072002000750073006500200069007300200070007200
6f0068006900620069007400650064002e000d000a000d000a0054006800
6500200066006f006c006c006f00770069006e00670020006c0069006300
65006e00730065002c0020006200610073006500640020006f006e002000
74006800650020004d004900540020006c006900630065006e0073006500
2000280068007400740070003a002f002f0065006e002e00770069006b00
6900700065006400690061002e006f00720067002f00770069006b006900
2f004d00490054005f004c006900630065006e007300650029002c002000
6100700070006c00690065007300200074006f0020007400680065002000
4f00700065006e00540079007000650020004c00610079006f0075007400
20006c006f00670069006300200066006f00720020004200690062006c00
6900630061006c00200048006500620072006500770020201c004c006100
79006f007500740020004c006f006700690063201d002000610073002000
6a006f0069006e0074006c007900200064006500760065006c006f007000
650064002000620079002000520061006c00700068002000480061006e00
63006f0063006b00200061006e00640020004a006f0068006e0020004800
7500640073006f006e002e0020000d000a000d000a005000650072006d00
69007300730069006f006e00200069007300200068006500720065006200
790020006700720061006e007400650064002c0020006600720065006500
20006f00660020006300680061007200670065002c00200074006f002000
61006e007900200070006500720073006f006e0020006f00620074006100
69006e0069006e00670020006100200063006f007000790020006f006600
200074006800650020004f00700065006e00540079007000650020004c00
610079006f007500740020006c006f00670069006300200066006f007200
20004200690062006c006900630061006c00200048006500620072006500
7700200061006e00640020006100730073006f0063006900610074006500
6400200064006f00630075006d0065006e0074006100740069006f006e00
2000660069006c00650073002000280074006800650020201c004c006100
79006f007500740020004c006f00670069006300200053006f0066007400
77006100720065201d0029002c00200074006f0020006400650061006c00
200069006e00200074006800650020004c00610079006f00750074002000
4c006f00670069006300200053006f006600740077006100720065002000
77006900740068006f007500740020007200650073007400720069006300
740069006f006e002c00200069006e0063006c007500640069006e006700
200077006900740068006f007500740020006c0069006d00690074006100
740069006f006e0020007400680065002000720069006700680074007300
200074006f0020007500730065002c00200063006f00700079002c002000
6d006f0064006900660079002c0020006d0065007200670065002c002000
7000750062006c006900730068002c002000640069007300740072006900
62007500740065002c0020007300750062006c006900630065006e007300
65002c00200061006e0064002f006f0072002000730065006c006c002000
63006f00700069006500730020006f006600200074006800650020004c00
610079006f007500740020004c006f00670069006300200053006f006600
740077006100720065002c00200061006e006400200074006f0020007000
650072006d0069007400200070006500720073006f006e00730020007400
6f002000770068006f006d00200074006800650020004c00610079006f00
7500740020004c006f00670069006300200053006f006600740077006100
7200650020006900730020006600750072006e0069007300680065006400
200074006f00200064006f00200073006f002c0020007300750062006a00
650063007400200074006f002000740068006500200066006f006c006c00
6f00770069006e006700200063006f006e0064006900740069006f006e00
73003a000d000a000d000a005400680065002000610062006f0076006500
200063006f00700079007200690067006800740020006e006f0074006900
63006500200061006e006400200074006800690073002000700065007200
6d0069007300730069006f006e0020006e006f0074006900630065002000
7300680061006c006c00200062006500200069006e0063006c0075006400
65006400200069006e00200061006c006c00200063006f00700069006500
730020006f00720020007300750062007300740061006e00740069006100
6c00200070006f007200740069006f006e00730020006f00660020007400
6800650020004c00610079006f007500740020004c006f00670069006300
200053006f006600740077006100720065002e000d000a000d000a005400
48004500200053004f004600540057004100520045002000490053002000
500052004f00560049004400450044002000270041005300200049005300
27002c00200057004900540048004f005500540020005700410052005200
41004e005400590020004f004600200041004e00590020004b0049004e00
44002c002000450058005000520045005300530020004f00520020004900
4d0050004c004900450044002c00200049004e0043004c00550044004900
4e004700200042005500540020004e004f00540020004c0049004d004900
540045004400200054004f00200054004800450020005700410052005200
41004e00540049004500530020004f00460020004d004500520043004800
41004e0054004100420049004c004900540059002c002000460049005400
4e00450053005300200046004f0052002000410020005000410052005400
4900430055004c0041005200200050005500520050004f00530045002000
41004e00440020004e004f004e0049004e004600520049004e0047004500
4d0045004e0054002e00200049004e0020004e004f002000450056004500
4e00540020005300480041004c004c002000540048004500200041005500
540048004f005200530020004f005200200043004f005000590052004900
470048005400200048004f004c0044004500520053002000420045002000
4c004900410042004c004500200046004f005200200041004e0059002000
43004c00410049004d002c002000440041004d0041004700450053002000
4f00520020004f00540048004500520020004c0049004100420049004c00
4900540059002c0020005700480045005400480045005200200049004e00
200041004e00200041004300540049004f004e0020004f00460020004300
4f004e00540052004100430054002c00200054004f005200540020004f00
520020004f00540048004500520057004900530045002c00200041005200
4900530049004e0047002000460052004f004d002c0020004f0055005400
20004f00460020004f005200200049004e00200043004f004e004e004500
4300540049004f004e002000570049005400480020005400480045002000
53004f0046005400570041005200450020004f0052002000540048004500
200055005300450020004f00520020004f00540048004500520020004400
450041004c0049004e0047005300200049004e0020005400480045002000
53004f004600540057004100520045002e000d000a004e006f0072006d00
610061006c0069004e006f0072006d00e1006c004e006f0072006d006100
6c0065005300740061006e00640061006100720064004e006f0072006d00
61006c006e0079041e0431044b0447043d044b0439004e006f0072006d00
e1006c006e0065004e0061007600610064006e006f0074006801b001a103
00006e00670041007200720075006e0074006100000000>
<b15485410b032c032c032c0222001d001f032b032a003c001f032ab2061d
1fb80328b326181fd0bc032900e0032900020329b22b1d1fb90327031db2
3b1f40b80323b31215320f412d03200001002f0320000100200320006f03
2000af032000bf03200004005f031e00010010031e007f031e0080031e00
af031e00bf031e00d0031e00060000031e0010031e0020031e006f031e00
9f031e00e0031e0006031d031cb2201f1041270319007f03190002000f03
1700ef031700ff03170003001f0317002f0317004f0317005f0317008f03
17009f03170006000f0317005f0317006f0317007f031700bf031700f003
17000600400317b2923340b80317b28b3340b80317b36a6c3240b80317b2
613340b80317b35c5d3240b80317b357593240b80317b34d513240b80317
b344493240b80317b23a3340b80317b331343240b80317b32e423240b803
17b3272c3240b80317b312253280b80317b30a0d32c04116031600d00316
000200700316000102c4000f0101001f00a0031500b0031500020306000f
0101001f00400312b32426329fbf03040001030203010064001fffc00301
b20d1132410a02ff02ef0012001f02ee02ed0064001fffc002edb30e1132
9f414a02e200af02e200bf02e2000302e202e202e102e1007f02e0000100
1002e0003f02e0009f02e000bf02e000cf02e000ef02e0000602e002e002
df02df02de02de000f02dd002f02dd003f02dd005f02dd009f02dd00bf02
dd00ef02dd000702dd02dd001002dc0001000002dc0001001002dc003f02
dc000202dc02dc001002db000102db02db000f02da000102da02daffc002
d3b2373932b9ffc002d3b22b2f32b9ffc002d3b21f2532b9ffc002d3b217
1b32b9ffc002d3b2121632b802d2b2f9291fb90326031cb23b1f40bb0322
003e00330322b225311fb80318b23c691fb802e3b3202b1fa0413002d400
b002d40002000002d4001002d4002002d4005002d4006002d4007002d400
06006002d6007002d6008002d6009002d600a002d600b002d60006000002
d6001002d6002002ca002002cc002002d6003002d6004002d6005002d600
0802d0b2202b1fb802cfb226421f411602ce02c70017001f02cd02c80017
001f02cc02c60017001f02cb02c50017001f02c902c5001e001f02ca02c6
b21e1f00410b02c6000002c7001002c6001002c7002f02c5000502c1b324
121fff411102bf0001001f02bf002f02bf003f02bf004f02bf005f02bf00
8f02bf000602bf0222b2641f12410b02bb00ca0800001f02b200e9080000
1f02a600a20800406a1f4026434932402043493240263a3d3240203a3d32
9f209f26024026969932402096993240268e923240208e92324026848c32
4020848c3240267a813240207a813240266c763240206c76324026646a32
4020646a3240265a5f3240205a5f3240264f543240204f5432b8029eb724
271f374f6b0120410f027700300277004002770050027700040277027702
7700f90400001f029bb22a2a1fb8029a402b292a1f80ba0180bc01805201
80a201806501807e01808101803c01805e01802b01801c01801e01804001
80bb0138000100800140b40180400180bb013800010080013940180180ca
0180ad018073018026018025018024018020013740b80221b2493340b802
21b2453340b80221b341423240b80221b33d3e320f410f0221003f022100
7f0221000300bf022100cf022100ff0221000300400221b320223240b802
21b3191e3240b80222b32a3f3240b80221b32e3a326f414a02c3007f02c3
008f02c300df02c30004002f02c3006002c300cf02c30003000f02c3003f
02c3005f02c300c002c300ef02c300ff02c3000600df02220001008f0222
0001000f0222002f0222003f0222005f0222007f022200ef0222000600bf
022100ef02210002006f0221007f022100af02210003000f0221002f0221
003f0221004f0221000402c302c30222022202210221401d101c102b1048
038f1c010f1e014f1eff1e023700161600000012110811b8010db6f70df8
f70d00094109028e028f001d001f0290028f001d001f028fb2f91d1fb801
98b226bb1f41150197001e0401001f013900260125001f01380073040100
1f0135001c0801001f0134001c02ab001f0132b21c561fb8010fb2262c1f
ba010e001e0401b61ff91ce41fe91cb80201b61fe81cbb1fd720b80401b2
1fd51cb802abb61fd41c891fc92fb80801b21fbc26b80101b21fba20b802
01b61fb91c381fadcab80401b21f8126b8019ab21f7e26b8019ab61f7d1c
471f6b1cb80401b21f6526b8019ab21f5e73b80401400f1f52265a1f481c
891f441c621f4073b80801b61f3f1c5e1f3c26b8019ab21f351cb80401b6
1f301cbb1f2b1cb80401b61f2a1c561f291cb80101b21f231eb80401b41f
35555537b80168402c07960758074f07360732072c0721071f071d071b07
1408120810080e080c080a080808060804080208000814b8ffe0402b0000
010014061000000100060400000100041000000100100200000100020000
0001000002010802004a00b013034b024b5342014bb0c063004b6220b0f6
5323b8010a515ab005234201b0124b004b5442b0382b4bb807ff52b0372b
4bb007505b58b101018e59b0382bb00288b801005458b801ffb101018e85
1bb0124358b900010111858d1bb900010128858d5959001816763f183f12
3e113946443e113946443e113946443e113946443e11394660443e113946
60442b2b2b2b2b2b2b2b2b2b2b182b2b2b2b2b2b2b2b2b2b2b182b1d42b0
964b5358b235aaaa1d4259b0324b5358b235ffff1d42594bb09353205c58
b901f201f04544b901f101f045445958b9033e01f2455258b901f2033e44
59594bb8015653205c58b9002001f14544b9002601f145445958b9081e00
20455258b90020081e4459594bb8019a53205c58b9002501f24544b90024
01f245445958b909090025455258b9002509094459594bb8040153205c58
b173244544b1242445445958b917200073455258b9007317204459594bb8
040153205c58b1ca254544b1252545445958b9168000ca455258b900ca16
804459594bb03e53205c58b11c1c4544b11e1c45445958b9011a001c4552
58b9001c011a4459594bb05653205c58b11c1c4544b12f1c45445958b901
89001c455258b9001c01894459594bb8030153205c58b11c1c4544b11c1c
45445958b90de0001c455258b9001c0de04459592b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b65422b2b01b33b59635c456523456023456560234560b08b766818b080
622020b163594565234520b003266062636820b003266165b059236544b0
63234420b13b5c4565234520b003266062636820b003266165b05c236544
b03b2344b1005c455458b15c406544b23b403b4523614459b34750343745
6523456023456560234560b089766818b080622020b134504565234520b0
03266062636820b003266165b050236544b034234420b147374565234520
b003266062636820b003266165b037236544b0472344b10037455458b137
406544b24740474523614459004b5342014b5058b108004259435c58b108
004259b3020b0a124358601b2159421610703eb0124358b93b21187e1bba
040001a8000b2b59b00c2342b00d2342b0124358b92d412d411bba040004
00000b2b59b00e2342b00f2342b0124358b9187e3b211bba01a80400000b
2b59b0102342b0112342002b747573750018456944456944456944737373
7374757374752b2b2b2b74752b2b2b2b2b73737373737373737373737373
7373737373737373737373732b2b2b45b0406144737400004bb02a534bb0
3f515a58b1070745b040604459004bb03a534bb03f515a58b10b0b45b8ff
c0604459004bb02e534bb03a515a58b1030345b040604459004bb02e534b
b03c515a58b1090945b8ffc06044592b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b752b2b2b2b2b2b2b435c58b9008002bbb301401e017400735903b0
1e4b5402b0124b545ab012435c5a58ba009f02220001007359002b747301
2b01732b2b2b2b2b2b2b2b737373732b2b2b2b2b002b2b2b2b2b2b004569
447345694473456944737475456944734569444569444569447374456944
456944732b2b2b2b2b732b002b732b74752b2b2b2b2b2b2b2b2b2b2b2b2b
2b737475732b7374757374752b2b2b742b002b2b2b00184569442b5c5841
0e0336032f0041001f0330032f002d001f032d032f0032001f0332032f40
12261f0302371f0908371f0b0a441f0706441f2b2b2b2b2b2b2b2b592b00
00>
[16069 4517 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd

3 0 3 <> RWKBAA+ArialMT AddT42Char 
3 108 11 <0001007cfe51026005d30010004eb0852b58400a270f0100101207081010
b80133b3009f0e08b801334011079f0e5e0003100320030303ac119d8c18
2b10f65dfdf6ed10f6ed003f3c3f3c3130015d1bb3000f070100183f3f30
3159012602113437363733060706070615100101df95ce4d5abc8179273d
232b012bfe51bc01f8010eeedafdfbd0598a96bbbdfe1ffe2000>RWKBAA+ArialMT AddT42Char 
3 254 12 <0001007cfe51026005d300100076b0852b58400c2802281002090a100100
1209b80133b30a9f0301b80133b4009f035e0eb8fff0b4101002550eb8ff
f8b40f0f02550eb8ffe4b40d0d02550eb8ffec400f0a0a02550f0e1f0e02
0eac129d8c182b10f65d2b2b2b2bfdf6ed10f6ed003f3c3f3c3130015d1b
b3010f090100183f3f3031591323001134272627262733161716151002fd
81012b2b223d277a81bc5a4dcffe5101e001e1bcb9968a5ad2fbfddaeefe
f2fe0800>RWKBAA+ArialMT AddT42Char 
3 580 16 <0001004101b8026a026d0003003db0852b58401970027003024d014d0202
012300021a05700001001904708d182b4e10e45d10e6002f4ded31300071
015d1bb200400100182f1acd3031591335211541022901b8b5b5>RWKBAA+ArialMT AddT42Char 
3 744 19 <00020055ffe7041105c00010001d01feb0852b58b10202435458400a1a1e
0405141e0d0d1709b8ffe8b40f0f025509b8ffe840190d0d02550911000c
0f0f025500160c0c0255000c0d0d0255002f2b2b2bcd2f2b2bcd003fed3f
ed31301bb10602435458400a1a1e0405141e0d0d1709b8fff4b40f0f0655
09b8ffe6b40d0d065509b8ffee40190b0b0655091100100d0d065500100c
0c065500100b0b0655002f2b2b2bcd2f2b2b2bcd003fed3fed31301b404e
04068702880b880fc90e0509070b180245134c154a19431b54135c155c19
521b6b076b0b63136c156b19601b79027706760b7a0f870698079610c918
da02d606d60bdb0f1a1a1e0405141e0d0d174110fff4000c000c01400056
0017fff2000b000b014000560017fff8000d000d01404011561773094021
2334300901000910090209410afff4000b000b014000560009ffe8000d00
0d0140b75609901f110c0c0cb80140b456110e0b0bb80140b45611080d0d
b80140b356117300b8ffc0400c2123342000400002000c0c0cb80140b456
00080b0bb80140b45600080d0db80140b65600901ec78b182b10f62b2b2b
5d2bed2b2b2b10f62b2b5d712bed2b2b2b003fed3fed3130015d71005db0
0243b0405058b4062019101cb8fff0b202200bbeffe00016ffe00012ffe0
000fffe0003838383838013838385959591bb10d14b8032fb46c0d0d041a
b8032fb26c040500183f2b3f2b3031591310123633321616121510020623
22272613101633323611102623220706556bd3a076b274426ad3a1d47991
b9a97c7ca9a97e7c4a5d02d30104013dac5fb3feffdafefefec3ad98b701
9dfe97eff00168016aee6986>RWKBAA+ArialMT AddT42Char 
3 1356 20 <000100df000002fb05c0000a010eb0852b58b30a0c0c0cb80140b456000c
0c0cb80140b4560a0e0b0bb80140b456000e0b0bb80140b4560a080d0db8
0140b45600080d0db8014040215603400d11346b047f028f02990804ac04
010900060502030905010c0201ca0a00b8ffc0400a212334300001200001
00b8ffe0b41010025500b8ffea40110f0f0255001c0c0c0255000e0d0d02
5500b8fff040190f0f065500100c0c065500100d0d0655001a0c05400d0f
3405b8ffc0400e212334300501200540050205190bba013c018500182b4e
10e45d712b2b10f62b2b2b2b2b2b2b5d712b3c4dfd3c003f3f1739011139
3130015d005d2b012b2b2b2b2b2b1b400c0201090640050509010c090500
183f3f12392f1acd111239303159212311060607353636373302fbb441d3
5497e22f74047b3e7c1fae47ca5f>RWKBAA+ArialMT AddT42Char 
3 1670 21 <0001003c0000040705c0001e0227b0852b58b10602435458400911100d18
131306550db8fff4b4111106550db8ffee4009101006550d1e14051eb8ff
e84017131306551e1e111106551e1c0e1006551e0c0d0d06551eb802bb40
0c020a1717201f10110202201f1112392fd4cd1112392fcd002fed2b2b2b
2b3fed2b2b2bc43231301bb10202435458400911100d0c121202550db8ff
f440090f1102550d1e14051eb8ffe0400b121302551e140f1102551eb802
bbb2020a17b8ffe8b40b0b025517b8ffec400e0d0d02551717201f101102
02201f1112392fd4cd1112392f2b2bcd002fed2b2b3fed2b2bc43231301b
40473b053b06bb05bf06bb07c708c91c07490c590c540e6b0c640e7a127a
138912bc12e51ae51bf01a0cbf0bb713021e0a10080606ca1c1a141c1c1a
081c1a030102081a1c030d1e10b802a4b34f110111b80118b50d1e140500
1eb802bbb301020c0a4110fff4000c000c01400056000afff2000b000b01
400056000afff8000d000d0140400d560a7317d30000014021233401bb02
81002000100138400c11b53f025f026f027f020402ba0224001f018fb18b
182b10f65df4ed10f62b3c10f4ed2b2b2b003f3cfd3c3fedfd5de4111217
390111121739870e2e2b0e7d10c4011112393130b00243b040505840091b
101c101d101e1006befff00007ffe00008fff00009fff000383838380138
38383859005d015d7259591b400910100d1b07070d021eb80333b46c020c
140db8032fb26c140500183f2b3f2b1139113312392f3031592515212637
36363736363534262322060727363633321615140606070606070407fc37
021725a39aefa8997b829c01b913f8d1d3f648a7c2a25c1eadad413c63c0
7ec4e5666b939c8a13cfd9eaad58aabca4886131>RWKBAA+ArialMT AddT42Char 
3 2320 22 <00010056ffe6041605c0002b01f6b0852b58b10202435458400b1918400d
0d0255181c0001b8ffc0402b0c0d02550129230a0d0f0c0f1e0a0a29151e
1c041e291c05290d230d0c181901001220100c0c0255200726b8ffe8b40c
0d0255262f2bcd2f2bcd2fcd2fcd2f0012393f3f10ed10ed12392fedc610
c6123910c42b3210c42b3231301b4030050d160d450d860d044511571176
1b0352166c106a146416750d7914860d8a14891ba50d0a0b0c0d0e040701
230d0c01b802a4b340000100bb01180029000d0135b40c0c150418ba02a4
001902684009151e1c05041e290d124110fff4000c000c014000560012ff
f2000b000b014000560012fff8000d000d014040115612735f206f200220
180d0d06552080074110fff4000c000c014000560007fff2000b000b0140
00560007fff8000d000d0140401156077326402123343026010026102602
26b8fff4b70d0d065526902d18b80138b219d301ba01380000ffc0400b21
2334200040000200902cb80192b18b182b10f65d2bedf4ed10f62b5d712b
ed2b2b2bf42b5ded2b2b2b003fed3fedfde41112392fed10fd5de4111239
01111217393130b00243b0405058b2052003b8ffe001383859015d005d01
71591b400900010104230c0d0f0ab8032fb56c0f0f1c2904b8032fb76c29
0d1918181c15b8032fb26c1c0500183f2b322f333f2b11392f2b33323911
392f33303159133716163332363534262322073716333236353426232206
072736363332161615140607161615140023222656b41f956b7fafa27d33
4c14120b73b8866a698c14b421eaae78ca6b66648290fee8d6c1ff018318
9987b0827ca1149e02787d6382848420b5c767b2645f9c2e1ebd8ec0fef5
e600>RWKBAA+ArialMT AddT42Char 
3 2952 23 <0002001a0000041005ba000a000d021cb0852b58bc000cfffa000c000c01
40b4560d060c0cb80140b456050c0c0cb80140b456060c0c0cb80140b456
090c0c0cb80140b4560a0c0c0cb80140b456050e0b0bb80140b456060e0b
0bb80140b456090e0b0bb80140b4560a0e0b0bb80140b45607080c0cb801
40b45608080c0cb80140b45607080b0bb80140b45608080b0bb80140b456
07080d0db80140b45608080d0db80140b45605080d0db80140b45606080d
0db80140b45609080d0db80140b4560a080d0db8014040375612580c680c
9a0ca90cc90c054c034c0d94040312010208000c060307050a0b0307000c
0c0d0dca030414030304030d00020c0d040703bb02bb0008000201a0400a
000404000c0c00ca0a04b80266b705050a401d1f340ab8ffe0b410100255
0ab8ffe6b40d0d02550ab8ffeeb40d0d06550ab80137400d074022233407
80213507900f02b8ffc0400b0d14340002100220020302b8ffe0b40d0d02
5502b8ffe4b60d0d065502b50eb8018cb18b182b10ec2b2b5d2b10f62b2b
f42b2b2b2b3c10e610fd3c003f3f10f43cf63c1139390111123939872e2b
047d10c40f0f0f313001435c58b9000dffdeb212390db8ffd4400b333903
222d3903041d1d3c2b2b2b2b595d005d435c5840140c400b390c8050390c
4026390c221c390c402d392b2b2b2b2b59012b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b002b1bb60c040906030d02b80332b76c0d0d04000c0405
00183f3f12392f2b33333212393031592111213501331133152311031101
0296fd84029d93c6c6b4fe35015fa503b6fc4aa5fea102040295fd6b>RWKBAA+ArialMT AddT42Char 
3 3550 24 <00010055ffe7042105a6001e0207b0852b58b3130c0c0cb80140b456120c
0c0cb80140b456130c0b0bb80140b456120c0b0bb80140b456130c0d0db8
0140b456120c0d0db901400056b10202435458b90001ffc0400d0d0d0255
011c0e0a1e15151c12b802bb400b0f04041e1c0d0e01000718b8ffeab40f
0f025518b8ffeab40d0d0255182f2b2bcd2fcd2f003fed3fed12392ffdc4
10c42b31301b4034120c0d0d06550f0c0d0d06554b1a791d8a1d9613a713
c30cd60cdb1b080913180e2a1a03130a15121313ca0e0f140e13140e0f0d
b802a440130e0a1e15400ea00e020e0e0f40150115151c12b802bbb70f04
01d340000100b801184011041e1c0d115f106f107f108f10041080074110
fff4000c000c014000560007fff2000b000b014000560007fff8000d000d
014040115607731840212334301801001810180218b8fff4b70d0d065518
902012bc0135000f0195000d0138b20eb501ba01380000ffc0400b212334
200040000200901fb80192b18b182b10f65d2bedf4edf4ed10f62b5d712b
ed2b2b2bf45d3c003fedfd5de43fed12392f5d11392f5d10ed10e487082e
2b057d10c4001112393130b00243b0405058b4093005300bbaffe00003ff
e001383838385901715d2b2b592b2b2b2b2b2b1b400c00001c0d130e0e0d
0d04150ab8032fb56c15150f1c04b8032fb46c1c0d0f12b80333b26c0f04
00183f2b3f2b11392f2b11392f3311331112392f30315913371616333236
35342623220607271321152103363332001514070623222655bd15996c82
b4ad8c578c28a98e02d9fdb74f8491c00108748df4c8fd0180108a8bc4a2
9ab24f3f1602f1acfe765cfef6d1c791b2e0>RWKBAA+ArialMT AddT42Char 
3 6056 39 <0002009e0000055a05ba000f001d014eb0852b584012201f0143081c1d1e
02010211101e0f0008174110fffe000c000c014000560017fff2000b000b
014000560017fff6000c000d0140401f5617262009011f400d0d02550920
10100255090a0f0f025509180d0d025509b8fff4400c0c0c0655091a1f1d
100e0b0bb80140b456100a0d0db80140b456100c0c0cb80140400e561020
0120000100201010025500b8fff6b40f0f025500b8fff6b40d0d025500b8
fffab40c0c025500b8fff7b40c0c065500b8fff8400a0d0d0655005d1e3b
5c182b10f62b2b2b2b2b2b5d3cfd2b2b2b3c10f62b2b2b2b2b5ded2b2b2b
003f3cfd3c3f3cfd3c313043794036031b0708060805080408040619181a
1802060b0a0c0a0d0a030615161416131603061b03172101120e17210118
081c2101160a1121002b2b012b2b2a2a2a2a81015d1bb10010b80333b46c
0008011db80333b26c010200183f2b3f2b30315933112132171617161215
14020e022325213236373636353426272623219e01f9ab5a7e5974734e7a
91cd85feb1013991a531454d976c4eadfecc05ba151d4c62fecfc4a7fefe
a96132ad363145e9a6e6f72a1e00>RWKBAA+ArialMT AddT42Char 
3 7786 47 <000100960000042a05ba000500a4b0852b58400c010204031e0500082004
0104b802a7b5070203020c0cb80140b456030e0b0bb80140b456030a0c0d
b80140400e5603200120000100201010025500b8fff6b40f0f025500b8ff
f6b40d0d025500b8fffab40c0c025500b8fff6b40c0c065500b8fff8400a
0d0d0655005d063b5c182b10f62b2b2b2b2b2b5d3cfd2b2b2b3c10e65d00
3f3cfd3c3f31301bb10003b80333b46c0008010200183f3f2b3031593311
3311211596c202d205bafaf3ad00>RWKBAA+ArialMT AddT42Char 
3 8296 68 <0002004affe8041c043e002800370322b0852b58402c090d092a190d1a2a
290d2a2a390d3615371b3a2a492a5d0d5d2a6a0d692a60308a0d86299a16
9b1aa90d1528b8ffe8b40b0b065527b8ffe840190b0b0655a619aa28b619
bb28c419cf28d215dd28084416011eb8fff440110c0c065512120c0c0655
050c0c0c065535b8ffe0404f0c0c06551f171f182b2c2a343904392c4904
482c5608592b6608692b760c870cc90cf90df92b1137340e0104102f2434
17322114185f296f2902291c2f0e3f0e8f0e9f0eff0e059f0eaf0eef0e03
0ebbfffa000b000b0140b7560e0c0f0f02550eb8ffeab4101002550eb8ff
f44014101006550e0c0d0d06550e060f0f06550e260d0db80140b4560e18
0c0cb80140b5560e0e1c0317b802aab3182c0b0bb80140400e56182c0a0a
42551895141c1c0700b8fff440110c0c06550045270a321c030b29611061
004110fff6000b000b014000560000fff8000c000c014000560000fffc00
0d000d0140400b5600060d0d025500252124b8ffecb41010025524b8ffec
400b0d0d025524040c0c025524b8ffe4b40b0b025524b8fff4b40b0b0655
24b8ffdc400b1010065524060f0f065524b8fffcb40c0c065524b8025b40
0e27400026102620263026af260539b8ffc0b40e0e025526b8ffd6b40e0e
025526bbfff4000d000d0140b356263139b8ffc0400d1e23343039c03902
a039013917b8fff4b71010065517080c0cb80140400956172518222f080d
0db80140b4562f0c0c0cb80140b4562f0e0b0bb801404011562f24bf06cf
06021f063f060206140b0bb80140b45606140d0db80140b45606080c0cb8
0140402e56060e0f0f0255060c0d0d025506180c0c0255060c0b0b025506
0c0b0b0655060e0d0d065506100c0c065506313810f62b2b2b2b2b2b2b2b
2b2b5d71ed2b2b2bf4ed2b2b105d712bf62b2b2b5dedf42b2b2b2b2b2b2b
2b3cfd2b2b2b2be5e5003fed3fe42b3fedfd2b2be41112392f2b2b2b2b2b
2b2b2b5d71ed711112391112393901111217393130005d2b2b2b2b01715d
2b2b00711bb700032b2b0c0c0e29b8032db76c0e0e1c270a0332b8032db7
6c030b1817171c14b8032fb26c1c0700183f2b322f333f2b3f11392f2b39
113311123930315925060623222635343636373637363736353427262322
0607273e02333216161716151514161723260306070e0215141633323637
3635033c64b96aafbc477348356bda67013345887f791db0186ed08988aa
5010091722bc1c1762c46f5c326d6968a2261d835546ab854e814e140e0d
1a24250a6e2d3d597118718b4b40614a2e78f0fb853d3801dd281c10284d
2f48605b4f3d7700>RWKBAA+ArialMT AddT42Char 
3 9888 70 <00010050ffe803ed043e001a0261b0852b58bc0017fff0000c000c0140b4
560a080c0cb80140b45609080c0cb80140b4560f080c0cb80140b4561008
0c0cb80140b45611080c0cb901400056b1020243545840340e7f0f010f0b
01400050007000030004121c0b07181c040b010e1507080e0e0255070c0d
0d0255070c0c0c025507100b0b0255072f2b2b2b2bcdd4c6003fed3fed10
c45d3210c45d3231301b4047090c011f1c4313431753135317601360179b
029b039a0da410a41a0c080d190a6a0269036a05750c700d800da60cb509
b60ab50c0c160c860ce302030e225f0f6f0f7f0f030f01b802aa40263000
40005000600070009000a000e000f00009000f0f0b000004121c0b07181c
040b1c0f010f410afff4000c000c01400056000ffff2000b000b0140400f
560f240e080d0d06550e221b000100410afff4000c000c014000560000ff
ee000b000b0140400f5600240b2b1f010100010101400e2bb80140b45601
400d0db80140b45601400c0cb80140b45601360b0bb8014040205601400b
0b065501401010065501480c0c0655011a0d0d065501491c15080d0db801
40b456150c0c0cb80140b456150e0b0bb801404021561524cf07011f073f
0702070e0b0b0655070a1010065507120c0c0655070c0d0db80140b45607
0c0c0cb80140b65607311b34c4182b10f62b2b2b2b2b5d71ed2b2b2b10f6
2b2b2b2b2b2b2b2b5d724b53234b515a58b90001ffc03859ed2b2b72f42b
ed2b2b72003fed3fed12392f11392f105de4105de43130005d71015d7159
012b2b2b2b2b2b1b400a010000120e0f0f120418b8032fb46c040b0b12b8
032fb26c0b0700183f2b3f2b11392f3311392f3330315901170606232200
1134123633321617072626232206151416333236033cb11defaedafef772
e989addc1faf197f5a88aaa4846a8e018517b7cf011d010aac010281afa1
1b6b6cc3d3d6c282>RWKBAA+ArialMT AddT42Char 
3 11212 72 <0002004bffe8041e043e0015001d0216b0852b5840171f001c150255035d
055d09550b65036b056f09650b0815b8ffe4b40d0d065511b8ffe440520d
0d06551d1c0d0d06552712d905fa14f61a0431123a19311c41124d1a411c
51125c19521c61126d1a611c78067815f602f618100016010f0d17175016
6016701603161c0f9010a010021010041b1c0a0700ba02aa0001ffc0b410
10025501b8ffc0400e101006551001010195131c040b174110fff0000c00
0c014000560017fff2000b000b014000560017fff8000d000d0140b35617
400db8ffdcb40d0d02550db8ffeeb40d0d06550db8ffeab40c0c06550db8
ffc04009272a34b00d010d1a1fb8ffc0b32526341fb8ffc0b71e2334301f
011f16bbfffc000d000d0140b656163310080c0cb80140b456100e0b0bb8
0140b45610080d0db8014040135610240740242a341f073f074f0703070c
0c0cb80140b456070c0d0db80140402b5607200b0b025507180c0c025507
1c0d0d0255070e0b0b0655071c0c0c065507160d0d065507191e3437182b
4e10f42b2b2b2b2b2b2b2b5d2b4dfd2b2b2be42b4e10712b2bf6712b2b2b
2b4ded2b2b2b003fedfd5d2b2be43fed12392f5d3cfd713c011112393912
393130015d005d2b2b2b0171721b401d0000500070008000900005300070
0080009000c000d000060000041016b8032f400d6c100010301002130310
0a0413b8032fb46c040b0a1bb8032fb26c0a0700183f2b3f2b12395f5e5d
2f2b11332f5d713031590117060623220011100033320011140721161633
32360121262726232206035eba2ceeb9e9feef0114dcd5010e01fce80ab2
85638cfdda02510c3856897ca9015617a3b4011f0103010c0128fedefef9
1020afba680195864368a600>RWKBAA+ArialMT AddT42Char 
3 11854 73 <000100130000028005d30017015eb0852b58401e1409010f192f19301940
1970199b0c9c0da90d081a0d280db019c0190419b8ffc0401f1a1f341d08
0d030c0f1c0a0115022b1413040306000a9f140114ff130e0b0bb80140b7
56134004170e0b0bb80140b45617080d0db80140b456170c0c0cb8014040
0b5617250400030292010100b8ffc0b331383400b8ffc0402b1c1f349000
0119400f0f025519400d0e025500141010025500280f0f025500220e0e02
55002c0d0d025500b8fff2400b0c0c025500140b0b065500b8ffeab41010
065500b8ffe6b40f0f065500b8fffab70c0c065500a31819bc01ba002100
f6010a00182b2bf62b2b2b2b2b2b2b2b2b2b2b5d2b2b3c10f43c103ced2b
2b2b10ed2bed5d003f3f3c3c3cfd3c3fed39113931304379401410110609
0706080602061009121b0011060f1b012b012b2a8181012b715d00721bb5
000a16130302b8032db46c03060a0fb80332b26c0a0100183f2b3f2b3332
3f303159331123353335343736363332170726232206151533152311b29f
9f131a83764c5c1b38325244cfcf039a8c716b344657129d0a4660628cfc
6600>RWKBAA+ArialMT AddT42Char 
3 12958 76 <000200880000013c05ba00030007020ab0852b58b3020a0b0bb80140b456
030a0b0bb80140b456060a0b0bb80140b456070a0b0b4119014000560001
fffc000b000b014000560000fffc000b000b014000560005fffc000b000b
014000560004fffc000b000b0140b456020b0c0cb80140b456030b0c0cb8
0140b456060b0c0cb80140b456070b0c0c4119014000560001fffd000c00
0c014000560000fffd000c000c014000560005fffd000c000c0140005600
04fffd000c000c0140b45602040d0db80140b45603040d0db80140b45606
040d0db80140b45607040d0d4119014000560001fffc000d000d01400056
0000fffc000d000d014000560005fffc000d000d014000560004fffc000d
000d014040375609360b0b02554f099009a009b009c009df09f009070009
1f09700980099f09b009c009df09e009ff090a1f09010001070402030906
03bbffc0000d000d0140402a56037e0100060506040a0607250500049f04
a004b004c004e00406c004f0040200042004d004e0040404b8fff8b41010
025504b8fffa40170e0e025504040c0c0255040a0b0b025504140b0b0655
04b8ffeab41010065504b8fffeb40d0d065504b8fffc400a0c0c0655044e
084750182b10f62b2b2b2b2b2b2b2b5d71723cfd3c003f3f3c3fed2b0111
123939111239393130015d72712b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b1bb7040a05060040010000183f1acd3f3f3031591335
33150311331188b4b4b404ebcfcffb150426fbda>RWKBAA+ArialMT AddT42Char 
3 13928 80 <0001008700000626043e0023036fb0852b5841920013fff2000b000b0140
00560010fff2000b000b014000560012fff2000b000b014000560011fff2
000b000b01400056001dfffc000d000d01400056001cfffc000d000d0140
0056001bfffc000d000d01400056001afffc000d000d01400056001dfffc
000c000c01400056001cfffc000c000c01400056001bfffc000c000c0140
0056001afffc000c000c01400056000cfffe000c000c01400056000dfffe
000c000c01400056000efffe000c000c01400056000ffffe000c000c0140
00560013fff2000c000c014000560010fff2000c000c014000560012fff2
000c000c014000560011fff2000c000c014000560013fff8000d000d0140
00560010fff8000d000d014000560012fff8000d000d014000560011fff8
000d000d01400056000dfff4b40d0d065508b8fff4b40d0d065509b8ffd8
404d0b0d342504e404e409e117e52005d505f620021708202309181b2009
0303231e1c06151c0b0b06070106231a19100ad025019025a02502251717
1a0e2590110111041010025511180f0f025511b8ffec400b0e0e02551114
0c0c025511b8ffe840170b0b025511020b0b0655110c1010065511060f0f
065511b8fffab40c0c065511b8fff8b40d0d065511b8015db318080c0cb8
0140b456180e0b0bb80140b45618040d0db80140400d561825901b011b18
0f0f02551bb8ffec400b0e0e02551b140c0c02551bb8ffee40110b0b0255
1b040b0b06551b0a101006551bb8fffe400b0d0d06551b0c0f0f06551bb8
fffcb40c0c06551bb8015db6000233230e0b0bb80140b45623080d0db801
40b456230c0c0cb80140401456232501d000019000a000021f003f004f00
0300b8fffe401d0e0e025500100d0d025500100c0c0255000c0b0b025500
160b0b065500b8fffcb41010065500b8fff440140f0f0655000a0c0c0655
000e0d0d065500192425b80178b3214750182b2b4ef42b2b2b2b2b2b2b2b
2b5d71723c4dfd2b2b2be410f42b2b2b2b2b2b2b2b2b5ded2b2b2bf42b2b
2b2b2b2b2b2b2b2b5dfd4e456544e67172003f3c3c3c3f3f3c4d10ed10ed
11173901111239123931304379400e0c141326140c111b01120d151b0100
2b012b2b81015d005d2b2b2b012b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b1b400a100a1a0a000a01060b15b80330b66c0b07090306
1eb80330b26c060700183f2b32323f2b3f3f3f3f30315933113315363633
321617363332161511231134262623220615112311342623220606151187
a132a66a76971f7eca9eaab3235c3e7094b458644c813a0426954e5f6258
baafb6fd27029d6c5f3a95a4fd9702b27878509a91fdd900>RWKBAA+ArialMT AddT42Char 
3 14912 81 <00010087000003e6043e001601e6b0852b5840130503061302a810b810e3
03e713f003f6130604b8fff040220b0d347910019810d018e018ff180420
08140e1416121c05070106160d0a0d0e0c0e4110fff8000d000d01400056
000efff2000b000b01400056000efff4000c000c0140401c560e24184010
10025518400b0b02550b28101002550b140e0e02550bb8ffec40110d0d02
550b040c0c02550b220b0b02550bb8fff4400b0b0b06550b14101006550b
b8fff9400b0d0d06550b0a0f0f06550bb8fff640120c0c06550b40333634
ff0b01ff0b010b4e18b8ffc0401a343634b018f018027018a018b018c018
04180302331516080d0db80140b456160e0b0bb80140b456160c0c0cb801
40b45616250100b8fff6b41111025500b8fffab41010025500b8fffa4017
0e0e025500040c0c0255000a0b0b025500040b0b065500b8fffa40110f0f
065500020c0c065500040d0d065500b8ffc04012333634f0000100002000
d000e00004004e1710f65d712b2b2b2b2b2b2b2b2b2b3cfd2b2b2b3cf43c
105d712bf65d712b2b2b2b2b2b2b2b2b2b2b2b2bed2b2b2b3c103c003f3c
3f3fed11390112393130437940160611090a080a070a0306102611060e1b
010f0a121b01002b012b2b2a81015d71002b5d711b40090d0a160a010603
0512b80330b26c050700183f2b323f3f3f30315933113315363332161617
1615112311342626232206151187a275dd60a150100ab42a6b4873a70426
97af45704d327dfd7302866e6d4192ccfdbc>RWKBAA+ArialMT AddT42Char 
4 890 86 <0001003fffe803b1043e0030041eb0852b58b3170e0b0bb80140b456180e
0b0bb80140b456190e0b0b4137014000560028fff4000c000c0140005600
27fff4000c000c014000560026fff4000c000c014000560025fff4000c00
0c014000560024fff4000c000c014000560023fff4000c000c0140005600
22fff4000c000c014000560021fff4000c000c014000560020fff4000c00
0c0140407c56042214223a094a094424562265227c098e098424a613ab2c
c2030d09171a1817304b2cd617051b025502021032010a185c085c095c0a
5c0b5c0c5c0d6a086a096a0a6a0b6a0c6a0db426b4270f27262427242936
245a0a590b64266428742374248024930a9c0c9228972c9530a40aa90ca3
27a428b326c5261628b8fff4b40d0d065522b8fff4b40d0d065523b8fff4
b40d0d065524b8fff4b40d0d065528b8fff4b40c0c065522b8fff4b40c0c
065523b8fff4b40c0c065524b8fff4b40c0c06551db8ffde40121e395a08
27250c0a041a202615040b2e1d1ab802aa4022192c0b0b02551f193f194f
195f19af19cf19060f191f196f19df19041f198f190219bd025500150000
02aa0001ffc040140b0b025510014001021001d00102000110010201b8ff
c0b314163401b8ffc040100e113401012e5c1d6c1d021d1c150704b8fff4
b40b0b025504b8ffe6b41010065504b8ffe640130f0f0655041c2e0b1f1a
011a24194013183432b8ffc040320f0f025519180f0f025519180d0d0255
19160c0c025519201010065519200f0f065519100c0c065519160d0d0655
19160c0c4109014000560019025b0007fff2000b000b0140b35607242ab8
ffc0b51c39d02a012ab8ffe6b40c0c02552ab8ffe8b40f0f02552ab8ffe8
b40c0c06552ab8ffeab40d0d06552abbfff4000c000c0140b3562a1a32b8
ffc04021272a346032c032023f3280320232100101012400180d0d025500
100d0d06550020b8fff4b40d0d025520b8fff4b41010065520b8fff4b70f
0f0655200e0b0bb8014040165620240f100b0b02550f160c0c02550f200d
0d02550fb8fffa40140f0f02550f0e0c0c06550f0c0d0d06550f060c0cb8
01404011560f22df00013f004f00020019313437182b4e10f45d714df42b
2b2b2b2b2b2bed2b2b2b2b102b2bed724e105d712bf62b2b2b2b2b712b4d
ed2bf42b2b2b2b2b2b2b2b2b2bed72003fed2b2b2b3fed7112392f2b2b5d
71722be410fd5d71722be41112391112390111121739313043794040272d
1e2305142c261110121013100306220d201b000928071b01052d071b011e
14201b00210e231b0022230d0c08290a1b012827090a062b041b001f101d
1b01002b2b103c103c2b103c103c2b012b2b2b2b2a2b818181002b2b2b2b
2b2b2b2b2b5d71015d72715d002b2b2b2b2b2b2b2b2b012b2b2b1b400a00
01011d0b26261d2e04b8032fb76c2e0b191a1a151db8032fb26c15070018
3f2b322f333f2b1139113311392f33303159133716163332363534272627
2e023534363736363332161617072626232206151417161716171e021514
06062322263fb20f897b7c78352593c6994f41382a91537dbd5a11b00c73
697c6a16162f1b84bf975669c67dcfd9013d1c6b7265443d231825324981
4e4779281f2b487b6718525c5237231c1d130a2433417c5c5a9f57ac>RWKBAA+ArialMT AddT42Char 
4 2088 87 <00010024fff2022a05990017016eb0852b584120000cfffe000c000c0140
0056000bfffe000c000c014000560008fffe000c000c014000560007fffe
000c000c014000560006fffe000c000c01400056000affc0b323263409b8
ffc0402423263480190100010c0d0a0103001610092b0f0a06161c030b0f
10220022010d12080d0db80140b456120e0b0bb80140b456120a0c0cb801
4040225612250c01ff070845094560077007800790070400072007a007b0
07c007d0070607b8ffeeb41010025507b8fff4b40f0f025507b8fff2b40e
0e025507b8fff8b40d0d025507b8fff8b40c0c025507b8fffab410100655
07b8fff0400b0f0f065507060c0c065507b8ffe8b40d0d065507ba026a00
180136b166182b10f62b2b2b2b2b2b2b2b2b5d71f4e410ed3cfd2b2b2b3c
10e4f43c003fed3f3cfd3c1139123911333310c93130015d2b2b2b2b2b2b
2b1bb10316b80332b46c030b0100b8033240096c010a0d0d110e0a09b803
2db26c0a0600183f2b3332322f3f2b3f2b30315925170623222626351123
353311371133152311141616333202101a4c3c626c2c8484b3b5b5132b28
1ea19f103e65a202638c01076cfe8d8cfd934d2c1a00>RWKBAA+ArialMT AddT42Char 
4 3710 92 <00010021fe5103ee0426001a02c5b0852b58b30f180d0db80140b456140c
0d0db80140b456150c0d0db80140b456160c0d0db80140b4560f040d0dbe
014000560012fff4000d000d0140b4560e0c0d0db80140b4560d0c0d0db8
0140b4560c0c0d0db80140b4560f0c0c0cb80140b4560e0c0c0cb80140b4
560d0c0c0cb80140b4560c0c0c0cbe014000560012fff2000b000b0140b4
560c0e0b0bb901400056b10202435458401d0a140f030b031c190f12060b
061340120f200b400c200f180f0f02550f192f2b1add1a18cd1a1910dd1a
18cd003f3f3fed12173931301bb30f1c010fb8ffde40731c392814560faf
0a03400d400f020f202830341020283034070c0912160d1812270b270c27
0d360c360d350e99110b2812281348165912591359156912691369157906
760d79117a147a15850d8a118c128c138914980aa80bbc10bb11ba14ea0a
e714f50dfd10f914ff1c1e1213180e0e4255b106024354584016130b1c1b
040f440f840f030f190b031c190f12060b06003f3f3fed1112395d011112
39391b40370f0f0c101112120a00031914131325120a1412120a0f0c0f11
0c250b0a140b0b0a1312120c0c0b06031c190f001c101c022f1cbf1c021c
b8023fb50f1340124014b80254400b3f124012025f12bf120212b80142b6
0f012200451b0ab8025440120f200b4040200c300c4f0c03500cff0c020c
b80142b32f0f010fb8023fb41b207c66182b1a1910fd71f45d711a18ed1a
1910ed1810f4e41910e45d71ed1a1810ed1910e45d7100183fed3f3c103c
103c87052e2b087d10c487052e182b0e7d10c400111239870e103c3c08c4
4bb00e534bb018515ab00243b040505a58bb000cffe8000bffe801383859
592b313001435c58b90014ffdeb637390a2237390eb8ffe8b51539112215
392b2b2b2b595d712b2b00715d2b015d592b2b2b2b2b2b2b2b2b2b2b2b2b
2b002b1bb11903b80333400a6c190f0f0a0a12060b0600183f3f3f333f2b
303159132716333236373637363701331316173637133301060706062322
7f143b2c3c48171126050bfe6dc2dd2b221f2be3b4fe6c4124307c5634fe
67a91028241b6b0f1d0428fd9975817c76026bfbc8af42595300>RWKBAA+ArialMT AddT42Char 
3 0 0 <00020100000005000500000300070042b40201e40607b802994013000504
e403000a0704e4010019080605e40203bc023100090199012e00182b10f6
3cfd3c4e10f43c4dfd3c003f3cfd3c10fc3cfd3c31302111211125211121
01000400fc2003c0fc400500fb002004c000>RWKBAA+ArialMT AddT42Char 
RWKBAA+ArialMT /CharStrings get begin
/space 3 def
/parenleft 11 def
/parenright 12 def
/hyphen 16 def
/zero 19 def
/one 20 def
/two 21 def
/three 22 def
/four 23 def
/five 24 def
/D 39 def
/L 47 def
/a 68 def
/c 70 def
/e 72 def
/f 73 def
/i 76 def
/m 80 def
/n 81 def
/s 86 def
/t 87 def
/y 92 def
end
RWKBAA+ArialMT /Encoding get
dup 32 /space put
dup 40 /parenleft put
dup 41 /parenright put
dup 45 /hyphen put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 68 /D put
dup 76 /L put
dup 97 /a put
dup 99 /c put
dup 101 /e put
dup 102 /f put
dup 105 /i put
dup 109 /m put
dup 110 /n put
dup 115 /s put
dup 116 /t put
dup 121 /y put
pop
end
%ADOEndSubsetFont
/NSTNJY+ArialMT /RWKBAA+ArialMT findfont ct_VMDictPut
/NSTNJY+ArialMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 3{/.notdef}rp /hyphen 2{/.notdef}rp 
/zero /one /two /three /four /five 14{/.notdef}rp /D 
7{/.notdef}rp /L 20{/.notdef}rp /a /.notdef /c /.notdef /e 
/f 2{/.notdef}rp /i 3{/.notdef}rp /m /n 4{/.notdef}rp /s 
/t 4{/.notdef}rp /y 134{/.notdef}rp]
NSTNJY+ArialMT nf
NSTNJY+ArialMT*1 [24 0 0 -24 0 0 ]msf
640.824 333.644 mo
(1)sh
654.168 333.644 mo
(0)sh
NSTNJY+ArialMT*1 [15.0471 0 0 -15.0471 0 0 ]msf
667.209 324.139 mo
(-)sh
672.22 324.139 mo
(1)sh
NSTNJY+ArialMT*1 [24 0 0 -24 0 0 ]msf
639.576 292.854 mo
(1)sh
652.92 292.854 mo
(0)sh
NSTNJY+ArialMT*1 [15.0471 0 0 -15.0471 0 0 ]msf
666.962 283.35 mo
(0)sh
NSTNJY+ArialMT*1 [24 0 0 -24 0 0 ]msf
639.576 252.065 mo
(1)sh
652.92 252.065 mo
(0)sh
NSTNJY+ArialMT*1 [15.0471 0 0 -15.0471 0 0 ]msf
666.962 242.561 mo
(1)sh
NSTNJY+ArialMT*1 [24 0 0 -24 0 0 ]msf
640.576 211.276 mo
(1)sh
653.92 211.276 mo
(0)sh
NSTNJY+ArialMT*1 [15.0471 0 0 -15.0471 0 0 ]msf
666.962 201.772 mo
(2)sh
NSTNJY+ArialMT*1 [24 0 0 -24 0 0 ]msf
639.576 170.487 mo
(1)sh
652.92 170.487 mo
(0)sh
NSTNJY+ArialMT*1 [15.0471 0 0 -15.0471 0 0 ]msf
666.962 160.983 mo
(3)sh
NSTNJY+ArialMT*1 [24 0 0 -24 0 0 ]msf
639.576 129.699 mo
(1)sh
652.92 129.699 mo
(0)sh
NSTNJY+ArialMT*1 [15.0471 0 0 -15.0471 0 0 ]msf
666.962 120.194 mo
(4)sh
NSTNJY+ArialMT*1 [24 0 0 -24 0 0 ]msf
639.576 88.9092 mo
(1)sh
652.92 88.9092 mo
(0)sh
NSTNJY+ArialMT*1 [15.0471 0 0 -15.0471 0 0 ]msf
666.962 79.4048 mo
(5)sh
NSTNJY+ArialMT*1 [0 -24 -24 0 0 0 ]msf
618.42 293.052 mo
(D)sh
618.42 275.724 mo
(e)sh
618.42 262.38 mo
(c)sh
618.42 250.38 mo
(a)sh
618.42 237.036 mo
(y)sh
618.42 225.036 mo
( )sh
618.42 218.364 mo
(L)sh
618.42 205.02 mo
(i)sh
618.42 199.692 mo
(f)sh
618.42 193.02 mo
(e)sh
618.42 179.676 mo
(t)sh
618.42 173.004 mo
(i)sh
618.42 167.676 mo
(m)sh
618.42 147.684 mo
(e)sh
618.42 134.34 mo
(s)sh
618.42 122.34 mo
( )sh
618.42 115.668 mo
(\()sh
618.42 107.676 mo
(n)sh
618.42 94.3322 mo
(s)sh
618.42 82.3322 mo
(\))sh
2 lw
0 lc
2 lj
1 ml
[2 2 7 2 ] 0 dsh
684.782 160.593 mo
698.909 160.593 li
711.904 160.593 li
723.937 160.593 li
735.137 160.593 li
745.616 160.593 li
755.459 160.593 li
764.738 160.593 li
773.517 160.593 li
781.844 160.593 li
789.765 160.593 li
797.318 160.593 li
804.534 160.593 li
811.444 160.593 li
818.072 160.593 li
824.439 160.593 li
830.567 160.593 li
836.472 160.593 li
842.169 160.593 li
847.673 160.593 li
852.997 160.593 li
858.151 160.593 li
863.147 160.593 li
867.994 160.593 li
872.7 160.593 li
877.274 160.593 li
881.723 160.593 li
886.052 160.593 li
890.269 160.593 li
894.38 160.593 li
898.388 160.593 li
902.301 160.593 li
906.12 160.593 li
909.854 160.593 li
913.502 160.593 li
917.07 160.593 li
920.562 160.593 li
923.98 160.593 li
927.328 160.593 li
930.607 160.593 li
933.823 160.593 li
936.976 160.593 li
940.067 160.593 li
943.103 160.593 li
946.082 160.593 li
949.008 160.593 li
951.881 160.593 li
954.704 160.593 li
957.48 160.593 li
960.209 160.593 li
962.892 160.593 li
965.532 160.593 li
968.13 160.593 li
970.687 160.593 li
973.204 160.593 li
975.683 160.593 li
978.124 160.593 li
980.529 160.593 li
982.899 160.593 li
985.235 160.593 li
987.538 160.593 li
989.81 160.593 li
992.05 160.593 li
994.258 160.593 li
996.437 160.593 li
998.588 160.593 li
1000.71 160.593 li
1002.8 160.593 li
1004.87 160.593 li
1006.92 160.593 li
1008.93 160.593 li
1010.92 160.593 li
1012.89 160.593 li
1014.84 160.593 li
1016.76 160.593 li
1018.66 160.593 li
1020.53 160.593 li
1022.39 160.593 li
1024.22 160.593 li
1026.04 160.593 li
1027.83 160.593 li
1029.61 160.593 li
1031.36 160.593 li
1033.1 160.593 li
1034.82 160.593 li
1036.52 160.593 li
1038.2 160.593 li
1039.86 160.593 li
1041.51 160.593 li
1043.14 160.593 li
1044.76 160.593 li
1046.36 160.593 li
1047.94 160.593 li
1049.51 160.593 li
1051.06 160.593 li
1052.6 160.593 li
1054.13 160.593 li
1055.64 160.593 li
1057.13 160.593 li
1058.62 160.593 li
@
[8 8 ] 0 dsh
684.782 323.751 mo
698.909 323.752 li
711.904 323.755 li
723.937 323.759 li
735.137 323.766 li
745.616 323.776 li
755.459 323.79 li
764.738 323.808 li
773.517 323.832 li
781.844 323.861 li
789.765 323.896 li
797.318 323.938 li
804.534 323.985 li
811.444 324.041 li
818.072 324.101 li
824.439 324.17 li
830.567 324.245 li
836.472 324.327 li
842.169 324.415 li
847.673 324.509 li
852.997 324.61 li
858.151 324.716 li
863.147 324.827 li
867.994 324.944 li
872.7 325.065 li
877.274 325.191 li
881.723 325.322 li
886.052 325.457 li
890.269 325.594 li
894.38 325.736 li
898.388 325.881 li
902.301 326.029 li
906.12 326.18 li
909.854 326.333 li
913.502 326.489 li
917.07 326.646 li
920.562 326.805 li
923.98 326.967 li
927.328 327.129 li
930.607 327.293 li
933.823 327.458 li
936.976 327.624 li
940.067 327.792 li
943.103 327.959 li
946.082 328.127 li
949.008 328.296 li
951.881 328.465 li
954.704 328.635 li
957.48 328.804 li
960.209 328.974 li
962.892 329.144 li
965.532 329.313 li
968.13 329.483 li
970.687 329.652 li
973.204 329.821 li
975.683 329.99 li
978.124 330.158 li
980.529 330.326 li
982.899 330.494 li
985.235 330.661 li
987.538 330.827 li
989.81 330.994 li
992.05 331.158 li
994.258 331.323 li
996.437 331.487 li
998.588 331.651 li
1000.71 331.813 li
1002.8 331.975 li
1004.87 332.137 li
1006.92 332.297 li
1008.93 332.456 li
1010.92 332.615 li
1012.89 332.773 li
1014.84 332.93 li
1016.76 333.086 li
1018.66 333.243 li
1020.53 333.397 li
1022.39 333.551 li
1024.22 333.704 li
1026.04 333.856 li
1027.83 334.007 li
1029.61 334.158 li
1031.36 334.308 li
1033.1 334.456 li
1034.82 334.604 li
1036.52 334.751 li
1038.2 334.898 li
1039.86 335.043 li
1041.51 335.188 li
1043.14 335.331 li
1044.76 335.474 li
1046.36 335.616 li
1047.94 335.757 li
1049.51 335.897 li
1051.06 336.037 li
1052.6 336.176 li
1054.13 336.313 li
1055.64 336.45 li
1057.13 336.586 li
1058.62 336.722 li
@
[2 2 ] 0 dsh
684.782 61.9077 mo
698.909 74.4375 li
711.904 86.2866 li
723.937 96.9458 li
735.137 106.394 li
745.616 114.753 li
755.459 122.173 li
764.738 128.789 li
773.517 134.719 li
781.844 140.059 li
789.765 144.89 li
797.318 149.281 li
804.534 153.286 li
811.444 156.954 li
818.072 160.323 li
824.439 163.428 li
830.567 166.299 li
836.472 168.958 li
842.169 171.428 li
847.673 173.728 li
852.997 175.875 li
858.151 177.881 li
863.147 179.759 li
867.994 181.523 li
872.7 183.181 li
877.274 184.739 li
881.723 186.21 li
886.052 187.598 li
890.269 188.911 li
894.38 190.152 li
898.388 191.329 li
902.301 192.445 li
906.12 193.506 li
909.854 194.514 li
913.502 195.473 li
917.07 196.387 li
920.562 197.258 li
923.98 198.091 li
927.328 198.885 li
930.607 199.645 li
933.823 200.371 li
936.976 201.067 li
940.067 201.734 li
943.103 202.373 li
946.082 202.987 li
949.008 203.576 li
951.881 204.142 li
954.704 204.687 li
957.48 205.21 li
960.209 205.714 li
962.892 206.2 li
965.532 206.668 li
968.13 207.12 li
970.687 207.555 li
973.204 207.976 li
975.683 208.382 li
978.124 208.774 li
980.529 209.154 li
982.899 209.521 li
985.235 209.876 li
987.538 210.22 li
989.81 210.553 li
992.05 210.876 li
994.258 211.189 li
996.437 211.492 li
998.588 211.787 li
1000.71 212.072 li
1002.8 212.35 li
1004.87 212.619 li
1006.92 212.88 li
1008.93 213.135 li
1010.92 213.382 li
1012.89 213.623 li
1014.84 213.857 li
1016.76 214.084 li
1018.66 214.307 li
1020.53 214.522 li
1022.39 214.733 li
1024.22 214.938 li
1026.04 215.138 li
1027.83 215.333 li
1029.61 215.522 li
1031.36 215.708 li
1033.1 215.889 li
1034.82 216.065 li
1036.52 216.238 li
1038.2 216.406 li
1039.86 216.57 li
1041.51 216.731 li
1043.14 216.888 li
1044.76 217.042 li
1046.36 217.192 li
1047.94 217.338 li
1049.51 217.482 li
1051.06 217.622 li
1052.6 217.76 li
1054.13 217.895 li
1055.64 218.026 li
1057.13 218.155 li
1058.62 218.281 li
@
1 lw
2 lc
1 lj
10 ml
[] 0 dsh
685.05 661.413 mo
1058.09 661.413 li
@
685.05 368.759 mo
1058.09 368.759 li
@
945.796 661.413 mo
945.796 665.143 li
@
750.739 661.413 mo
750.739 663.277 li
@
797.348 661.413 mo
797.348 663.277 li
@
833.499 661.413 mo
833.499 663.277 li
@
863.037 661.413 mo
863.037 663.277 li
@
888.012 661.413 mo
888.012 663.277 li
@
909.645 661.413 mo
909.645 663.277 li
@
928.727 661.413 mo
928.727 663.277 li
@
685.05 661.413 mo
685.05 368.759 li
@
1058.09 661.413 mo
1058.09 368.759 li
@
685.05 641.229 mo
681.319 641.229 li
@
685.05 590.771 mo
681.319 590.771 li
@
685.05 540.314 mo
681.319 540.314 li
@
685.05 489.857 mo
681.319 489.857 li
@
685.05 439.399 mo
681.319 439.399 li
@
685.05 388.942 mo
681.319 388.942 li
@
%ADOBeginSubsetFont: RWKBAA+ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal NSTNJY+ArialMT gcheck setglobal} if
3 666 17 <000100ba0000018700cd00030037b0852b584018023c000a023c5f006f00
7f00af0004a0000100a004a198182b10f65d5ded003fed31301bb3014000
0800183f1acd30315933353315bacdcdcd00>NSTNJY+ArialMT AddT42Char 
3 5650 38 <00010066ffe7057605d3001d012fb0852b58b563026a1d0201b8ffe8b40b
0b065500b8ffe8405f0b0b06552000320d63007000741d8000841d90009a
05ab03a50db903b40dc70dd000e41df31d110e121d111d1d032a0628112a
1c201f470d56145715561968056b1d7b128b129a03990e9a1ca801a402a8
11d50e130014001a1014101a0402b8ffdeb2283901b8ffc040202839100f
0001041b131e0c031b1e040910260f4a0026200101011a1f17020c0cb801
40b456170e0b0bb80140b456170a0c0db80140400a561726200801080c0c
0db80140400d56080c0b0b065508191e635c182b4e10f42b2b5d4ded2b2b
2b4e10f65d4dedf4ed003fed3fed1117393130012b2b5d5d71005d2b2b01
721b400a010000040f10100c041bb80332b46c04090c13b80332b26c0c03
00183f2b3f2b12392f3311392f3330315901170604232224023534122433
320417072626232206021514121633323604b4c23dfec3e5edfed79baf01
43c2dc012c3bbf33c293a9e35c6de686a3e2020231effbc1016ed2e50155
b1e0cb2da092a2feef91bbfee98abc00>NSTNJY+ArialMT AddT42Char 
3 15470 82 <00020044ffe80427043e000d001901ffb0852b58b615180d0d065513b8ff
e8b40d0d06550fb8ffe840650d0d065519180d0d065512070a190c470648
0856065908670669080834103a123a16351845104b124b1645185c055c09
52105d125d1652186d056d0964106d126d1664187701150906050d5b0354
05540a5b0c6c036505650a6c0c0a171c0407111c0b0b144110fff2000b00
0b014000560014fff4000c000c014000560014fff8000d000d0140401056
14241b400d0d02551b400b0b025507b8ffea40110f0f025507180d0d0255
07100b0b025507b8fff0b40b0b065507b8fff0b40d0d065507b8fff0b40f
0f065507b8fff0b40c0c065507b8ffc0400e242534300701000710072007
0307bbfff4000d000d0140b6560731df1b011bb8ffc0400b1e2334301b01
1b0e080d0db80140b4560e0c0c0cb80140b4560e0e0b0bb801404041560e
24000c0e0f025500120d0d0255000c0c0c0255001c0b0b0255000e0b0b06
55000e0d0d0655000c1010065500160c0c065500402425341f003f000200
0c0d0db80140b456000c0c0cb80140b456000c0b0bb80140b65600311a34
37182b10f62b2b2b5d2b2b2b2b2b2b2b2b2bed2b2b2b10712b5df62b5d5d
2b2b2b2b2b2b2b2b2b2bed2b2b2b003fed3fed313001715d0071435c5840
09530553096205620904015d59002b2b2b2b1bb10b11b8032fb46c0b0b04
17b8032fb26c040700183f2b3f2b30315913103736333200151406062322
0013141633323635342623220644a489c5db01167beb8bdffeedb9b28786
b2b38587b2021301278e76fee1fdcdeb82011e010dcccbccd1c5cbca>NSTNJY+ArialMT AddT42Char 
4 2530 88 <00010083ffe803e00426001801b7b0852b58b9001affc040091517340220
1316340fb8fff040191214342b1301240813160c0113160b06000a111c03
0b0033164110fff8000d000d014000560016fff2000b000b014000560016
fff4000c000c0140401c5616251817403336341a40101002551728101002
5517120e0e025517b8ffec400b0d0d025517040c0c025517b8fff4400b0b
0b065517141010065517b8fff8400b0d0d0655170c0f0f065517b8fff640
0d0c0c0655ff1701c01701174e1ab8ffc04016343634b01af01a02701aa0
1ab01aff1a041a0c080d0db80140b4560c0e0b0bb80140b4560c0c0c0cb8
0140b3560c2509b8ffc04010333634f0090100092009d009e0090409b8ff
f8b41010025509b8fff840110e0e025509040c0c0255090a0b0b065509b8
fff640160f0f065509020c0c065509020d0d0655094e194750182b10f62b
2b2b2b2b2b2b5d712bed2b2b2b105d712bf65d712b2b2b2b2b2b2b2b2b2b
2b3cfd2b2b2be4003fed3f3f3c39390111123931304379401a04100e0d0f
0d0206070806080508030610040c1b000d08111b00002b012b2a2a81005d
012b2b2b1bb4000a010311b80330b66c030b16060a0600183f3f3f2b323f
30315921350623222626272635113311141716163332363635113311033f
7cd55ea34f100bb40b116e51518e3bb49cb4486d4f35730292fdb38d3147
51538f880239fbda>NSTNJY+ArialMT AddT42Char 
NSTNJY+ArialMT /CharStrings get begin
/period 17 def
/C 38 def
/o 82 def
/u 88 def
end
NSTNJY+ArialMT /Encoding get
dup 46 /period put
dup 67 /C put
dup 111 /o put
dup 117 /u put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/NSTNJY+ArialMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 3{/.notdef}rp /hyphen /period 
/.notdef /zero /one /two /three /four /five 13{/.notdef}rp 
/C /D 7{/.notdef}rp /L 20{/.notdef}rp /a /.notdef /c 
/.notdef /e /f 2{/.notdef}rp /i 3{/.notdef}rp /m /n 
/o 3{/.notdef}rp /s /t /u 3{/.notdef}rp /y 134{/.notdef}rp]
NSTNJY+ArialMT nf
NSTNJY+ArialMT*1 [24 0 0 -24 0 0 ]msf
656.698 647.96 mo
(0)sh
670.042 647.96 mo
( )sh
656.698 597.503 mo
(5)sh
670.042 597.503 mo
( )sh
651.55 547.046 mo
(1)sh
664.894 547.046 mo
(0)sh
651.55 496.588 mo
(1)sh
664.894 496.588 mo
(5)sh
651.55 446.131 mo
(2)sh
664.894 446.131 mo
(0)sh
651.55 395.674 mo
(2)sh
664.894 395.674 mo
(5)sh
NSTNJY+ArialMT*1 [0 -24 -24 0 0 0 ]msf
618.42 592.107 mo
(C)sh
618.42 574.779 mo
(o)sh
618.42 561.435 mo
(e)sh
618.42 548.091 mo
(f)sh
618.42 541.419 mo
(f)sh
618.42 534.747 mo
(i)sh
618.42 529.419 mo
(c)sh
618.42 517.419 mo
(i)sh
618.42 512.091 mo
(e)sh
618.42 498.747 mo
(n)sh
618.42 485.403 mo
(t)sh
618.42 478.731 mo
( )sh
618.42 472.059 mo
(\()sh
618.42 464.068 mo
(a)sh
618.42 450.724 mo
(.)sh
618.42 444.052 mo
(u)sh
618.42 430.708 mo
(.)sh
618.42 424.036 mo
(\))sh
2 lw
0 lc
2 lj
1 ml
[2 2 7 2 ] 0 dsh
682.05 636.185 mo
689.955 636.185 li
697.492 636.185 li
704.693 636.185 li
711.589 636.185 li
718.201 636.185 li
724.557 636.185 li
730.67 636.185 li
736.563 636.185 li
742.248 636.185 li
747.739 636.185 li
753.053 636.185 li
758.196 636.185 li
763.181 636.185 li
768.018 636.185 li
772.714 636.185 li
777.277 636.185 li
781.716 636.185 li
786.037 636.185 li
790.246 636.185 li
794.348 636.185 li
798.348 636.185 li
802.252 636.185 li
806.064 636.185 li
809.789 636.185 li
813.429 636.185 li
816.99 636.185 li
820.476 636.185 li
823.886 636.185 li
827.226 636.185 li
830.499 636.185 li
833.707 636.185 li
836.854 636.185 li
839.939 636.185 li
842.968 636.185 li
845.94 636.185 li
848.859 636.185 li
851.727 636.185 li
854.545 636.185 li
857.314 636.185 li
860.037 636.185 li
862.715 636.185 li
865.349 636.185 li
867.942 636.185 li
870.493 636.185 li
873.005 636.185 li
875.479 636.185 li
877.914 636.185 li
880.315 636.185 li
882.681 636.185 li
885.012 636.185 li
887.31 636.185 li
889.576 636.185 li
891.811 636.185 li
894.015 636.185 li
896.188 636.185 li
898.335 636.185 li
900.452 636.185 li
902.543 636.185 li
904.606 636.185 li
906.645 636.185 li
908.656 636.185 li
910.646 636.185 li
912.609 636.185 li
914.55 636.185 li
916.467 636.185 li
918.361 636.185 li
920.235 636.185 li
922.087 636.185 li
923.917 636.185 li
925.727 636.185 li
927.517 636.185 li
929.288 636.185 li
931.04 636.185 li
932.772 636.185 li
934.485 636.185 li
936.184 636.185 li
937.861 636.185 li
939.523 636.185 li
941.168 636.185 li
942.796 636.185 li
944.409 636.185 li
946.005 636.185 li
947.585 636.185 li
949.15 636.185 li
950.701 636.185 li
952.236 636.185 li
953.758 636.185 li
955.265 636.185 li
956.758 636.185 li
958.238 636.185 li
959.703 636.185 li
961.157 636.185 li
962.597 636.185 li
964.024 636.185 li
965.438 636.185 li
966.843 636.185 li
968.232 636.185 li
969.611 636.185 li
970.979 636.185 li
972.334 636.185 li
973.68 636.185 li
975.013 636.185 li
976.335 636.185 li
977.647 636.185 li
978.947 636.185 li
980.238 636.185 li
981.52 636.185 li
982.791 636.185 li
984.052 636.185 li
985.303 636.185 li
986.544 636.185 li
987.775 636.185 li
988.998 636.185 li
990.212 636.185 li
991.416 636.185 li
992.612 636.185 li
993.8 636.185 li
994.978 636.185 li
996.148 636.185 li
997.309 636.185 li
998.462 636.185 li
999.606 636.185 li
1000.74 636.185 li
1001.87 636.185 li
1002.99 636.185 li
1004.11 636.185 li
1005.21 636.185 li
1006.31 636.185 li
1007.4 636.185 li
1008.49 636.185 li
1009.56 636.185 li
1010.63 636.185 li
1011.69 636.185 li
1012.75 636.185 li
1013.8 636.185 li
1014.84 636.185 li
1015.88 636.185 li
1016.9 636.185 li
1017.93 636.185 li
1018.94 636.185 li
1019.95 636.185 li
1020.96 636.185 li
1021.95 636.185 li
1022.94 636.185 li
1023.93 636.185 li
1024.91 636.185 li
1025.88 636.185 li
1026.85 636.185 li
1027.81 636.185 li
1028.76 636.185 li
1029.71 636.185 li
1030.66 636.185 li
1031.6 636.185 li
1032.53 636.185 li
1033.46 636.185 li
1034.38 636.185 li
1035.3 636.185 li
1036.21 636.185 li
1037.12 636.185 li
1038.02 636.185 li
1038.92 636.185 li
1039.81 636.185 li
1040.7 636.185 li
1041.58 636.185 li
1042.46 636.185 li
1043.34 636.185 li
1044.21 636.185 li
1045.07 636.185 li
1045.93 636.185 li
1046.78 636.185 li
1047.63 636.185 li
1048.48 636.185 li
1049.32 636.185 li
1050.16 636.185 li
1050.99 636.185 li
1051.82 636.185 li
1052.64 636.185 li
1053.47 636.185 li
1054.28 636.185 li
1055.09 636.185 li
@
[8 8 ] 0 dsh
682.05 388.958 mo
689.955 388.967 li
697.492 388.981 li
704.693 389 li
711.589 389.024 li
718.201 389.058 li
724.557 389.101 li
730.67 389.156 li
736.563 389.224 li
742.248 389.306 li
747.739 389.403 li
753.053 389.52 li
758.196 389.654 li
763.181 389.81 li
768.018 389.987 li
772.714 390.188 li
777.277 390.412 li
781.716 390.661 li
786.037 390.936 li
790.246 391.237 li
794.348 391.565 li
798.348 391.92 li
802.252 392.303 li
806.064 392.714 li
809.789 393.152 li
813.429 393.618 li
816.99 394.11 li
820.476 394.631 li
823.886 395.177 li
827.226 395.751 li
830.499 396.351 li
833.707 396.975 li
836.854 397.624 li
839.939 398.298 li
842.968 398.995 li
845.94 399.715 li
848.859 400.457 li
851.727 401.22 li
854.545 402.003 li
857.314 402.806 li
860.037 403.628 li
862.715 404.468 li
865.349 405.324 li
867.942 406.198 li
870.493 407.086 li
873.005 407.989 li
875.479 408.907 li
877.914 409.837 li
880.315 410.779 li
882.681 411.733 li
885.012 412.698 li
887.31 413.673 li
889.576 414.656 li
891.811 415.649 li
894.015 416.65 li
896.188 417.657 li
898.335 418.67 li
900.452 419.691 li
902.543 420.716 li
904.606 421.747 li
906.645 422.781 li
908.656 423.818 li
910.646 424.86 li
912.609 425.903 li
914.55 426.948 li
916.467 427.995 li
918.361 429.044 li
920.235 430.093 li
922.087 431.142 li
923.917 432.191 li
925.727 433.241 li
927.517 434.289 li
929.288 435.335 li
931.04 436.381 li
932.772 437.424 li
934.485 438.466 li
936.184 439.505 li
937.861 440.541 li
939.523 441.576 li
941.168 442.605 li
942.796 443.633 li
944.409 444.657 li
946.005 445.676 li
947.585 446.692 li
949.15 447.704 li
950.701 448.71 li
952.236 449.714 li
953.758 450.713 li
955.265 451.707 li
956.758 452.695 li
958.238 453.679 li
959.703 454.657 li
961.157 455.631 li
962.597 456.599 li
964.024 457.562 li
965.438 458.519 li
966.843 459.47 li
968.232 460.417 li
969.611 461.356 li
970.979 462.291 li
972.334 463.22 li
973.68 464.143 li
975.013 465.06 li
976.335 465.971 li
977.647 466.876 li
978.947 467.776 li
980.238 468.669 li
981.52 469.556 li
982.791 470.437 li
984.052 471.312 li
985.303 472.181 li
986.544 473.044 li
987.775 473.901 li
988.998 474.752 li
990.212 475.596 li
991.416 476.435 li
992.612 477.268 li
993.8 478.094 li
994.978 478.915 li
996.148 479.729 li
997.309 480.538 li
998.462 481.341 li
999.606 482.138 li
1000.74 482.928 li
1001.87 483.712 li
1002.99 484.492 li
1004.11 485.265 li
1005.21 486.033 li
1006.31 486.794 li
1007.4 487.549 li
1008.49 488.299 li
1009.56 489.043 li
1010.63 489.782 li
1011.69 490.515 li
1012.75 491.242 li
1013.8 491.965 li
1014.84 492.681 li
1015.88 493.392 li
1016.9 494.097 li
1017.93 494.797 li
1018.94 495.492 li
1019.95 496.18 li
1020.96 496.865 li
1021.95 497.542 li
1022.94 498.216 li
1023.93 498.884 li
1024.91 499.548 li
1025.88 500.206 li
1026.85 500.859 li
1027.81 501.506 li
1028.76 502.149 li
1029.71 502.787 li
1030.66 503.42 li
1031.6 504.048 li
1032.53 504.672 li
1033.46 505.291 li
1034.38 505.903 li
1035.3 506.514 li
1036.21 507.117 li
1037.12 507.717 li
1038.02 508.312 li
1038.92 508.903 li
1039.81 509.489 li
1040.7 510.071 li
1041.58 510.647 li
1042.46 511.221 li
1043.34 511.789 li
1044.21 512.353 li
1045.07 512.914 li
1045.93 513.469 li
1046.78 514.02 li
1047.63 514.568 li
1048.48 515.11 li
1049.32 515.65 li
1050.16 516.186 li
1050.99 516.716 li
1051.82 517.243 li
1052.64 517.767 li
1053.47 518.285 li
1054.28 518.8 li
1055.09 519.313 li
@
[2 2 ] 0 dsh
682.05 641.211 mo
689.955 641.201 li
697.492 641.188 li
704.693 641.169 li
711.589 641.145 li
718.201 641.111 li
724.557 641.068 li
730.67 641.014 li
736.563 640.945 li
742.248 640.863 li
747.739 640.766 li
753.053 640.649 li
758.196 640.516 li
763.181 640.359 li
768.018 640.182 li
772.714 639.981 li
777.277 639.758 li
781.716 639.508 li
786.037 639.233 li
790.246 638.932 li
794.348 638.604 li
798.348 638.249 li
802.252 637.866 li
806.064 637.455 li
809.789 637.018 li
813.429 636.552 li
816.99 636.059 li
820.476 635.538 li
823.886 634.992 li
827.226 634.418 li
830.499 633.818 li
833.707 633.194 li
836.854 632.545 li
839.939 631.871 li
842.968 631.174 li
845.94 630.454 li
848.859 629.713 li
851.727 628.948 li
854.545 628.167 li
857.314 627.363 li
860.037 626.541 li
862.715 625.701 li
865.349 624.845 li
867.942 623.972 li
870.493 623.082 li
873.005 622.18 li
875.479 621.263 li
877.914 620.333 li
880.315 619.39 li
882.681 618.436 li
885.012 617.471 li
887.31 616.496 li
889.576 615.513 li
891.811 614.521 li
894.015 613.52 li
896.188 612.512 li
898.335 611.498 li
900.452 610.479 li
902.543 609.453 li
904.606 608.423 li
906.645 607.389 li
908.656 606.351 li
910.646 605.31 li
912.609 604.267 li
914.55 603.221 li
916.467 602.174 li
918.361 601.125 li
920.235 600.076 li
922.087 599.027 li
923.917 597.978 li
925.727 596.929 li
927.517 595.88 li
929.288 594.834 li
931.04 593.788 li
932.772 592.745 li
934.485 591.704 li
936.184 590.664 li
937.861 589.627 li
939.523 588.595 li
941.168 587.563 li
942.796 586.537 li
944.409 585.513 li
946.005 584.493 li
947.585 583.478 li
949.15 582.465 li
950.701 581.458 li
952.236 580.455 li
953.758 579.456 li
955.265 578.463 li
956.758 577.475 li
958.238 576.49 li
959.703 575.512 li
961.157 574.538 li
962.597 573.57 li
964.024 572.607 li
965.438 571.65 li
966.843 570.699 li
968.232 569.754 li
969.611 568.813 li
970.979 567.878 li
972.334 566.95 li
973.68 566.025 li
975.013 565.109 li
976.335 564.198 li
977.647 563.293 li
978.947 562.395 li
980.238 561.501 li
981.52 560.613 li
982.791 559.732 li
984.052 558.856 li
985.303 557.988 li
986.544 557.125 li
987.775 556.269 li
988.998 555.418 li
990.212 554.573 li
991.416 553.734 li
992.612 552.901 li
993.8 552.075 li
994.978 551.254 li
996.148 550.439 li
997.309 549.632 li
998.462 548.828 li
999.606 548.031 li
1000.74 547.242 li
1001.87 546.457 li
1002.99 545.678 li
1004.11 544.904 li
1005.21 544.138 li
1006.31 543.376 li
1007.4 542.619 li
1008.49 541.87 li
1009.56 541.125 li
1010.63 540.386 li
1011.69 539.654 li
1012.75 538.927 li
1013.8 538.205 li
1014.84 537.488 li
1015.88 536.778 li
1016.9 536.072 li
1017.93 535.372 li
1018.94 534.678 li
1019.95 533.989 li
1020.96 533.306 li
1021.95 532.626 li
1022.94 531.953 li
1023.93 531.285 li
1024.91 530.622 li
1025.88 529.964 li
1026.85 529.311 li
1027.81 528.663 li
1028.76 528.02 li
1029.71 527.382 li
1030.66 526.75 li
1031.6 526.121 li
1032.53 525.498 li
1033.46 524.879 li
1034.38 524.266 li
1035.3 523.657 li
1036.21 523.052 li
1037.12 522.452 li
1038.02 521.857 li
1038.92 521.267 li
1039.81 520.68 li
1040.7 520.099 li
1041.58 519.522 li
1042.46 518.948 li
1043.34 518.38 li
1044.21 517.816 li
1045.07 517.256 li
1045.93 516.7 li
1046.78 516.148 li
1047.63 515.602 li
1048.48 515.058 li
1049.32 514.519 li
1050.16 513.985 li
1050.99 513.453 li
1051.82 512.925 li
1052.64 512.403 li
1053.47 511.884 li
1054.28 511.368 li
1055.09 510.856 li
@
685.826 976.835 mo
1056.65 976.835 li
1056.65 691.31 li
685.826 691.31 li
685.826 976.835 li
cp
1 /0 /CSD get_res sepcs
0 sep
f
1 lw
2 lc
1 lj
10 ml
[] 0 dsh
685.826 976.835 mo
1056.65 976.835 li
1 /0 /CSD get_res sepcs
1 sep
@
685.826 691.31 mo
1056.65 691.31 li
@
945.021 976.835 mo
945.021 980.439 li
@
751.124 976.835 mo
751.124 978.637 li
@
797.454 976.835 mo
797.454 978.637 li
@
833.392 976.835 mo
833.392 978.637 li
@
862.754 976.835 mo
862.754 978.637 li
@
887.578 976.835 mo
887.578 978.637 li
@
909.082 976.835 mo
909.082 978.637 li
@
928.051 976.835 mo
928.051 978.637 li
@
685.826 976.835 mo
685.826 691.31 li
@
1056.65 976.835 mo
1056.65 691.31 li
@
685.826 924.672 mo
682.117 924.672 li
@
685.826 869.764 mo
682.117 869.764 li
@
685.826 814.854 mo
682.117 814.854 li
@
685.826 759.946 mo
682.117 759.946 li
@
685.826 705.037 mo
682.117 705.037 li
@
2 lw
0 lc
685.826 706.079 mo
699.838 707.142 li
712.73 709.115 li
724.664 712.39 li
735.774 717.339 li
746.169 724.238 li
755.933 733.202 li
765.139 744.139 li
773.846 756.755 li
782.106 770.604 li
789.963 785.163 li
797.454 799.911 li
804.613 814.394 li
811.466 828.258 li
818.041 841.264 li
824.359 853.272 li
830.436 864.227 li
836.294 874.13 li
841.943 883.029 li
847.402 890.992 li
852.684 898.101 li
857.798 904.438 li
862.754 910.086 li
867.561 915.123 li
872.23 919.623 li
876.767 923.646 li
881.179 927.254 li
885.474 930.491 li
889.655 933.406 li
893.734 936.037 li
897.709 938.416 li
901.591 940.572 li
905.381 942.533 li
909.082 944.319 li
912.702 945.951 li
916.242 947.444 li
919.705 948.813 li
923.097 950.074 li
926.417 951.234 li
929.67 952.306 li
932.858 953.297 li
935.987 954.216 li
939.055 955.068 li
942.063 955.863 li
945.021 956.603 li
947.922 957.294 li
950.771 957.94 li
953.572 958.543 li
956.325 959.111 li
959.032 959.645 li
961.693 960.145 li
964.313 960.616 li
966.89 961.062 li
969.426 961.482 li
971.922 961.88 li
974.382 962.256 li
976.803 962.611 li
979.189 962.949 li
981.541 963.27 li
983.858 963.574 li
986.144 963.864 li
988.396 964.141 li
990.615 964.405 li
992.808 964.656 li
994.969 964.896 li
997.102 965.125 li
999.207 965.345 li
1001.29 965.555 li
1003.34 965.756 li
1005.36 965.948 li
1007.36 966.133 li
1009.34 966.31 li
1011.29 966.48 li
1013.22 966.646 li
1015.13 966.803 li
1017.01 966.954 li
1018.87 967.1 li
1020.71 967.24 li
1022.53 967.376 li
1024.33 967.508 li
1026.11 967.633 li
1027.87 967.755 li
1029.61 967.873 li
1031.33 967.987 li
1033.04 968.097 li
1034.72 968.203 li
1036.39 968.307 li
1038.04 968.407 li
1039.68 968.504 li
1041.3 968.598 li
1042.9 968.688 li
1044.49 968.776 li
1046.06 968.863 li
1047.62 968.946 li
1049.16 969.026 li
1050.68 969.104 li
1052.2 969.181 li
1053.69 969.256 li
1055.18 969.327 li
1056.65 969.397 li
1 /0 /CSD get_res sepcs
.7 sep
@
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: RWKBAA+ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal NSTNJY+ArialMT gcheck setglobal} if
3 438 15 <000100aafede018300cd000a0064b0852b58b50a030007ab06b801504026
01033c0202010a013c000a020301033c000638073a4f005f006f007f00a0
000500a00ba198182b10f45df4e410ed3c103c003fed3c103c10ed10fded
0111123931301bb507060140000800183f1acd2fcd303159333533151406
0727363637b6cd505732393603cdcd718b264d19615b>NSTNJY+ArialMT AddT42Char 
3 4168 25 <0002004dffe7041505c0001d002a01e9b0852b58b10202435458401f0f01
1f015f0103011b281e400d010d0d14051e1b05221e140d0a1e01002510b8
fff440190d0d0255101e17100f0f025517100c0c0255170c0d0d0255172f
2b2b2bcd2f2bcdd4cd10c5003fed3fed12392f5ded10c45d31301b402d6b
190144074015441944205a1254206b03640764086a1264207408751c8508
861cd608d4161107200d0d065527b8ffe0b40d0d065523b8ffe0401b0d0d
065521200d0d0655281e400d500d020d0d141b01d35f000100b802684009
051e1b05221e140d01b80138b200b5254110fff4000c000c014000560025
fff2000b000b014000560025fff8000d000d014040115625731040212334
301001001010100210b8fff0b70c0c065510902c0ab80138b31e0c0c0cb8
0140b4561e0e0b0bb80140b4561e080d0dbb01400056001e0139400d3f17
5f176f177f170417100b0bb80140b45617100c0db80140400e5617160c0c
065517160d0d065517b80224b32bc78b182b10f62b2b2b2b5ded2b2b2bed
10f62b5d712bed2b2b2bf4ed003fed3fedfd5de41112392f5ded3130b002
43b0405058b90007ffe0b42720232021b8ffe00138383838592b2b2b2b01
5d005d591bb50101050a0d28b8032fb56c0d0d1b1422b8032fb46c140d1b
05b8032fb26c1b0500183f2b3f2b11392f2b3212392f3031590107262726
232207060607363633321215140606232200111037363332160114161633
323635342623220603fbb3182c496b564155620241bc67b4fd77d084e1fe
e49d89e8adddfd374f8e4e72a4a27b7aaa04530e6a304d303eeedc6360fe
f7d28aed7e014b017c01a9c1a8c2fcdd5daa59b89e98afaf>NSTNJY+ArialMT AddT42Char 
3 4792 27 <00030053ffe7041905c000170023003002c6b0852b58b10202435458b40c
001b1e2eb8ffc04017131302552e2e12211e0605281e120d1e090c0c0c02
5509b8fff4b60d0d0255092b0fb8fff0b40f0f02550fb8ffe8b40b0b0255
0fb8ffe8b60d0d02550f1803b8fff0b41010025503b8fff0b40f0f025503
b8fff440190d0d02550324150c0b0b0255150c0c0c0255150c0d0d025515
2f2b2b2bcd2f2b2b2bcd2f2b2b2bcd2f2b2bcd003fed3fed12392f2bed39
3931301bb10602435458b71e090c0c0c065509b8fff4b60d0d0655092b0f
b8ffe4b40f0f06550fb8ffe4b60d0d06550f1803b8fff0b40f0f065503b8
fffc40220d0d06550324150c0c0c0655150c0d0d0655150c001b1e2e2e12
211e0605281e120d003fed3fed12392fed3939012f2b2bcd2f2b2bcd2f2b
2bcd2f2b2bcd31301b404d351601291649164926e60ce930050930017d00
7d017c047408710b720c750d7a178b008a018c048608810b840c860d8d17
cc11c613120c001e18000c1b1e2ea02e012e12211e0605281e120d1e4110
fff4000c000c01400056001efff2000b000b01400056001efff8000d000d
0140b6561e73bf09010941120267002bfff4000c000c01400056002bfff2
000b000b01400056002bfff8000d000d01404011562b730f40202334300f
01000f100f020fb80191b432180c0c0cb80140b456180e0b0bb80140b456
18080d0db80140b6561873b0030103b80267b3240c0c0cb80140b456240e
0b0bb80140b45624080d0db80140b356247315b8ffc0400e212334201540
1502159031c78b182b10f65d2bed2b2b2bf45ded2b2b2b10f45d712bed2b
2b2bf45ded2b2b2b003fed3fed12395d2fed393901111239393130b00243
b0405058b90022ffe0b21c201ab8ffe0b220202fb8ffe0b22d2026b8ffe0
b1292001383838383838383859015d7271007159591bb3000c1b2eb8032f
b56c1b1b061228b8032fb46c120d0621b8032fb26c060500183f2b3f2b11
392f2b393930315901262635343633321615140607161615140023220035
343613141633323635342623220603141616333236353426232206016a70
6ce6bfc0ea6b6d878dfef6d9d9fef69162866b6885896667883a49905381
a8ad827fa7031b29986aa0dadfa06697292cc488bcff000101c08fc10154
6884835f638784fcff4d904fa68082aaa800>NSTNJY+ArialMT AddT42Char 
3 6490 40 <000100a2000004e805ba000b00edb0852b58401506051e08080707000304
1e0201020a091e0b000807b8ffc040141012340754034a200a200d020a1a
0d0409020c0cb80140b456090e0b0bb80140b456090a0c0db80140400e56
09200120000100201010025500b8fff6b40f0f025500b8fff6b40d0d0255
00b8fffab40c0c025500b8fffab40909025500b8fffab40c0c065500b8ff
f0400a0d0d0655005d0c3b5b182b4e10f42b2b2b2b2b2b2b5d3c4dfd2b2b
2b3c4e10f65d4df4e42b003f3cfd3c3f3cfd3c12392f3c10fd3c31301bb1
0508b80333b56c0505010009b80333b46c00080104b80333b26c01020018
3f2b3f2b11392f2b303159331121152111211521112115a20424fc9e032b
fcd5038405baadfe3facfe0dad00>NSTNJY+ArialMT AddT42Char 
3 6774 44 <000100bf0000018105ba00030150b0852b58b302020c0cb80140b4560302
0c0cb80140b45602070b0bb80140b45603070b0b410d014000560001fff9
000b000b014000560000fff9000b000b0140b45602050c0db80140b45603
050c0d410d014000560001fffb000c000d014000560000fffb000c000d01
40b656010200080205b8ffc0b3383d3405b8ffc0b333343405b8ffc0b32d
303405b8ffc0b328293405b8ffc0b323253405b8ffc0b31d1e3405b8ffc0
b3181a3405b8ffc0402a0d103420059005af050303200100008f00a000b0
00042f0040005000df00f000051220008f0090000305b8ffc0400b0d0d02
5500181010025500b8ffecb40f0f025500b8ffeeb40d0d025500b8fff640
100c0c025500200b0b065500a204d659182b10f62b2b2b2b2b2b5d435c58
b2800001015d5971723cfd5d2b2b2b2b2b2b2b2b3c003f3f3130012b2b2b
2b2b2b2b2b2b2b1bb30008010200183f3f30315933113311bfc205bafa46
>NSTNJY+ArialMT AddT42Char 
3 7134 46 <000100960000055205ba000b0254b0852b58401e0322373908093a270a35
06360a470a57038603d70307760ad903d90a0306b8fff440180d0d025528
058c048a05aa04ea08050a04013504d6040209b8ffe04009122134032012
213403b8ffdeb30c391209b8ffe0b312213408b8ffe0b312213404b8ffe0
b31d213404b8ffc0b312163408b8ffde40431939080925253d080919193d
042a18184255060607090a09080a0503040420050a1405050a0908082007
06140707060a0a000502040102070b0800080a03020b010004b8023a400f
300501a005b005c005e00504054a08b8023a400b30070120078007b00703
07b80286b30b020c0cb80140b4560b0e0b0bb80140b4560b0a0c0db80140
400d560b2020000100201010025500b8fff6b40f0f025500b8fff6b40d0d
025500b8fffab40c0c025500b8fffab40c0c065500b8fff2400a0d0d0655
005d0c3ba8182b10f42b2b2b2b2b2b5ded2b2b2bfd5d71edf45d71ed103c
103c3c3c003f3c3c3c3f3c3c3c12392f87052e2b0e7d10c487052e182b04
7d10c40708103c083c014bb018534bb01b515ab00243b040505a58b90004
ffd83859b10602435458b90004fff0b30c113403b8fff040170c11340610
0e113408100e103409100e11340a100d1034002b2b2b2b2b2b592b313001
2b2b2b2b2b2b2b435c58401109221939082c1939042c193904221b3905b8
ffdeb616390422163906b8ffde400b1239082214390440143908b8ffdeb5
2539044015392b2b2b2b2b2b2b2b2b2b2b59002b2b2b0171725d2b00715d
2b2b1b401109060604030a0a0001080800080402010200183f3f3f3f1112
392f331239113330315933113311012101012101071196c202d80107fd99
0282ff00fdf6f005bafd2902d7fdaefc9802e6eafe04>NSTNJY+ArialMT AddT42Char 
3 7980 55 <00010030000004ba05ba00070117b0852b58b306020c0cb80140b4560702
0c0cb80140b45606070b0bb80140b45607070b0b410d014000560001fff9
000b000b014000560000fff9000b000b0140b45606050c0db80140b45607
050c0d410d014000560001fffb000c000d014000560000fffb000c000d01
40400e5605021e04030200080706050409b80273b320040104b80101b706
2001022f030103b80101b5010120000100b8ffe8400b1010025500080f0f
025500b8fff2b40c0c025500b8ffe2b40d0d025500b8fffcb40c0c065500
b8fffeb40d0d065500b80273b308b699182b10f62b2b2b2b2b2b5d3c10f4
5d3c10fde45de6103c103c003f3f3cfd3c3130012b2b2b2b2b2b2b2b2b2b
1bb40008060302b80333b26c030200183f2b323f30315921112135211521
110213fe1d048afe1b050dadadfaf300>NSTNJY+ArialMT AddT42Char 
3 12276 74 <00020042fe5103ea043e001e002a0229b0852b5840600b0b05142c0b2514
4c0b451406091d191d2c0b26142c23390b36144a0b46145607580b680bfa
0af5150e2e232c273e233e274c27902ca02c07362136293f2c460b462145
2954215429690763216329602c802cda27e821ee23ef271117160615b802
b1b4281c130701b802aa401020003000600070008000c000d0000700b802
7d4010051c1c0f0a45221c0c0a16153325330a4110fff2000b000b014000
56000afff2000c000c01400056000afff8000d000d01404024560a251818
d017011017401760178017042c400b0c02552c400d0d0255171210100255
17b8fff440110f0f025517060e0e025517160d0d025517b8ffea400b0b0b
065517121010065517b8ffeeb40c0c065517b8fffcb40d0d065517410aff
fa000c000c014000560017fffa000d000d0140400c5617740f012500221f
0e0b0bb80140b4561f080d0db80140b4561f0c0c0cb801404017561f24bf
0fcf0fdf0fff0f041f0f3f0f4f0f030f0c0c0cb80140b4560f100d0db801
40402e560f200b0b02550f1a0c0c02550f220d0d02550f1c0b0b06550f0c
0d0d06550f1a0c0c06550f192b2c74213450182b2b4ef42b2b2b2b2b2b2b
2b5d714ded2b2b2bf4ed10fd2b2b2b2b2b2b2b2b2b2b2b2b5d713c10fd2b
2b2be4f63c003fede43fedfd5de43fede43f3c3130015d71005d711b400a
00000116030000131c05b8032fb56c1c0f0a0c22b8032fb76c0c0a160615
1328b8032fb26c130700183f2b323f3f2b393f2b12392f5f5e5d30315917
171617163332363736270623220235341236333217353311140606232226
13141633323635342623220666af0b3243747d88180e0176b0dbf06ed18d
bc7aa665dba0beea99a67d7ca8ad7a78a8581a512532645a37b08b013cdd
9801018c9880fc6af8cf78ab032ad1c0bfccc3c6c300>NSTNJY+ArialMT AddT42Char 
3 13518 79 <000100830000013705ba00030181b0852b58b3020a0b0bb80140b456030a
0b0b410d014000560001fffc000b000b014000560000fffc000b000b0140
b456020b0c0cb80140b456030b0c0c410d014000560001fffd000c000c01
4000560000fffd000c000c0140b45602040d0db80140b45603040d0d410d
014000560001fffc000d000d014000560000fffc000d000d0140b7560536
0b0b025505b8ffc0b337383405b8ffc0b334353405b8ffc0b330313405b8
ffc0b322253405b8ffc040251517340f051f059f05df05044f05df05f005
031f0570058005ff05040100000a0203250100b8ffc0b337383400b8ffc0
40153335349f0001c000f0000200002000d000e0000400b8fff8b4101002
5500b8fffa401d0e0e025500040c0c0255000a0b0b025500140b0b065500
081010065500b8fffeb40d0d065500b8ffffb40c0c065500b8fffc400a0c
0c0655004e044750182b10f62b2b2b2b2b2b2b2b2b5d71722b2b3cfd3c00
3f3f3130015d71722b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b1bb3000a
010000183f3f3031593311331183b405bafa4600>NSTNJY+ArialMT AddT42Char 
4 0 83 <00020087fe690421043e0012001e01d5b0852b5840740c102d103d104b10
043f20b020021f20290c231d3215321d421d70209020083a173a1b4a174a
1b59085b0c5c175c1b6a086b0c69106d176b1bc020d314dd18dd1ad31ee4
14e41ee020ff201623042b102b1535043a1046044a105a10e50beb1dfe10
0b110e03161c1c06070106161c0e0b000e194110fff2000b000b01400056
0019fff4000c000c014000560019fff8000d000d0140401c561924d00a01
100a400a600a800a0420400b0b025520400d0d02550ab8ffe6400b0f0f02
550a180d0d02550ab8fffab40c0c02550ab8ffeeb40b0b06550ab8fff4b4
0f0f06550ab8ffe8400f0c0c06550a74011333023312080d0db80140b456
120e0b0bb80140b456120c0c0cb8014040195612250000c001019001a001
b001f001041f013f014f010301b8fffc401d0e0e025501100d0d02550110
0c0c025501100b0b0255010c0b0b065501b8fff6b41010065501b8fffc40
160f0f0655010c0c0c065501120d0d065501191f473718012b4e10f42b2b
2b2b2b2b2b2b2b5d71723c4d10fd2b2b2bf4e410fd2b2b2b2b2b2b2b2b5d
71ed2b2b2b003f3fed3f3fed113912393130005d015d717200711bb4000e
110e16b8032fb76c0e0b010603061cb8032db26c060700183f2b323f3f2b
393f30315913113315363633321616151402062322262711031416333236
35342623220687a43a926888d06a75df7b5a8f2e11a67678aba77473b1fe
6905bd8a51518cff98a3fefb8b4c3afdfb03a4cdc4cbd5cbcad7>NSTNJY+ArialMT AddT42Char 
4 566 85 <00010085000002c6043e00110107b0852b58403b2f130110040123043404
4304530466047404060911080908090d1311090d000308010b1c06070106
000a09289008010822201301130222110e0b0bb80140b45611080d0db801
40b456110c0c0cb80140b45611250100b8ffc04010333634f00001000020
00d000e0000400b8fff8b41010025500b8fff840110e0e025500040c0c02
5500060b0b025500b8fffcb41010065500b8fff440160f0f065500060c0c
065500080d0d0655004e1247c4182b10f62b2b2b2b2b2b2b2b5d712b3cfd
2b2b2be4105df472e4003f3f3fed11393911393901111239390010c9870e
7dc43130005d72015d1bb7000a01060903060bb80336b26c060700183f2b
32323f3f30315933113315363633321707262322060706151185a23e693f
5b5e3e42423b5e141e0426a171483aa727473f6072fdd400>NSTNJY+ArialMT AddT42Char 
4 3048 89 <0001001a000003e80426000a0263b0852b58bc0008fff2000b000b0140b4
56020e0b0b410d014000560000ffea000d000d014000560008ffea000d00
0d0140b45602160d0d410d014000560000fff4000c000c014000560008ff
f0000c000c0140b45602100c0cb901400056b1020243545840170508000a
080601060a0005090805010205240f0f0255052f2bddcd10ddcd11333300
3f3f3f123931301bb7350501002211390ab8ffde400d11390916121c3408
16121c3402b8ffeab3121c3401b8ffeab3121c340ab8ffd840091e213400
281e21340ab8ffe8400922253400162225340ab8ffda407e282e34002028
2e340f0c29002809260a3900350a4800470a560156025908580966016602
6908690978007701770279087809770a870187028603890788088a099d00
9809910aac00a20abd00b707b10ac900c50ada00d50aec00e30afb00f40a
2c0a00050a1800160a2800260a370a4f00400a09054012163405400b0d34
b10602435458400905010008060106000ab8fff4400f0d0d06550a000c0d
0d065500050908b8fff440120d0d0655080501020c0d0d06550205050c0b
1112392fdd2bcd10dd2bcd10cd2bcd2b002f3f3f11123931301b40370a07
080825090a1409090a0003020225010014010100050a0a000a0908080202
0106070a09030001052f0c010c22084040400980090209b8011bb5400580
050205b8011b400920024001220bead2182b10f6ed1a19fd5dfd5d1a18ed
e45d11123939123939003f3c103c103c3f3c113987052e2b877dc4872e18
2b877dc4593130002b2b01715d2b2b2b2b2b2b2b2b2b2b2b2b005d59012b
2b2b2b2b2b2b2b1bb605000a0806010600183f3f3f333031592101331316
17363713330101aefe6cbee4251f182becb9fe6e0426fd84676f54760288
fbda>NSTNJY+ArialMT AddT42Char 
NSTNJY+ArialMT /CharStrings get begin
/comma 15 def
/six 25 def
/eight 27 def
/E 40 def
/I 44 def
/K 46 def
/T 55 def
/g 74 def
/l 79 def
/p 83 def
/r 85 def
/v 89 def
end
NSTNJY+ArialMT /Encoding get
dup 44 /comma put
dup 54 /six put
dup 56 /eight put
dup 69 /E put
dup 73 /I put
dup 75 /K put
dup 84 /T put
dup 103 /g put
dup 108 /l put
dup 112 /p put
dup 114 /r put
dup 118 /v put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/NSTNJY+ArialMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /hyphen 
/period /.notdef /zero /one /two /three /four /five 
/six /.notdef /eight 10{/.notdef}rp /C /D /E 3{/.notdef}rp 
/I /.notdef /K /L 7{/.notdef}rp /T 12{/.notdef}rp /a 
/.notdef /c /.notdef /e /f /g /.notdef /i 
2{/.notdef}rp /l /m /n /o /p /.notdef /r 
/s /t /u /v 2{/.notdef}rp /y 134{/.notdef}rp]
NSTNJY+ArialMT nf
NSTNJY+ArialMT*1 [24 0 0 -24 0 0 ]msf
90.7119 1009.64 mo
(0)sh
104.056 1009.64 mo
( )sh
110.728 1009.64 mo
( )sh
180.691 1009.64 mo
(5)sh
194.035 1009.64 mo
(0)sh
207.379 1009.64 mo
( )sh
272.671 1009.64 mo
(1)sh
286.015 1009.64 mo
(0)sh
299.359 1009.64 mo
(0)sh
370.149 1009.64 mo
(1)sh
383.493 1009.64 mo
(5)sh
396.837 1009.64 mo
(0)sh
459.629 1009.64 mo
(2)sh
472.973 1009.64 mo
(0)sh
486.317 1009.64 mo
(0)sh
236.622 1054.59 mo
(T)sh
251.286 1054.59 mo
(i)sh
256.614 1054.59 mo
(m)sh
276.606 1054.59 mo
(e)sh
289.95 1054.59 mo
( )sh
296.622 1054.59 mo
(\()sh
304.614 1054.59 mo
(n)sh
317.958 1054.59 mo
(s)sh
329.958 1054.59 mo
(\))sh
421.729 961.072 mo
(2)sh
435.073 961.072 mo
( )sh
441.745 961.072 mo
(K)sh
421.729 696.866 mo
(5)sh
435.073 696.866 mo
( )sh
441.745 696.866 mo
(K)sh
421.729 459.262 mo
(1)sh
435.073 459.262 mo
(0)sh
448.417 459.262 mo
( )sh
455.089 459.262 mo
(K)sh
421.729 259.057 mo
(2)sh
435.073 259.057 mo
(0)sh
448.417 259.057 mo
( )sh
455.089 259.057 mo
(K)sh
NSTNJY+ArialMT*1 [0 -24 -24 0 0 0 ]msf
50.1504 663.337 mo
(I)sh
50.1504 656.665 mo
(n)sh
50.1504 643.321 mo
(t)sh
50.1504 636.649 mo
(e)sh
50.1504 623.305 mo
(n)sh
50.1504 609.961 mo
(s)sh
50.1504 597.961 mo
(i)sh
50.1504 592.633 mo
(t)sh
50.1504 585.961 mo
(y)sh
50.1504 573.961 mo
( )sh
50.1504 567.289 mo
(\()sh
50.1504 559.297 mo
(a)sh
50.1504 545.953 mo
(.)sh
50.1504 539.281 mo
(u)sh
50.1504 525.937 mo
(.)sh
50.1504 519.265 mo
(,)sh
50.1504 512.593 mo
( )sh
50.1504 505.921 mo
(l)sh
50.1504 500.593 mo
(o)sh
50.1504 487.249 mo
(g)sh
50.1504 473.905 mo
( )sh
50.1504 467.233 mo
(s)sh
50.1504 455.233 mo
(c)sh
50.1504 443.233 mo
(a)sh
50.1504 429.889 mo
(l)sh
50.1504 424.561 mo
(e)sh
50.1504 411.217 mo
(\))sh
NSTNJY+ArialMT*1 [24 0 0 -24 0 0 ]msf
932.193 1009.64 mo
(1)sh
945.537 1009.64 mo
(0)sh
781.883 1054.59 mo
(T)sh
796.547 1054.59 mo
(e)sh
809.891 1054.59 mo
(m)sh
829.882 1054.59 mo
(p)sh
843.226 1054.59 mo
(e)sh
856.57 1054.59 mo
(r)sh
864.562 1054.59 mo
(a)sh
877.906 1054.59 mo
(t)sh
884.578 1054.59 mo
(u)sh
897.922 1054.59 mo
(r)sh
905.914 1054.59 mo
(e)sh
919.258 1054.59 mo
(,)sh
925.93 1054.59 mo
( )sh
932.602 1054.59 mo
(T)sh
947.266 1054.59 mo
( )sh
953.938 1054.59 mo
(\()sh
961.93 1054.59 mo
(K)sh
977.938 1054.59 mo
(\))sh
627.784 936.402 mo
(2)sh
641.128 936.402 mo
(0)sh
654.472 936.402 mo
(0)sh
667.816 936.402 mo
( )sh
627.784 881.494 mo
(4)sh
641.128 881.494 mo
(0)sh
654.472 881.494 mo
(0)sh
667.816 881.494 mo
( )sh
627.784 826.586 mo
(6)sh
641.128 826.586 mo
(0)sh
654.472 826.586 mo
(0)sh
667.816 826.586 mo
( )sh
627.784 771.678 mo
(8)sh
641.128 771.678 mo
(0)sh
654.472 771.678 mo
(0)sh
667.816 771.678 mo
( )sh
622.637 716.771 mo
(1)sh
635.981 716.771 mo
(0)sh
649.325 716.771 mo
(0)sh
662.669 716.771 mo
(0)sh
NSTNJY+ArialMT*1 [0 -24 -24 0 0 0 ]msf
609.431 1008.02 mo
(E)sh
609.431 992.013 mo
(f)sh
609.431 985.341 mo
(f)sh
609.431 978.669 mo
(e)sh
609.431 965.325 mo
(c)sh
609.431 953.325 mo
(t)sh
609.431 946.653 mo
(i)sh
609.431 941.325 mo
(v)sh
609.431 929.325 mo
(e)sh
609.431 915.981 mo
( )sh
609.431 909.309 mo
(L)sh
609.431 895.965 mo
(o)sh
609.431 882.621 mo
(n)sh
609.431 869.277 mo
(g)sh
609.431 855.933 mo
( )sh
609.431 849.261 mo
(L)sh
609.431 835.917 mo
(i)sh
609.431 830.589 mo
(f)sh
609.431 823.917 mo
(e)sh
609.431 810.573 mo
(t)sh
609.431 803.901 mo
(i)sh
609.431 798.573 mo
(m)sh
609.431 778.582 mo
(e)sh
609.431 765.238 mo
(,)sh
609.431 758.566 mo
( )sh
609.431 725.308 mo
( )sh
609.431 718.636 mo
(\()sh
609.431 710.644 mo
(n)sh
609.431 697.3 mo
(s)sh
609.431 685.3 mo
(\))sh
%ADOBeginSubsetFont: CYCCAA+SymbolMT Initial
ct_T42Dict begin
0 -0.219 1.109 1.004
 256 array 0 1 255 {1 index exch /.notdef put} for  /CYCCAA+SymbolMT
Type42DictBegin
[<00010000000c000c000c000c4f532f3259acef4f000000cc000000566376
74202ac4fb8500000124000005046670676d5d3ae803000006280000059f
676c7966a8e0aea5000024700000055c686561645edb5fad00000bc80000
0036686865610fa0038100000c0000000024686d74787750493e00000c24
000002fc6c6f6361a15e9f9300000f20000001826d617870021906370000
10a4000000206e616d6552a769f2000010c4000010377072657056a9a53f
000020fc0000037367646972000000000000000000000000000104cd0190
00050008059a053300000125059a0533000003a0006602120c0305050102
01070602050700000000000000000000000000000000544d43200040f020
f0fe058cfe460133080b01c280000000000000000000055d0031054c001f
054c001c0394001b0000ffe10000ffe10000ffe4fe59ffed056b0023fe6a
ffdc270f000000b4000000b4000000000000000000610025005e0029004a
00c200f000be012a005000c0ffd0006300580277002d004a008f00b700c0
00de004400640002001a017c0020ff9c008c0026008300a00039041affb5
004c00e8080f00160024003a016f000600150067009e01dc0049004b002d
003b00470089007200470051006700f7013801dc0001000a005d00610094
009b00be00ce00df00190026002e00d6010701f7ffbb004300530063007b
00b900de0542058b0013009100a700a900c100e5012e01a401ea03eeffb5
ffccffeb0026002900310036005b00620062009200a100a700a700cb0223
03a3ff1aff7bffa8ffc8001c004400ab00b400c100c500ce00f601200156
016302a60379fefaff6effab0000000c00150024003a003a0041004c004e
007400a500ce00d600fb0109010901820220023f0263fe11ff170007001f
0020002b00530055006d007e0088008d0094009a009f00af00e8013f0168
01cd01ee020d028002bf0550074e074e09bffdd5ff47fff6000c000c0021
00290057006b0078007e009200930096009a00a100a500c400c400f000fd
0136013b013e01490152018f018601a501f8022b02db02fb030e030f032c
03590360037c03e203f90805fd4ffe97fed0ff50ff78000100010006000a
0025004300440054005c007000730077007c00800088008e008e00900091
00ab00ab00b000b900bf00bf00c300dd00e300e300e600e800ec01020105
0109010a012a012a01300130013b0140014a0155015f01670173019701b6
01b801be01c501ea01f4023402360239024f0252026702700274029002b0
02b102bf02e402f302fb033a03450373037f03ab03c203c803d203da0400
044a046104690475049404b004d504f004f404fe050005230523052e0561
05a0fda2fe4bfe5bff26ff3bff62ff8dff90ff90ffe80007001e00250026
002700440050006200630066006700700070007100710079007e00850091
0096009e00a100a100a500b600b800bc00c000c200c500c600d000da00dd
00dd00e200f700f901000102010501150121012d01310136013d01470147
015a01680176017c0180018e019a01a501b101b501b501c001dc01ea01fe
023902560259025e0276027c028d0297029b02b902c002d602db02ff0306
030f03180347034b0357035b035e0374039603980399039e039f03b803c0
03c60402043a045004720483049004a204af04c704d304dc0530053b058a
058a05b005b505bd05e60612061b0634065306b80706087908e708fe00b3
00c700b100b5000000000000000000000000000000000188011001b100ad
01e70304038002cc0258020b02d6018204cf01270274023c0100058e006e
00f202c0021d01d2023701570363015a002500820166015b009d031c03a2
034a00cc056e0153035001640053049700fc05c30061058a02b20302058a
03fd01f902ab0068008e026bfda9ff59010e005301a402a600ab007d003c
0029041a00d6023904b90125022902bf07ae01b8003e07060339033a080f
07ae01a403e300000053080f01ea006103e2004c00e102a6035202a6080f
00e601dc074f006e00fd03af0000007d003e01a4fe1100a905590260011c
02a4014cfd83fdd8039bff9f011902e20000fd11fd41024301b60155ffaa
02be00ef0097fef904e000be02db005501dc0063006b007800f200530077
003a015600fc020d00290053006100704040543f3e3d3c3b3a3938373534
333231302f2e2d2c2b2a292827262524232221201f1e1d1c1b1a19181716
1514131211100f0e0d0c0b0a090807060504030201002c4523466020b026
60b004262348482d2c452346236120b02661b004262348482d2c45234660
b0206120b04660b004262348482d2c4523462361b0206020b02661b02061
b004262348482d2c45234660b0406120b06660b004262348482d2c452346
2361b0406020b02661b04061b004262348482d2c0110203c003c2d2c2045
2320b0cd442320b8015a51582320b08d44235920b0ed51582320b04d4423
5920b0042651582320b00d44235921212d2c20204518684420b001602045
b04676688a4560442d2c01b10b0a432343650a2d2c00b10a0b4323430b2d
2c00b0172370b101173e01b0172370b10217453ab10200080d2d2c45b01a
234445b01923442d2c2045b00325456164b050515845441b2121592d2cb0
0143632362b0002342b00f2b2d2c2045b0004360442d2c01b00643b00743
650a2d2c2069b04061b0008b20b12cc08a8cb8100062602b0c642364615c
58b00361592d2c45b0112bb0172344b0177ae4182d2c45b0112bb0172344
2d2cb01243588745b0112bb0172344b0177ae41b038a45186920b0172344
8a8a8720b0a05158b0112bb0172344b0177ae41b21b0177ae45959182d2c
2d2cb0022546608a46b040618c482d2c4b53205c58b002855958b0018559
2d2c20b0032545b019234445b01a23444565234520b00325606a20b00923
4223688a6a606120b01a8ab000527921b21a1a40b9ffe0001a45208a5458
2321b03f1b235961441cb114008a5279b31940201945208a54582321b03f
1b235961442d2cb110114323430b2d2cb10e0f4323430b2d2cb10c0d4323
430b2d2cb10c0d432343650b2d2cb10e0f432343650b2d2cb11011432343
650b2d2c4b525845441b2121592d2c0120b003252349b04060b0206320b0
00525823b002253823b002256538008a63381b212121212159012d2c4bb0
6451584569b00943608a103a1b212121592d2c01b005251023208af500b0
016023edec2d2c01b005251023208af500b0016123edec2d2c01b0062510
f500edec2d2c20b001600110203c003c2d2c20b001610110203c003c2d2c
b02b2bb02a2a2d2c00b00743b006430b2d2c3eb02a2a2d2c352d2c76b802
4123701020b802414520b0005058b00161593a2f182d2c21210c6423648b
b84000622d2c21b08051580c6423648bb82000621bb200402f2b59b00260
2d2c21b0c051580c6423648bb81555621bb200802f2b59b002602d2c0c64
23648bb84000626023212d2cb4000100000015b00826b00826b00826b008
260f10161345683ab001162d2cb4000100000015b00826b00826b00826b0
08260f1016134568653ab001162d2c4b53234b515a5820458a60441b2121
592d2c4b545820458a60441b2121592d2c4b53234b515a58381b2121592d
2c4b5458381b2121592d2cb0134358031b02592d2cb0134358021b03592d
2c4b54b012435c5a58381b2121592d2cb012435c580cb00425b00425060c
6423646164b807085158b00425b00425012046b01060482046b010604859
0a21211b2121592d2cb012435c580cb00425b00425060c6423646164b807
085158b00425b00425012046b8fff060482046b8fff06048590a21211b21
21592d2c4b53234b515a58b03a2b1b2121592d2c4b53234b515a58b03b2b
1b2121592d2c4b53234b515ab012435c5a58381b2121592d2c0c8a034b54
b00426024b545a8a8a0ab012435c5a58381b2121592d2cb1020042b12301
8851b1400188535a58b910000020885458b202010243604259b124018851
58b920000040885458b202020243604259b12401885458b2022002436042
004b014b5258b2020802436042591bb940000080885458b2020402436042
59b94000008063b80100885458b202080243604259b94000010063b80200
885458b2021002436042595959592d000001000000050000b7e617295f0f
3cf5081d080000000000a348bc3b00000000c1473905fffffe3e08e7080b
0000000b000100000000000000010000080bfe3e00000856feabfc2e08e7
0001000000000000000000000000000000be04cd00670000000000fa0000
0200000002aa00e405b40061040000250464005106aa0047063900480383
003a02aa005402aa002d04000091046400250200006e0464002502000091
0239ffff0400004a040000f00400002c0400005304000020040000620400
00590400004c0400007c04000051023900ac0239008b0464003c04640025
0464003c038d00580464002505c700140556002205c7001204e5001a04e3
0027061b004804d3002305c7002602aa0033050c004e05c70025057d0014
071d002505c7ffe805c7004c0625002305ee004a0473002604bc003804e3
003b05850016038300470625003805290042065c002504e3001602aa00a7
06e7016a02aa004a054400250400ffef040003da050c0054046400790464
004603f4004503830049042b0047034affff04d3002d02a2004304d30045
0464001504640031049c007c042b00280464005804640037042b00590464
006904d3004e0383002b049c004705b40041057d005003f2005b057d002f
03f4005b03d700d3019a00a403d700d60464003404f6001301fa00790464
003c0156feab05b4003604000000060600b906060130060600f7060600f6
0856002907e5004b04d3005d07e5004b04d3005d0333006604640025034a
00690464003c0464007905b4006603f4004103ae006a0464002504640025
0464002404640034080000e604d302390800ff8d05440020069600e4057d
002d065c005e07e501820625004e0625004e069600610625004d0625004d
05b4003805b4003705b4003b05b4003b05b4003a05b4010a05b4010b0625
005305b4004a0652006306520063071f00320696002e0464005402000091
05b4003004d3003004d300300856002907e5004c04d3005d07e5004c04d3
005d03f4002f02a200410652006306520063064a002a05b4002b03120053
031200530312005303120000031200000312000003f401a403f4001c03f4
01a403f401a40652007502a2003e02310000057d02a6057d02a6057d0043
0312ff930312025d0312ff9303120023031202810312002303f4001c01a4
001c00000032003200320032003200320032003200320032003200320032
003200320032003200320032003200320032003200320032003200320032
003200320032003200320032003200320032003200320032003200320032
003200320032003200320032003200320032003200320032003200320032
003200320032003200320032003200320032003200e301a201a201a201a2
01a201a201a201a201a201a201a201a201a201a201a201a201a201a20204
0204020402040204020402ae02ae02ae02ae02ae02ae02ae02ae02ae02ae
02ae02ae02ae02ae02ae02ae02ae02ae02ae02ae02ae02ae02ae02ae02ae
02ae02ae02ae02ae02ae02ae02ae02ae02ae02ae02ae02ae02ae02ae02ae
02ae02ae02ae02ae02ae02ae02ae02ae02ae02ae02ae02ae02ae02ae02ae
02ae02ae02ae02ae02ae02ae02ae02ae02ae02ae02ae02ae02ae02ae02ae
02ae02ae02ae02ae02ae02ae02ae02ae02ae02ae02ae02ae02ae02ae02ae
02ae02ae02ae02ae02ae02ae02ae02ae02ae02ae02ae02ae02ae02ae0000
0001000000c0006700050000000000020010002f0055000000ee059f0000
00000000003402760001000000000000005c000000010000000000010006
005c00010000000000020007006200010000000000030029006900010000
000000040006005c0001000000000005000c009200010000000000060008
009e0001000000000008001300a60001000000000009002100b900010000
0000000a012000da000100000000000b003201fa000100000000000c0033
022c000100000000000d01c4025f000100000000000e002e042300030000
04030002000c045100030000040500020010045d0003000004060002000c
046d00030000040700020010047900030000040800020010048900030000
0409000000b804990003000004090001000c05510003000004090002000e
055d00030000040900030052056b0003000004090004000c055100030000
04090005001805bd0003000004090006001005d500030000040900080026
05e500030000040900090042060b000300000409000a0240064d00030000
0409000b0064088d000300000409000c006608f1000300000409000d0388
0957000300000409000e005c0cdf00030000040a0002000c045100030000
040b000200100d3b00030000040c0002000c045100030000040e0002000c
0d4b0003000004100002000e0d57000300000413000200120d6500030000
04140002000c0451000300000415000200100d770003000004160002000c
04510003000004190002000e0d8700030000041b000200100d9500030000
041d0002000c045100030000041f0002000c04510003000004240002000e
0da500030000042d0002000e0db300030000080a0002000c045100030000
08160002000c0451000300000c0a0002000c0451000300000c0c0002000c
0451547970656661636520a920546865204d6f6e6f7479706520436f7270
6f726174696f6e20706c632e204461746120a920546865204d6f6e6f7479
706520436f72706f726174696f6e20416c6c205269676874732052657365
7276656453796d626f6c526567756c61724d6f6e6f747970653a53796d62
6f6c203a76657273696f6e20312e373020284d6963726f736f6674295665
7273696f6e20352e303053796d626f6c4d544d6f6e6f7479706520547970
6f6772617068794d6f6e6f7479706520547970652044726177696e67204f
666669636520313938395468697320666f6e7420636f6e7461696e732054
696d6573204e657720526f6d616e20477265656b206361706974616c7320
616e64206c6f776572636173652c206669677572657320616e6420626173
69632070756e6374756174696f6e20746f67657468657220776974682061
20636f6c6c656374696f6e206f66206d617468656d61746963616c207369
676e7320616e642067656e6572616c20707572706f736520506920636861
726163746572732e202055736520666f722073657474696e67206d617468
656d61746963616c20616e6420736369656e746966696320776f726b2061
6e64206173206120636f6d706c696d656e7420746f207468652073796d62
6f6c7320666f756e6420696e207374616e6461726420666f6e74732e6874
74703a2f2f7777772e6d6f6e6f747970652e636f6d2f68746d6c2f6d746e
616d652f6d735f73796d626f6c2e68746d6c687474703a2f2f7777772e6d
6f6e6f747970652e636f6d2f68746d6c2f6d746e616d652f6d735f77656c
636f6d652e68746d6c4d6963726f736f667420737570706c69656420666f
6e742e20596f75206d617920757365207468697320666f6e7420746f2063
72656174652c20646973706c61792c20616e64207072696e7420636f6e74
656e74206173207065726d697474656420627920746865206c6963656e73
65207465726d73206f72207465726d73206f66207573652c206f66207468
65204d6963726f736f66742070726f647563742c20736572766963652c20
6f7220636f6e74656e7420696e207768696368207468697320666f6e7420
77617320696e636c756465642e20596f75206d6179206f6e6c7920286929
20656d626564207468697320666f6e7420696e20636f6e74656e74206173
207065726d69747465642062792074686520656d62656464696e67207265
737472696374696f6e7320696e636c7564656420696e207468697320666f
6e743b20616e6420286969292074656d706f726172696c7920646f776e6c
6f6164207468697320666f6e7420746f2061207072696e746572206f7220
6f74686572206f75747075742064657669636520746f2068656c70207072
696e7420636f6e74656e742e20416e79206f746865722075736520697320
70726f686962697465642e687474703a2f2f7777772e6d6f6e6f74797065
2e636f6d2f68746d6c2f747970652f6c6963656e73652e68746d6c004e00
6f0072006d0061006c006f00620079010d0065006a006e00e9006e006f00
72006d0061006c005300740061006e0064006100720064039a03b103bd03
bf03bd03b903ba03ac00540079007000650066006100630065002000a900
200054006800650020004d006f006e006f00740079007000650020004300
6f00720070006f0072006100740069006f006e00200070006c0063002e00
200044006100740061002000a900200054006800650020004d006f006e00
6f007400790070006500200043006f00720070006f007200610074006900
6f006e00200041006c006c00200052006900670068007400730020005200
6500730065007200760065006400530079006d0062006f006c0052006500
670075006c00610072004d006f006e006f0074007900700065003a005300
79006d0062006f006c0020003a00760065007200730069006f006e002000
31002e0037003000200028004d006900630072006f0073006f0066007400
2900560065007200730069006f006e00200035002e003000300053007900
6d0062006f006c004d0054004d006f006e006f0074007900700065002000
5400790070006f006700720061007000680079004d006f006e006f007400
790070006500200054007900700065002000440072006100770069006e00
670020004f00660066006900630065002000310039003800390054006800
69007300200066006f006e007400200063006f006e007400610069006e00
73002000540069006d006500730020004e0065007700200052006f006d00
61006e00200047007200650065006b002000630061007000690074006100
6c007300200061006e00640020006c006f00770065007200630061007300
65002c0020006600690067007500720065007300200061006e0064002000
620061007300690063002000700075006e00630074007500610074006900
6f006e00200074006f006700650074006800650072002000770069007400
680020006100200063006f006c006c0065006300740069006f006e002000
6f00660020006d0061007400680065006d00610074006900630061006c00
20007300690067006e007300200061006e0064002000670065006e006500
720061006c00200070007500720070006f00730065002000500069002000
63006800610072006100630074006500720073002e002000200055007300
6500200066006f0072002000730065007400740069006e00670020006d00
61007400680065006d00610074006900630061006c00200061006e006400
200073006300690065006e0074006900660069006300200077006f007200
6b00200061006e00640020006100730020006100200063006f006d007000
6c0069006d0065006e007400200074006f00200074006800650020007300
79006d0062006f006c007300200066006f0075006e006400200069006e00
20007300740061006e006400610072006400200066006f006e0074007300
2e0068007400740070003a002f002f007700770077002e006d006f006e00
6f0074007900700065002e0063006f006d002f00680074006d006c002f00
6d0074006e0061006d0065002f006d0073005f00730079006d0062006f00
6c002e00680074006d006c0068007400740070003a002f002f0077007700
77002e006d006f006e006f0074007900700065002e0063006f006d002f00
680074006d006c002f006d0074006e0061006d0065002f006d0073005f00
770065006c0063006f006d0065002e00680074006d006c004d0069006300
72006f0073006f0066007400200073007500700070006c00690065006400
200066006f006e0074002e00200059006f00750020006d00610079002000
75007300650020007400680069007300200066006f006e00740020007400
6f0020006300720065006100740065002c00200064006900730070006c00
610079002c00200061006e00640020007000720069006e00740020006300
6f006e00740065006e00740020006100730020007000650072006d006900
7400740065006400200062007900200074006800650020006c0069006300
65006e007300650020007400650072006d00730020006f00720020007400
650072006d00730020006f00660020007500730065002c0020006f006600
200074006800650020004d006900630072006f0073006f00660074002000
700072006f0064007500630074002c002000730065007200760069006300
65002c0020006f007200200063006f006e00740065006e00740020006900
6e0020007700680069006300680020007400680069007300200066006f00
6e0074002000770061007300200069006e0063006c007500640065006400
2e00200059006f00750020006d006100790020006f006e006c0079002000
280069002900200065006d00620065006400200074006800690073002000
66006f006e007400200069006e00200063006f006e00740065006e007400
20006100730020007000650072006d006900740074006500640020006200
79002000740068006500200065006d00620065006400640069006e006700
20007200650073007400720069006300740069006f006e00730020006900
6e0063006c007500640065006400200069006e0020007400680069007300
200066006f006e0074003b00200061006e00640020002800690069002900
2000740065006d0070006f0072006100720069006c007900200064006f00
77006e006c006f006100640020007400680069007300200066006f006e00
7400200074006f002000610020007000720069006e007400650072002000
6f00720020006f00740068006500720020006f0075007400700075007400
2000640065007600690063006500200074006f002000680065006c007000
20007000720069006e007400200063006f006e00740065006e0074002e00
200041006e00790020006f00740068006500720020007500730065002000
690073002000700072006f0068006900620069007400650064002e006800
7400740070003a002f002f007700770077002e006d006f006e006f007400
7900700065002e0063006f006d002f00680074006d006c002f0074007900
700065002f006c006900630065006e00730065002e00680074006d006c00
4e006f0072006d00610061006c0069004e006f0072006d00e1006c004e00
6f0072006d0061006c0065005300740061006e0064006100610072006400
4e006f0072006d0061006c006e0079041e0431044b0447043d044b043900
4e006f0072006d00e1006c006e0065004e0061007600610064006e006f00
41007200720075006e0074006100b1541241140227022702260226006f01
160001005f01160001004f01160001003f01160001002f01160001022fb2
2f1f1fb8022eb2a01f1fb8022cb21d291fb80224400be11a1f3127121f3c
27291fb80217403b6c291fe0aa191fe1aa191fab27321f883c321f833c32
1f2f3c321f7627321f3c27291f27aa291f6f276f6d6f866f870437001616
00000012110840b801e3b655140914093790b801bf40390790bd0790b307
906707906407905707904607903607902e07902b07902507902407140812
0810080e080c080a080808060804080208000814b8ffe0402b0000010014
061000000100060400000100041000000100100200000100020000000100
0002010802004a00b013034b024b5342014bb0c063004b6220b0f65323b8
010a515ab005234201b0124b004b544218b0382b4bb807ff52b0372b4bb0
07505b58b101018e59b0382bb00288b801005458b801ffb101018e851bb0
124358b9000101ff858d1bb9000101ff858d59590016763f183f123e1139
46443e113946443e113946443e113946443e11394660443e11394660442b
2b2b2b2b2b2b2b2b2b2b182b2b2b2b2b2b2b2b2b2b2b2b2b4b5079bc001f
01750007001f0174b3071f93072b2b2b4b5379bc00900175000700900174
b3079093072b2b2b181db0964b5358b0aa1d59b0324b5358b0ff1d5901b3
41b5407b456523456023456560234560b08b766818b080622020b140b545
65234520b003266062636820b003266165b0b5236544b040234420b1417b
4565234520b003266062636820b003266165b07b236544b0412344b1007b
455458b17b406544b24140414523614459b9004e0162b12a8e4565234560
23456560234560b089766818b080622020b9002a01624565234520b00326
6062636820b003266165b80162236544b02a234420b14e8e4565234520b0
03266062636820b003266165b08e236544b04e2344b1008e455458b18e40
6544b24e404e452361445945695342014b5058b108004259435c58b10800
4259b3020b0a124358601b2159421610703eb0124358b93b21187e1bba04
0001a8000b2b59b00c2342b00d2342b0124358b92d412d411bba04000400
000b2b59b00e2342b00f2342b0124358b9187e3b211bba01a80400000b2b
59b0102342b0112342002b752b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b7373
737373001845694418456944435c58b9ffc00280b2121f322b592b0000>
[1373 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 836 87 <00010000ffe103020394001b006c401b1718010213140b980e1898143c1b
1b000607880e0b026c1390111db801efb3040b440ab8011bb2040001b801
28b5046c1117d618bd012800110216001c001d0143b3214e8e182b2bf6f4
ed10fdf43c10f6ed10e410f4ed003fed3f3c10eded10ed103c3c3c0110c9
313001152102151416333236373306062322263534132322060723363633
0302fec8224937293c0e2311704b4f6a245e515c2d25487269039493feb7
7a61573844a47d8fb89101483b52c060>CYCCAA+SymbolMT AddT42Char 
1 0 0 <0002006700000467050000030007003b401e06076302010005046303000a
0605630303021a09070463010019082938182b4e10f43c4dfd3c4e10f63c
4d10fd3c003f3cfd3c3f3cfd3c31303311211125211121670400fc2003c0
fc400500fb002004c000>CYCCAA+SymbolMT AddT42Char 
CYCCAA+SymbolMT /CharStrings get begin
/tau 87 def
end
CYCCAA+SymbolMT /Encoding get
dup 116 /tau put
pop
end
%ADOEndSubsetFont
/NSTNJZ+SymbolMT /CYCCAA+SymbolMT findfont ct_VMDictPut
/NSTNJZ+SymbolMT*1 
[116{/.notdef}rp /tau 139{/.notdef}rp]
NSTNJZ+SymbolMT nf
NSTNJZ+SymbolMT*1 [0 -24 -24 0 0 0 ]msf
610.952 753.758 mo
(t)sh
NSTNJY+ArialMT*1 [0 -14 -14 0 0 0 ]msf
621.667 745.508 mo
(e)sh
621.667 737.724 mo
(f)sh
621.667 733.832 mo
(f)sh
%ADOBeginSubsetFont: XOSAAA+Myriad-Roman Initial
%ADOt1write: (1.0.24)
12 dict dup begin
/FontType 1 def
/FontName /XOSAAA+Myriad-Roman def
/FontInfo 7 dict dup begin
/Notice (Copyright (c) 1992, 1994 Adobe Systems Incorporated.  All Rights Reserved.Myriad is a trademark of Adobe Systems Incorporated may be registered in certain jurisdictions.) def
/Weight (Regular) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
def
/FontBBox {-46 -250 1126 831} def
end
systemdict begin
dup /Private
16 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-11 -0 674 685 484 496 650 661 710 721] def
/OtherBlues [261 266 -200 -194 -221 -212] def
/FamilyBlues [-11 -0 674 685 484 496 650 661 710 721] def
/FamilyOtherBlues [261 266 -200 -194 -221 -212] def
/BlueScale 0.0604583 def
/BlueShift 7.1 def
/StdHW [67] def
/StdVW [88] def
/StemSnapH [67 73] def
/StemSnapV [88 92] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
1 dict dup begin
/.notdef <1C60D8A8C9B896187A> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/NSTNKA+Myriad-Roman /XOSAAA+Myriad-Roman findfont ct_VMDictPut
/NSTNKA+Myriad-Roman*1 
[256{/.notdef}rp]
NSTNKA+Myriad-Roman nf
NSTNKA+Myriad-Roman*1 [14.4 0 0 -14.4 0 0 ]msf
1012.2 78.2041 mo
( )sh
NSTNKA+Myriad-Roman*1 [15.12 0 0 -15.12 0 0 ]msf
1023.7 64.8164 mo
( )sh
NSTNJY+ArialMT*1 [15.12 0 0 -15.12 0 0 ]msf
1029.5 68.8164 mo
(-)sh
1034.53 68.8164 mo
(1)sh
2.66667 setflat
[2 2 7 2 ] 0 dsh
985.4 75.3545 mo
1010.5 75.3545 li
@
set_def_flat
NSTNKA+Myriad-Roman*1 [21.6 0 0 -21.6 0 0 ]msf
1005.35 104.367 mo
( )sh
NSTNKA+Myriad-Roman*1 [15.12 0 0 -15.12 0 0 ]msf
1018.7 96.5664 mo
( )sh
NSTNJY+ArialMT*1 [15.12 0 0 -15.12 0 0 ]msf
1029.5 93.5664 mo
(-)sh
1034.53 93.5664 mo
(1)sh
2.66667 setflat
[8 8 ] 0 dsh
985.4 100.204 mo
1010.5 100.204 li
@
set_def_flat
NSTNKA+Myriad-Roman*1 [15.12 0 0 -15.12 0 0 ]msf
1018.7 129.141 mo
( )sh
NSTNJY+ArialMT*1 [15.12 0 0 -15.12 0 0 ]msf
1029.5 126.141 mo
(-)sh
1034.53 126.141 mo
(1)sh
2.66667 setflat
[2 2 ] 0 dsh
985.4 124.254 mo
1010.5 124.254 li
@
set_def_flat
%ADOBeginSubsetFont: CYCCAA+SymbolMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal NSTNJZ+SymbolMT gcheck setglobal} if
1 100 68 <00020000ffe0048303af0020002e00d24048260820201f21210002040401
050c080020203c04011404201f0021213c04011404040121222120120004
042720042112040c24321d01002b32170cbf086c0f47171d070006170b01
b80118b504306a0c440bba01f000040215b5272f1a192f30b801cbb3212a
7c182b2b4ef44dedfdf6eded10e4003f3f3f10f4fde410ed103c10ed1117
39011112173908872e2b057d10c4082e182b057d10c40011123987100ec4
871008c43130184379401a252a181c2926251c2725002a18272500261b24
250128192b2500002b2b012b2b2b81810133030607161716333236373306
062322262706070606232202353412333216170726262322061514161633
3237360355a6820d1c2613243728440b280e5d3d395d252c2a3b8a58ddd0
f4a472ae472336aa58628238713f4d40570394fe392b5c9a1e374246906e
609e572d3e3d0126bcdc01118bbd70cea3d7eb8b9f574760>NSTNJZ+SymbolMT AddT42Char 
1 454 69 <00020000fe460391058e001b003900da40291f4020193f0830261303322b
001c20302613032e5b28281935320d012032190b040e2b2b3a3b322f10b8
01074012232f151a3b043c0390083c39010100193a3bba01b200210129b1
8e182b2b4ef43c103c4dedf4ed4e10f64dedf4ed1112392f003f3fed3fed
12392fed1739123939011112173931304379402c3338212216180a0f3725
1726360c3925000b0a340e3225012118232501380b352501330f35250122
16202500002b2b2b012b2b103c2b2b2b818181810049547940121a1f1e26
1d1b2093041f1a1c93001d1c1b0001103c103c2b002b2b81371514072336
373635113436363332161514060704111406062322262716171633323635
34262706232226353436333217363534262322070615d128a91b050d47b9
81b3d6575b010c70c46843835e614836366589415245323c31262a316346
7c5c74402a4ea9a2bd7c2d8c4103feb3ad74c08455993880fef278d06d2e
8e441e16a7b572ab66172415131e1a8b7c7e8a624190>NSTNJZ+SymbolMT AddT42Char 
1 1032 93 <0001fffffe3e036405870041009a401e4941694102333238372c00043525
211a190c08061e1538372c0300333200ba0121003c027a4017320109470b
2f2222210b072f2626250b18901b6c120f15b80205b71e3243a40fa43f32
ba0117003f013db2355b2fb80118400b033229194243f5212a7c182b2b4e
f44dedf4ededed10f4e4edfd003ffde43f3c10ed3f3c10fde43ff4fd1239
12173901111217391217390010c93130005d010602151416163332373633
321716151406232226353436333216333236353427262322070623222635
34123726263534363717061514161736373633321615140401909da53b68
794696271662403fb08844422a24106f2033562727411732873ed3ad9aa1
3c364764116723338a7f5a281c1bfef3044f8dfe8eb2587b310902464781
a1b834211e271e5f463e2727050de9ceba01739e15482d325020232e541d
290f693a2818153f9200>NSTNJZ+SymbolMT AddT42Char 
NSTNJZ+SymbolMT /CharStrings get begin
/alpha 68 def
/beta 69 def
/zeta 93 def
end
NSTNJZ+SymbolMT /Encoding get
dup 97 /alpha put
dup 98 /beta put
dup 122 /zeta put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/NSTNJZ+SymbolMT*1 
[97{/.notdef}rp /alpha /beta 17{/.notdef}rp /tau 5{/.notdef}rp /zeta 133{/.notdef}rp]
NSTNJZ+SymbolMT nf
NSTNJZ+SymbolMT*1 [24 0 0 -24 0 0 ]msf
1014.75 78.2373 mo
(a)sh
1014.75 108.587 mo
(b)sh
1014.75 135.887 mo
(z)sh
NSTNKA+Myriad-Roman*1 [14.4 0 0 -14.4 0 0 ]msf
1013.2 394.204 mo
( )sh
2.66667 setflat
[2 2 7 2 ] 0 dsh
985.4 391.354 mo
1010.5 391.354 li
@
[8 8 ] 0 dsh
985.4 416.204 mo
1010.5 416.204 li
@
[2 2 ] 0 dsh
985.4 440.254 mo
1010.5 440.254 li
@
set_def_flat
NSTNJY+ArialMT*1 [24 0 0 -24 0 0 ]msf
1014.75 396.024 mo
(I)sh
NSTNJZ+SymbolMT*1 [18 0 0 -18 0 0 ]msf
1024.07 397.124 mo
(a)sh
NSTNJY+ArialMT*1 [24 0 0 -24 0 0 ]msf
1014.75 420.417 mo
(I)sh
NSTNJZ+SymbolMT*1 [18 0 0 -18 0 0 ]msf
1023.07 424.517 mo
(b)sh
NSTNJY+ArialMT*1 [24 0 0 -24 0 0 ]msf
1014.75 450.754 mo
(I)sh
NSTNJZ+SymbolMT*1 [18 0 0 -18 0 0 ]msf
1023.07 456.354 mo
(z)sh
NSTNJY+ArialMT*1 [24 0 0 -24 0 0 ]msf
678.193 1009.64 mo
(2)sh
828.193 1009.64 mo
(5)sh
1047.19 1009.64 mo
(2)sh
1060.54 1009.64 mo
(0)sh
/1 
[/DeviceCMYK] /CSA add_res
0 0 0 1 cmyk
%ADOBeginSubsetFont: RWKBAA+ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal NSTNJY+ArialMT gcheck setglobal} if
3 9264 69 <00020086ffe8041f05ba0010001d0212b0852b58407b01050c0f24053505
4505053f1fb01f021f1f221c331c421c701f901f063a133c163c1a4c164c
1a5d085d0d580f5d165e1a6a086c0d680f6e166e1ac01fd90cda17da19e2
13ec17ec19e31de01fff1f1920052f0f2f1430053f0f40054c0f50056605
da1df504fa100c10150e040602001b1c0607010a151c0e0b184110fff800
0d000d014000560018fff4000c000c014000560018fff2000b000b014040
22561824d00b01100b400b600b800b041f400d0d02550b0c0f0f02550b18
0d0d02550bb8fff6b40c0c02550bb8fff0b40b0b06550bb8fff4b40f0f06
550bb8ffe0b40c0c06550bb8fff4400b0d0d06550b740111020d0db80140
b45611080c0cb80140b656113300120b0bb80140b45600040d0db8014040
135600040c0c025500040d0d06550033030c0c0cb80140b45603080d0db8
014040195603250202c001019001a001b001f001041f013f014f010301b8
fffeb41010025501b8fffc401d0e0e0255010c0d0d025501100c0c025501
120b0b0255010c0b0b065501b8fff8b41010065501b8fffc40160f0f0655
01180c0c065501140d0d065501191e4737182b4e10f42b2b2b2b2b2b2b2b
2b2b5d71723c4d10fd2b2bf42b2b2b2be42b2b10fd2b2b2b2b2b2b2b2b5d
71ed2b2b2b003fed3f3fed3f11391112393130005d015d717200711bb401
0a100e15b8032fb56c0e0b04061bb8032fb46c0607020000183f3f2b393f
2b323f30315921231133113633321e021510002322270314171633323635
3426232206012da7b472b162af7140fef2bdbc6b0234559176aca57576ac
05bafdf58f4f8fca73feeffed69d0196bf558bcdcbd0c6cd>NSTNJY+ArialMT AddT42Char 
3 10586 71 <00020046ffe803df05ba0011001d0213b0852b58407c0a02040d250d340d
440d053514351c5702540a5214531c6702640565096314601cc01fd405d5
13dd19e513e514ef17eb19e51de01fff1f161f1f2b1a3c163c1a4b1a701f
901f072e02240d2e163a02350d4b02450d4614491c570a560d670de506e7
16fa01f40e100115030e0b100f001b1c0b0711000a151c030b18410afff8
000d000d014000560018fff8000c000c0140b45618330100bbfff2000b00
0b0140b4560025110f4110fff8000d000d01400056000ffff4000c000c01
400056000ffff2000b000b01404024560f251010d0110110114011601180
11041f400b0b02551f400d0d025511121010025511b8fff440110f0f0255
11060e0e025511180d0d025511b8fff2400b0b0b0655110e1010065511b8
ffeeb40c0c065511b8fff8b40d0d065511bbfff8000c000c0140b6561174
12080d0db80140b456120c0c0cb80140b456120e0b0bb80140b656122407
100c0cb80140b45607100d0db80140403b56bf07cf07df07ff07041f073f
074f0703071e0b0b025507180c0c0255071e0d0d0255070c0b0b0655070c
0d0d0655071a0c0c065507191e3450182b4e10f42b2b2b2b2b2b5d712b2b
4ded2b2b2bfd2b2b2b2b2b2b2b2b2b2b2b5d713c10ed2b2b2b10fd2b3ce4
2b2b003fed3f3c3fed3f3c11391112393130005d01715d00711bb10315b8
032f400a6c030b010e0e000a0b1bb8032fb46c0b070f0000183f3f2b3f33
12393f2b3031592135062322262635341236333216171133110114163332
36353426232206033865c47fd5756ad48360962fb3fd20ac7576a5a87b78
a1869e8cfba39f01038a5141020efa460212cccac1c6daccc400>NSTNJY+ArialMT AddT42Char 
NSTNJY+ArialMT /CharStrings get begin
/b 69 def
/d 71 def
end
NSTNJY+ArialMT /Encoding get
dup 98 /b put
dup 100 /d put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/NSTNJY+ArialMT*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /hyphen 
/period /.notdef /zero /one /two /three /four /five 
/six /.notdef /eight 10{/.notdef}rp /C /D /E 3{/.notdef}rp 
/I /.notdef /K /L 7{/.notdef}rp /T 12{/.notdef}rp /a 
/b /c /d /e /f /g /.notdef /i 
2{/.notdef}rp /l /m /n /o /p /.notdef /r 
/s /t /u /v 2{/.notdef}rp /y 134{/.notdef}rp]
NSTNJY+ArialMT nf
NSTNJY+ArialMT*1 [24 0 0 -24 0 0 ]msf
12 72.5 mo
(\()sh
19.9918 72.5 mo
(a)sh
33.3358 72.5 mo
(\))sh
558.652 72.5 mo
(\()sh
566.644 72.5 mo
(b)sh
579.988 72.5 mo
(\))sh
560 383 mo
(\()sh
567.992 383 mo
(c)sh
579.992 383 mo
(\))sh
558.652 708 mo
(\()sh
566.644 708 mo
(d)sh
579.988 708 mo
(\))sh
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/NSTNJZ+SymbolMT*1 uf
/NSTNJZ+SymbolMT uf
/CYCCAA+SymbolMT uf
/NSTNKA+Myriad-Roman*1 uf
/NSTNKA+Myriad-Roman uf
/XOSAAA+Myriad-Roman uf
/NSTNJY+ArialMT*1 uf
/NSTNJY+ArialMT uf
/RWKBAA+ArialMT uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
