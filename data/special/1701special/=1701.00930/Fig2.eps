%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: new_states.pdf
%%Creator: Adobe Acrobat 10.1.16
%%For: shilpi
%%CreationDate: 16/03/2017, 22:39:02
%%BoundingBox: 0 0 1008 612
%%HiResBoundingBox: 0 0 1008 612
%%CropBox: 0 0 1008 612
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 644 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.2-c001 63.139439, 2010/09/27-13:37:26        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   pdf:Producer="Adobe PDF library 5.00"
   xmp:CreateDate="2016-12-25T15:35:50+06:00"
   xmp:ModifyDate="2017-03-16T22:17:52+05:30"
   xmp:CreatorTool="Adobe Illustrator 10.0"
   xmp:MetadataDate="2017-03-16T22:17:52+05:30"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -612 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 612 li
1008 612 li
1008 0 li
cp
clp
gsave
0 612 mo
1008 612 li
1008 0 li
0 0 li
cp
clp
set_def_flat
5.7858 lw
0 lc
0 lj
4 ml
[] 0 dsh
true sadj
11.8896 39.0547 mo
462.413 39.0547 li
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 1 cmyk
@
160.139 587.117 mo
739.885 587.117 li
@
2.8929 lw
475.355 11.3306 mo
475.355 69.9116 li
@
519.154 69.6851 mo
547.914 40.9224 li
518.442 11.4521 li
@
%ADOBeginSubsetFont: PBAAAA+ArialMT Initial
ct_T42Dict begin
-0.664 -0.324 2 1.039
 256 array 0 1 255 {1 index exch /.notdef put} for  /PBAAAA+ArialMT
Type42DictBegin
[<00010000000c000c000c000c4f532f3214325d84000000cc000000606376
7420adbfdf8e0000012c0000066e6670676d38a5162b0000079c00000bb0
676c79663996d2bf0000d06000000d16686561649cb5e4930000134c0000
003668686561123319560000138400000024686d7478b40da312000013a8
000042346c6f636100d5ecdc000055dc000042386d617870168309af0000
9814000000206e616d6535d34cc20000983400002bfa70726570a1b2e8ea
0000c43000000c2f67646972000000000000000000000000000303880190
00050008059a05330000011b059a0533000003d1006602120805020b0604
020202020204e0002effc00078430000000900000000544d432000400020
fffc05d3fe510133073e01b2400001ffffff0000042605bb000000200015
05ba001905ba001a05a70019042600180000ffe70000ffe80000ffe7fe69
ffe805ba0019fe69ffe802ea000000b8000000b80000000000a800ad0169
00ad00bf00c201f0001800af00b900b400c800170044009c007c00940087
0006005a00c80089005200520005004400940119ffb4002f00a1000300a1
00cd00170057007e00ba00160118ffe9007f008503d300870085000d0022
00410050006f008d014cff75005c00df04830037004c006e00700180ff58
ff8eff92ffa400a500b903c8fffd000b001a0063006300cdffee05d8ffdc
002d005c0095009900df019209b500400057008000b9039d0072009a035d
0401ff67fffa00030021007700cd0004004d00cd01c0022b004c006500e7
0118017c034305d8ffa3ffb0ffc40003001c005d0068009a00ba01350147
0221055cff4dffcd0016002d00780080009900b200b600b600b800bd00da
010c05f0ffa4fff00019002c0049007f00b400ce01c003fefd81fe3f0000
00050018002900390049006f00be00c700d0012301c1026f050c05320540
057affd4001400310055005700a700b400e601f7027e027e027f03c60446
ff42000e0085009100bf00c200c500e1011a012f014f01560229026f029e
03720008002c00310031006400690089009800c700de012b01b6020c02cf
03a304ab04fb061dfee0ff0e00060026009b009d00c1010d011801200173
018201d601e30243025f029b02e2039404a904d20761001c005e006d008d
00ab00f7011201380151015b0168017c01870191019901cd01d001e80241
0254026b02ef0368037103bd044204420453047304830586058b06e8fe58
fec4fed1fef7ff32ff860051007c008100910095009e00b400b900cf00d9
00d900df00e20105010b010e010e012001210155017b017b017e018d01a2
01a801a901b401d001d001e201e901f201f501fb020002000206021b0221
022202220223027202770294029c02cf02cf02d002ec02f903170322032b
0335033c0359036f037103870390039003b503e1041a04cf04ff05320532
0596059f05a805ab05c205f0060c0782080008ccfca3fd2afddefe00fe88
fe96feb2feb4ffe100150019001a001c001f003c005100610061006a0078
009600a500af00d3010c0118011a012a013e014c0151015f016a01710178
01820184019a01a501a801a901ae01bc01cd01d701ef0200020d021c0221
0222022e02350242024f024f025e026502710290029202b402d602fa0307
030b030f0315032a0347035d036503740379039603b003cc03dd03e203f6
03fc03fc03ff040a041f04220426042b0447045f0475049e04e704e7055c
05cb05e5060a066d068606b806f10736073e07500751075d078f07b607d4
086000b600c300b500b700000000000000000000000001e00381034503b5
008e0233041902ce02ce002d005f0064034d023f000002a80188027d01b4
02240578063b023b014e00f00426029402c6029f02f6023b034d014b0153
006a0231000000000000061404aa0000003c04c300ed04bc026502ce03b5
0078060c017e02ef060c00b201000239000001c50330042b03cb00da03df
010704a100db040a011701ed02a70350010b01bd043e05580021039c00ae
0371017d00b5024500000afb088c012b014e01aa00870054013201f803ff
0003024e00b4003703e30083006b02d800ed00770088009701640467008e
0033017c00e700a6029e0329056e062a061501c90269048a021301b40002
04a9000002390124010305140084015d039a06ef02d9007500cf040a00de
03ac04bc02cf02ae034d04f005520168006d007d00860071ff8100790558
04d2016700030156002504e00094007c033204210094007f0072005c002f
00b6001800ba00b80041034d00720018001f004c016a01550099009a009a
009800b200040078006900140057006e00ce00b4065402b80067050e0165
00e7000004cbfe52005affa60099ff67006eff92002dffd40087ff7c00b8
00a800e5008f00a80185fe7b0070001e00d900de014c054602cf0546ff2d
028a02d90253029600b700000000000000000000000000000125011800ea
00ea00ae0000003e05bb008a04d70053003fff8cffd50015002800220099
0062004a00e4006d00ee00e5004803c00033fe4e02b1ff460370007905df
0051ffa7ff1f010a0068ff6c004f00bc00a507050061072b00ed04b001d2
00b6007b00650252ff740365fe690094008f005c00400086007500890089
0471048304f9008c00910096009b00a000a500aa00af00b400b90000405b
8574737271706f6e6d6c6b6a6968676665625d58575655544f4e41403f3e
3d3c3b3a3938373534333231302f2e2d2c2b2a292827262524232221201f
1e1d1c1b1a191817161514131211100f0e0d0c0b0a090807060504030201
002c4523466020b02660b004262348482d2c452346236120b02661b00426
2348482d2c45234660b0206120b04660b004262348482d2c4523462361b0
206020b02661b02061b004262348482d2c45234660b0406120b06660b004
262348482d2c4523462361b0406020b02661b04061b004262348482d2c01
10203c003c2d2c20452320b0cd442320b8015a51582320b08d44235920b0
ed51582320b04d44235920b09051582320b00d44235921212d2c20204518
684420b001602045b04676688a4560442d2c01b10b0a432343650a2d2c00
b10a0b4323430b2d2c00b0172370b101173e01b0172370b10217453ab102
00080d2d2c45b01a234445b01923442d2c2045b00325456164b050515845
441b2121592d2cb00143632362b0002342b00f2b2d2c2045b0004360442d
2c01b00643b00743650a2d2c2069b04061b0008b20b12cc08a8cb8100062
602b0c642364615c58b00361592d2c45b0112bb0172344b0177ae4182d2c
45b0112bb01723442d2cb01243588745b0112bb0172344b0177ae41b038a
45186920b01723448a8a8720b0a05158b0112bb0172344b0177ae41b21b0
177ae45959182d2c2d2cb0022546608a46b040618c482d2c4b53205c58b0
02855958b00185592d2c20b0032545b019234445b01a23444565234520b0
0325606a20b009234223688a6a606120b01a8ab000527921b21a1a40b9ff
e0001a45208a54582321b03f1b235961441cb114008a5279b31940201945
208a54582321b03f1b235961442d2cb110114323430b2d2cb10e0f432343
0b2d2cb10c0d4323430b2d2cb10c0d432343650b2d2cb10e0f432343650b
2d2cb11011432343650b2d2c4b525845441b2121592d2c0120b003252349
b04060b0206320b000525823b002253823b002256538008a63381b212121
212159012d2c4bb06451584569b00943608a103a1b212121592d2c01b005
251023208af500b0016023edec2d2c01b005251023208af500b0016123ed
ec2d2c01b0062510f500edec2d2c20b001600110203c003c2d2c20b00161
0110203c003c2d2cb02b2bb02a2a2d2c00b00743b006430b2d2c3eb02a2a
2d2c352d2c76b8022323701020b802234520b0005058b00161593a2f182d
2c21210c6423648bb84000622d2c21b08051580c6423648bb82000621bb2
00402f2b59b002602d2c21b0c051580c6423648bb81555621bb200802f2b
59b002602d2c0c6423648bb84000626023212d2cb4000100000015b00826
b00826b00826b008260f10161345683ab001162d2cb4000100000015b008
26b00826b00826b008260f1016134568653ab001162d2c4b53234b515a58
20458a60441b2121592d2c4b545820458a60441b2121592d2c4b53234b51
5a58381b2121592d2c4b5458381b2121592d2cb0134358031b02592d2cb0
134358021b03592d2c4b54b012435c5a58381b2121592d2cb012435c580c
b00425b00425060c6423646164b807085158b00425b00425012046b01060
482046b0106048590a21211b2121592d2cb012435c580cb00425b0042506
0c6423646164b807085158b00425b00425012046b8fff060482046b8fff0
6048590a21211b2121592d2c4b53234b515a58b03a2b1b2121592d2c4b53
234b515a58b03b2b1b2121592d2c4b53234b515ab012435c5a58381b2121
592d2c0c8a034b54b00426024b545a8a8a0ab012435c5a58381b2121592d
2c4b5258b00425b0042549b00425b00425496120b0005458212043b00055
58b00325b00325b8ffc038b8ffc038591bb04054582043b0005458b00225
b8ffc038591b2043b0005458b00325b00325b8ffc038b8ffc0381bb00325
b8ffc03859595959212121212d2c462346608a8a462320468a608a61b8ff
8062232010238ab902c202c28a70456020b0005058b00161b8ffba8b1bb0
468c59b0106068013a2d2c2320b000508a8a64b10003255458b0401bb101
03255458b037438b59b04f2b5923b0622b2321235865592d2cb13a000c21
5460432d2cb1020042b123018851b1400188535a58b910000020885458b2
02010243604259b12401885158b920000040885458b2020202436042b124
01885458b2022002436042004b014b5258b2020802436042591bb9400000
80885458b202040243604259b94000008063b80100885458b20208024360
4259b94000010063b80200885458b202100243604259b12601885158b940
00020063b80400885458b202400243604259b94000040063b80800885458
b202800243604259b12801885158b94000080063b81000885458ba000201
00000243604259595959595959b10002435458400a37403a403b403e023f
021bb10102435458b237403aba0100003b0100b33e013f011bb180024352
58b237403ab80180b13b401bb901000002435258b237403aba0180003b01
401bb901800002435258b237403ab80200b13b401bb237403aba0100003b
0100595959b9400000808855b94000020063b8040088555a58b33e003f01
1bb33e003f0159595942424242422d2cb0024354584b53234b515a58381b
2121591b21212121592d2cb0572b580c028a4b53b004264b515a580a381b
0a2121591b21212121592d2c20b0024354b00123b05f237821b1000243b0
56237921b0024323b020205c58212121b100471c598a8a208a208a23b810
00635658b81000635658212121b1012c1c591b2159b08062205c58212121
b1001b1c5923b08062205c58212121b1000c1c598ab00161b8ffb31c2321
2d2c20b0024354b00123b07b237821b1000243b072237921b10002438ab0
20205c58212121b0631c598a8a208a208a23b81000635658b81000635658
b00426b0015bb00426b00426b004261b21212121b13600231c591b2159b0
042623b08062205c588a5c8a5a23212321b01d1c598ab08062205c582121
2321b00e1c59b00426b00161b8ff981c23212d2c012d2cb0022563b02060
66b00225b82000626023622d2c234ab1024e2b2d2c234ab1014e2b2d2c23
8a4a234564b0022564b002256164b03543525821206459b1024e2b23b000
505865592d2c238a4a234564b0022564b002256164b03543525821206459
b1014e2b23b000505865592d2c20b003254ab1024e2b8a103b2d2c20b003
254ab1014e2b8a103b2d2cb00325b003258ab0672b8a103b2d2cb00325b0
03258ab0682b8a103b2d2cb0032546b003254660b004252eb00425b00425
b0042620b000505821b06a1bb06c592bb0032546b00325466061b0806220
8a2010233a232010233a2d2cb0032547b003254760b0052547b0806361b0
0225b00625496323b005254ab080632058621b2159b0042646608a468a46
60b02063612d2cb00426b00425b00425b00426b06e2b208a2010233a2320
10233a2d2c2320b001545821b00225b1024e2bb0805020605920606020b0
01515821211b20b005515821206661b0402361b100032550b00325b00325
505a5820b00325618a535821b000591b21591bb00754582066616523211b
2121b000595959b1024e2b2d2cb00225b004254ab0005358b0001b8a8a23
8ab00159b004254620666120b00526b0062649b00526b00526b0702b2361
65b02060206661b02061652d2cb0022546208a20b000505821b1024e2b1b
452321596165b00225103b2d2cb0042620b802006220b80200638a236120
b05d602bb00525118a128a20398a58ba005d10000004266356602b232120
10204620b1024e2b23611b2321208a201049b1024e2b593b2d2cba005d10
000009256356602bb00525b00525b00526b06d2bb15d0725602bb00525b0
0525b00525b00525b06f2bba005d10000008266356602b20b0005258b050
2bb00525b00525b00725b00725b00525b0712bb0021738b00052b00225b0
01525a58b00425b0062549b00325b00525496020b0405258211bb0005258
20b0025458b00425b00425b00725b0072549b00217381bb00425b00425b0
0425b0062549b0021738595959595921212121212d2cb12501885058b940
00020063b8040088545cb0124b525b1bb001592d000100000006e66628d0
344a5f0f3cf5081b080000000000a2e3272a00000000d19de3fdfaaffd67
1000085100000009000100010000000000010000073efe4e00431000faaf
fa7a100000010000000000000000000000000000108d0600010000000000
0239000002390000023900b002d7005e0473001504730049071d00770556
00580187005a02aa007c02aa007c031d004004ac0072023900aa02aa0041
023900ba0239000004730055047300df0473003c047300560473001a0473
00550473004d047300610473005304730055023900b9023900aa04ac0070
04ac007204ac00700473005a081f006f0556fffd0556009605c7006605c7
009e055600a204e300a80639006d05c700a4023900bf0400003705560096
0473009606aa009805c7009c063900630556009e0639005805c700a10556
005c04e3003005c700a105560009078d0019055600090556000604e30029
0239008b023900000239002703c100360473ffe102aa00590473004a0473
008604000050047300460473004b02390013047300420473008701c70088
01c7ffa20400008801c7008306aa00870473008704730044047300870473
004802aa00850400003f02390024047300830400001a05c700060400000f
040000210400002802ac0039021400bc02ac002f04ac00570556fffd0556
fffd05c70068055600a205c7009c0639006305c700a10473004a0473004a
0473004a0473004a0473004a0473004a040000500473004b0473004b0473
004b0473004b023900bd023900230239ffe5023900090473008704730044
047300440473004404730044047300440473008304730083047300830473
008304730049033300800473006b0473001b0473005102cd006d044c0001
04e3009905e5000305e50003080000e102aa00de02aa003d0464004e0800
00010639005305b4009a0464004e0464004d0464004d0473fffd049c00a0
03f4003805b4007a069600a1046400000231000002f6002f02ec002d0625
007f071d004404e3008104e3009e02aa00e804ac0072046400540473002e
0464003304e5001a047300860473008c080000ef0556fffd0556fffd0639
006308000081078d00520473fffc0800000002aa005302aa004701c70080
01c7006c0464004e03f4002f04000021055600060156fe390473ffe402aa
005c02aa005c040000170400001704730049023900b901c7006c02aa0047
080000250556fffd055600a20556fffd055600a2055600a20239008d0239
ffe0023900040239001506390063063900630639006305c700a105c700a1
05c700a1023900c602aa001902aa000602aa001d02aa002e02aa00e502aa
00a202aa006b02aa003a02aa004b02aa00280473000001c700030556005c
0400003f04e3002904000028021400bc05c7fffd04730049055600060400
00210556009e0473008704ac007204ac00a102aa006b02aa001902aa0021
06ac006b06ac006b06ac0021047300000639006d04730042023900b10556
005c0400003f05c700660400005005c700660400005004730046046bffe1
02aa00ee0556fffd0473004a0556fffd0473004a05c7009e04eb004705c7
fffd055600a20473004b055600a20473004b0473009601c7004204730096
025500880473009602ac008305c7009c0473008705c7009c047300870639
00630473004405c700a102aa008505c700a102aa003c0556005c0400003f
04e300300239002404e300300300002305c700a10473008305c700a10473
008304e300290400002804e3002904000028046800a40639006006620055
04a00048047400480391006204f000440329002e05300048046bffe10400
00b002eb005208c000330800004f040000990800004f040000990800004f
040000980400009807d5016a05c0009e04ab007204d5009d04ac007104d5
022204d5010505abffe9050001c905ab027e05abffe905ab027e05abffe9
05ab027e05abffe905abffe905abffe905abffe905abffe905ab01c005ab
027e05ab01c005ab01c005abffe905abffe905abffe905ab027e05ab01c0
05ab01c005abffe905abffe905abffe905ab027e05ab01c005ab01c005ab
ffe905abffe905abffe905abffe905abffe905abffe905abffe905abffe9
05abffe905abffe905abffe905abffe905abffe905abffe905abffe905ab
ffe905ab02d605ab006605abffea05d5ffff04d500920800000007eb0130
07eb012007eb013007eb012004d500b204d5008004d5002a082b0198086b
01b807550010060000f40600006f0440003a0540003704c0003f04150040
040000250600005505e100bf038d008804d5ffd90180008002d500800715
00610296000f04d5009202d6008302d6008304d500b202d600700556fffd
0473004a05c700660400005005c7006604000050055600a20473004b0556
00a20473004b055600a20473004b0639006d047300420639006d04730042
0639006d0473004205c700a40473008705c7001f047300060239ffce0239
ffce0239ffe40239ffe40239fff60239fff50239004b01c7001904000037
01c7ffa20556009604000088040000860473009601c7006a05c7009c0473
008705c900a50473008b0639006304730044063900630473004405c700a1
02aa006a0556005c0400003f04e300300239000c05c700a10473008305c7
00a10473008305c700a10473008305c700a104730083078d001905c70006
055600060400002101c700890556fffd0473004a08000001071d00440639
005304e30081023900b9078d001905c70006078d001905c70006078d0019
05c70006055600060400002101c7008a02aaffe10473001b04cd005a06ac
006b06ac002206ac002206ac004a02aa00e202aa006b02aa00de02aaffea
0557ffff0646ffa706b4ffa80312ffa80632ffa706d8ffa70605ffa701c7
ff780556fffd055600960558fffe055600a204e3002905c700a4023900bf
055600960558000b06aa009805c7009c0533006d0639006305c700a40556
009e04f2009404e30030055600060556000906af007f05fb006102390004
0556000604a00048039100620473008b01c7006b04600088049a008c0400
0019038700480473008b0473005c01c700890400008604000018049c00a0
0400001a0395005c04730044048d008303db0056046000880433001105b4
007a063f005701c7ffc9046000880473004804600088063f0057055700a2
06eb0032045500a105c000640556005c023900bf02390004040000370875
000d081500a406d5003104a900a10515000a05c000a00556fffd054000a7
05560096045500a1056b0000055600a20763000704d5004e05c000a105c0
00a104a900a10540001206aa009805c700a40639006305c000a00556009e
05c7006604e300300515000a061500520556000905eb009f055500570755
00a1078000a106550000071500a8054000a505c0004a081500a405c7001a
0473004a0495005b0440008802eb008804ab00000473004b055afffb03ab
003204780087047800870380008604ab00180580008c046b008804730044
04550088047300870400005003aa0026040000210695004b0400000f0495
008a042b0045066b008d0695008d0500002805c0008b042b00840415002b
060000890455001f0473004b0473000002eb00890415004b0400003f01c7
00880239000901c7ffa20740001306800083047300000380008604000021
046b008803e900a1034a008808000041089500a00585002d000000000000
000000000000000000000000000000000000000000000000000000000000
0000ffac00000000000001010000ffce0310007d0000ff37023300d20000
030b0000ff04023900b90481006904560032033100190411002d04d10096
01f9009b030f005f04ca009b04b8008c01f9009b0413002803b0005003b4
003c04ca009b04cf005001f9009b02d2003c0498005a043c00190488006e
045f007303b1001903d4000a0466009604130028058e00640524002803f2
009b03f2009b03f2009b01e3005a0356005a0686009b01f9004604130028
0413002803b4ff4903b4ff490448002d058e0064058e0064058e0064058e
006404810069048100690481006904560032033100190411002d04d10096
024b0000034a000004b8008c024b00000413002803b0005003b4003c04cf
005002d2003c0498005a0488006e045f007303d4000a0466009604130028
058e00640524002801f9009b0456003203b00050045f0073049b003c0000
ffdc0000ff250000ffdc0000fe51028d00ab028d00a002da0043034d0079
01a8ffba0000004600000046000000460000004600000048000000460000
0046000000460435017c0435012e043500b7043500810435012c043500be
043500af043500810435009a043500db04350085028d00c0043500b30600
01000600010002420036060001000435009e04350098043500cb06000100
060001000600010006000100060001000000004606000100060001000600
01000600010006000100060001000600010006000100051bffba06000100
060001000600010005b5003a05b5003a01f4ffba01f4ffba060001000600
010006000100060001000481003604350036043dffba043dffba03e9004a
03e9004a067f0014077600140327ffba041effba067f0014077600140327
ffba041effba051b003204b500240300fff7060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100000000310000004600000046
000000400000004606000100060001000000ffdc0000fe510000ff160000
ff160000ff160000ff160000ff160000ff160000ff160000ff160000ff16
0000ffdc0000ff160000ffdc0000ff200000ffdc0473004a080000000600
010006000100060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
0600010006000100060001000600010006000100028d0011028d00300600
010004ee0015034d007901a8001301d6ffd701a8005601d6001103750032
0375003201a8002e01d60013051b003204b5002401f4ffba01f4ffba01a8
009301d6001305b5003a05b5003a01f4ffba01f4ffba0242fffe0300fff7
05b5003a05b5003a01f4ffba01f4ffba05b5003a05b5003a01f4ffba01f4
ffba0481003604350036043dffba043dffba0481003604350036043dffba
043dffba0481003604350036043dffba043dffba02b3005f02b3005f02b3
005f02b3005f03e9004a03e9004a03e9004a03e9004a0692003e0692003e
043fffba043fffba0692003e0692003e043fffba043fffba08c9003e08c9
003e06c5ffba06c5ffba08c9003e08c9003e06c5ffba06c5ffba04a7ffba
04a7ffba04a7ffba04a7ffba04a7ffba04a7ffba04a7ffba04a7ffba045a
002a039a00360435ffba0327ffba045a002a039a00360435ffba0327ffba
064f0027064f00270224ffba021affba04a7004604a700460224ffba021a
ffba04cf002d04cf002d0327ffba0327ffba040d0047040d004701a8ffba
01a8ffba02b4002302b400230327ffba0327ffba043500450435004501f4
ffba01f4ffba024200360300fff7039affba0327ffba0375003203750032
051b003204b50024051b003204b5002401f4ffba01f4ffba045a003104ce
0041045a002704ce003a045a005304ce004a045a005304ce004a06000100
060001000000004600000046060001000600010006000100000000460000
004606000100060001000000004800000046060001000600010006000100
000000460000004600000046000000460000004000000031060001000000
004600000046060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
060001000600010006000100028d00ca028d00c7028d00c6060001000600
010006000100060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
0100ffba0800ffba1000ffba06dc0063053f004406d500a1055b00830000
fddc0000fc2f0000fca60000fe540000fcd70000fd730000fe290000fe0d
0000fd110000fc670000fd9d0000fbf50000fc720000fed50000fed50000
ff02041b00a006ac006b06ac00190000feb60000fd730000fe080000fca6
0000fe530000fd110000fbc80000faf40000faaf0000fc720000fbaa0000
fb6a0000fcf10000fc7d0000fbdd0000fcc10000fb980000fdea0000fe84
0000fdc20000fcf10000fd5f0000fe760000febc0000fceb0000fd6c0000
fd580000fc900000fd150000fc2c0000fc130000fc120000fb960000fb96
01c700880556fffd0473004a0556fffd0473004a0556fffd0473004a0556
fffd0473004a0556fffd0473004a0556fffd0473004a0556fffd0473004a
0556fffd0473004a0556fffd0473004a0556fffd0473004a0556fffd0473
004a0556fffd0473004a055600a20473004b055600a20473004b055600a2
0473004b055600a20473004b055600a20473004b055600a20473004b0556
00a20473004b055600a20473004b0239006301c7001f023900ba01c7007c
063900630473004406390063047300440639006304730044063900630473
004406390063047300440639006304730044063900630473004406dc0063
053f004406dc0063053f004406dc0063053f004406dc0063053f004406dc
0063053f004405c700a10473008305c700a10473008306d500a1055b0083
06d500a1055b008306d500a1055b008306d500a1055b008306d500a1055b
00830556000604000021055600060400002105560006040000210556fffd
0473004a0239ffe201c7ffb0063900630473004405c700a10473008305c7
00a10473008305c700a10473008305c700a10473008305c700a104730083
0000fefe0000fefe0000fefe0000fefe0455fffd02eb000c07630007055a
fffb04a900a10380008604a900a10380008605c700a4046b00880473fffd
040000140473fffd04000014055600090400000f05550057042b00450555
00a1047300870605006304730055063900600473004405b5003a01f4ffba
0224ffba021affba04a7004601f4009e01f4001001f4001b01f4001001f4
006b01f4fff90227ffce0000000f0000fff502aa00a402aa00a400000013
00000056000000560000ffcf01a8000f01d6ffbf01a8fff501d6ffcd01a8
001d01d6fff501a8009301d6001303750032037500320375003203750032
051b003204b5002405b5003a05b5003a01f4ffba01f4ffba05b5003a05b5
003a01f4ffba01f4ffba05b5003a05b5003a01f4ffba01f4ffba05b5003a
05b5003a01f4ffba01f4ffba05b5003a05b5003a01f4ffba01f4ffba05b5
003a05b5003a01f4ffba01f4ffba05b5003a05b5003a01f4ffba01f4ffba
0481003604350036043dffba043dffba0481003604350036043dffba043d
ffba0481003604350036043dffba043dffba0481003604350036043dffba
043dffba0481003604350036043dffba043dffba0481003604350036043d
ffba043dffba02b3003202b3003202b3005f02b3005f02b3005f02b3005f
02b3003202b3003202b3005f02b3005f02b3005f02b3005f02b3005f02b3
005f02b3003802b3003802b3004902b3004903e9004a03e9004a03e9004a
03e9004a03e9004a03e9004a03e9004a03e9004a03e9004a03e9004a03e9
004a03e9004a03e9004a03e9004a03e9004a03e9004a0692003e0692003e
043fffba043fffba0692003e0692003e043fffba043fffba0692003e0692
003e043fffba043fffba08c9003e08c9003e06c5ffba06c5ffba08c9003e
08c9003e06c5ffba06c5ffba04a7ffba04a7ffba045a002a039a00360435
ffba0327ffba064f0027064f0027064f00270224ffba021affba064f0027
064f00270224ffba021affba064f0027064f00270224ffba021affba064f
0027064f00270224ffba021affba064f0027064f00270224ffba021affba
04a7004604a7004604a7004604a70046093e0032093e00320740ffba0740
ffba067f0014077600140327ffba041effba04cf002d04cf002d0327ffba
0327ffba04cf002d04cf002d0327ffba0327ffba04cf002d04cf002d0327
ffba0327ffba067f0014077600140327ffba041effba067f001407760014
0327ffba041effba067f0014077600140327ffba041effba067f00140776
00140327ffba041effba067f0014077600140327ffba041effba040d0047
040d004701a8ffba01a8ffba040d0047040d004701a8ffba01a8ffba040d
0047040d004701a8ffba01a8ffba040d0047040d004701a8ffba01a8ffba
043500450435004501f4ffba01f4ffba0435004504350045043500450435
0045043500450435004501f4ffba01f4ffba043500450435004504810036
04350036043dffba043dffba024200360300fff7031a001a031a001a031a
001a03750032037500320375003203750032037500320375003203750032
037500320375003203750032037500320375003203750032037500320375
003203750032051bffba04b5ffba051b003204b5002401f4ffba01f4ffba
0375003203750032051b003204b5002401f4ffba01f4ffba051b003204b5
0024067f0045067f0045067f0045067f004501a800280000fe290000fea2
0000fef30000ff1d0000ff120000ff920000fe7e08fc003208ad00320000
ff880000ffaf0000ff3f0000ff640000fe7e0000ff36018d000002f6fffd
0000fe820000ff1004cd00320000ff580000ff580000ff640692003e0692
003e043fffba043fffba08c9003e08c9003e06c5ffba06c5ffba045a002a
039a00360435ffba0327ffba034d007902b400230242003601f4ffba0290
ffba01f4002f01f4003b01f4001201f400b101f4006d067f001407760014
01f9009b0000fee002bc000003f2009b045afff504cefff5045a005304ce
004a045a005304ce004a045a005304ce004a045a005304ce004a045a0053
04ce004a045a005304ce004a04350071043500ad045a000f04ce000f0473
001406110014054000a7047300860540000a0473000a05c7005105c70066
0400005005c7fffd067a00140540004a04730046047400480556006e04d5
005304e3ffc40639006d04fe000f070c008701c700830239001f05560096
0400008801c7001504000018072000a405c7ffb80473008b0639006006f2
00630557004406090014047300860556009e0556006b0400004f04f20094
030b00440239002404e300140239002404e3003005fb006105c700a1062e
00100400002104e300290400002804e3002904e30031045c0044045c003f
0473003c0473005503ab003203e5002404730087021400bc034e00bc04ac
0072023900b00aaa009e09c7009e08640046087f009606aa0096039c0083
09c7009c078e009c062b0087047300550556fffd0473004a0000fefe0556
fffd0473004a08000001071d00440639006d0473001a0639006d04730042
05560096040000880639006304730044063900630473004404e30029045c
004c01c7ffa20aaa009e09c7009e086400460639006d04730042084600a4
04f2009e05c7009c047300870556fffd0473004a0556fffd0473004a0556
00a20473004b055600a20473004b0239ff8a0239ff64023900040239fff6
0639006304730044063900630473004405c700a102aaffcc05c700a102aa
006805c700a10473007605c700a1047300830556005c0400003f04e30030
02390024045c0051037e001305c700a40473008705a600a404d6005e0486
005e04e30029040000280556fffd0473004a055600a20473004b06390063
047300440000fefd06390063047300440639006304730044063900630473
004405560006040000210473005704730048047300860473008604000013
0400005004730046047300460473005505e9005503ab004903ab0032050d
0032040f00440239ffb90473004204730042047800500402001904ef0019
0473008b047300870473008701c7001901c7005702d90044029e0000026e
001401c700830493008306aa008406aa008406aa00870473ffa60473008b
046c00870473004406530044063f00570466004402aaffe402aaffe402aa
ffe402aa008502aa008502aa008502aaffe40455008a0455008a0400003f
01c7ffa20214ffb901c7ff7202cb00000239000f0239002404730019048c
0054046000880400001a05c7000604000018042800190400002804540028
045c004c045c007904000024040000500400002404000050063900630440
0088040f004904780050046b0088032e000004000008033b008804730048
040000240400005007b7004607400046080b004605b30024036f002405c0
0024061c0013054a0083050f008303e2001e043800630311006403110064
0146ffce01eb006401eb000001eb000002ea006403d90000029100000187
005a02d7005e01c7008001c7006c01c7008a02aa00fb02aa00fb02ca0032
02ca003204ac007004ac007004ac006504ac006502aa012102aa00de02aa
005902aa012102aa001d02aa005902aa00de023900b6023900b602aa00fb
02aa00fb02aa00a602aa00a602aa00a602aa001d02aaffe202aafffb0294
00000142006402b8003202a0000002ca0032031000960310009603100096
031000960310009602aa006202aa006202aa002802aa001d02aa00470457
009604570096045700960457009604570043045700430457004304570043
04570043031000430457002f0457002f0457002f0457002f0457002f0310
002f04570025045700250457002504570025045700250310002f0457001a
0457001a0457001a0457001a0457001a0310001a04570042045700420457
004204570042045700420310004204570096045700960457009604570096
0457004204570042045700420457004204570042031000420457002f0457
002f0457002f0457002f0457002f0310002f0457002f0457002f0457002f
0457002f0457002f0310002f045700260457002604570026045700260457
002603100026045700420457004204570042045700420457004203100042
045700960457009604570096045700960457004204570042045700420457
004204570042031000420457002604570026045700260457002604570026
031000260457002304570023045700230457002304570023031000230457
002f0457002f0457002f0457002f0457002f0310002f0457004b0457004b
0457004b0457004b0457004b0310004b0457009604570096045700960457
00960457004204570042045700420457004204570042031000420457001a
0457001a0457001a0457001a0457001a0310001a04570024045700240457
00240457002404570024031000240457002f0457002f0457002f0457002f
0457002f0310002f0457004e0457004e0457004e0457004e0457004e0310
004e045700960457009604570096045700960000fec10000fec60000fdac
0000fed80000ff920000fee90000ff4c0000fea00000fec40000ffce0000
ff660000fea00000fed80000fed80000ff970000ff980000ff990000fff4
0000ff420000ff420000ff440000ff5f0000fe870000ffec0000ffa60000
ff510000ff510000ff510000fec90000ff1c000000000000fee90000ff4c
0000ff930000ff2a0000ff560000ffce0000fe870000febb0000fec40000
fec40000fed80000fed80000feb30000fec90000fdad0000fec80000feb3
0000fec90000fdad0000fe160000fee60000ffa60000fe870000ff440000
feba0000ff230000ff9a0000fdac0000fe88000000000000feb00000ff98
0000fe930000ffa60000fe870000fe1c0000ff660000ff440000feb00000
feb00000feb00000ff030000ff520000fd1f0000ff530000ff530000ff53
0000feb50000feb50000ffc30000feae0000fedc0000fec70000fec80000
fedc0000fe1e0000ff420000ff510000feb70000feb002aa00de02aa0059
02aa00fa049a007004600000062e001407aa0000062e0014047b004c063f
005704cf0044063900630473004405c700700400005004e300a8033b0088
04ff0000043c0032060d000a049d0042072000a406aa0084056500630473
008b056400a40400000a0556006b0556006b04e0000504c5001905e5005f
046e004403b600140347002804cf00440495005b0400005001c7ffa20639
00600389004d03890050055600a205c000a10473004b047800870ab4006d
04fe00100639001404e70014079900bf05b500880558000104000006072e
00bf0590008806a10078057b007a086d00bf06f0008804d5006603ab001f
065f0039058200480639006004730044066d0009050c001a066d0009050c
001a08980063072c004406aa002004e6001c0987006d06d000500000fe37
0ab4006d04fe001005c7006604000050040700140000fea60000febc0000
ff980000ff980000fc2b0000fc4c05c000a10478008705400004042b0014
0556009e04730087055d00a40464008804d5004e03ab003204a900040380
000005ef002904490028070900a4052f0088091800a006f600880606003e
042b002305c700660400005004e3003003aa002607670031058700260555
0057042b004506e4000a0554000a06e4000a0554000a023900bf07630007
055afffb055700a1046800860540001204ab001805c700a4046b008805c7
00a4046b008805550057042b004506aa00980580008c02aa002e0556fffd
0473004a0556fffd0473004a08000001071d0044055600a20473004b0605
00630473005507630007055afffb04d5004e03ab003204d5004e045c004c
05c000a10478008705c000a1047800870639006304730044063900600473
004405c0004a0415002b0515000a040000210515000a040000210515000a
0400002105550057042b0045071500a805c0008b0540004a0473004607bf
004a0703004607a6006606860053054d00660413005307c3001207470018
084600a4070700880639006d0478005005f90030055300260000ff430000
ff290000ff6a0000ffac0000ff590000ff560000ff730000fed70000fe5c
0000005e0000ff560000ff56000000500000ff0b0000fe550000ff430000
ff5c0000ff750000ff640000ff560000ff0b0000ff8a0000ff560000ff43
0000ff430000ff640000ff75000000500000fddd0000ff750000ffad0000
fefe0000fefe0000fedf0000fedf0000ff580000ff200000fefe0556fffd
0473004a05560096047300860556009604730086055600960473008605c7
00660400005005c7009e0473004605c7009e0473004605c7009e04730046
05c7009e0473004605c7009e04730046055600a20473004b055600a20473
004b055600a20473004b055600a20473004b055600a20473004b04e300a8
023900130639006d0473004205c700a40473008705c700a40473008705c7
00a40473008705c700930473006805c700a4047300870239ffdf01c7ff92
023900200239000605560096040000880556009604000088055600960400
00880473009601c7007e0473009601c7ffb90473009601c7ffa504730096
01c7ffa306aa009806aa008706aa009806aa008706aa009806aa008705c7
009c0473008705c7009c0473008705c7009c0473008705c7009c04730087
063900630473004406390063047300440639006304730044063900630473
00440556009e047300870556009e0473008705c700a102aa008505c700a1
02aa008505c700a102aa005e05c700a102aa00260556005c0400003f0556
005c0400003f0556005c0400003f0556005c0400003f0556005c0400003f
04e300300239002404e300300239002404e300300239ffff04e300300239
000e05c700a10473008305c700a10473008305c700a10473008305c700a1
0473008305c700a104730083055600090400001a055600090400001a078d
001905c70006078d001905c70006055600090400000f055600090400000f
055600060400002104e300290400002804e300290400002804e300290400
0028047300870239000305c70006040000210473004a01c7008904a00048
04a0004804a0004804a0004804a0004804a0004804a0004804a000480556
fffd0556fffd068200130682001306820013068200130682005606820056
039100620391006203910062039100620391006203910062061e0000061e
0000076c0000076c0000076c0000076c00000473008b0473008b0473008b
0473008b0473008b0473008b0473008b0473008b068f0000068f0000081f
0000081f0000081f0000081f0000081ffff3081ffff301c7008101c70081
01c7ff9b01c7ff9b01c7ffeb01c7ffeb01c7ffa201c7ffa2030100000301
0000049100000491000004910000049100000491fff30491fff304730044
0473004404730044047300440473004404730044069d0000069d0000082d
0000082d000007c9000007c9000004600088046000880460008804600088
046000880460008804600088046000880682000007ae00000812000007ae
0006063f0057063f0057063f0057063f0057063f0057063f0057063f0057
063f0057065f0000065f000007ef000007ef0000078b0000078b0000078b
ffff078bffff04a0004804a0004803910062039100620473008b0473008b
01c7ffe601c7006804730044047300440460008804600088063f0057063f
005704a0004804a0004804a0004804a0004804a0004804a0004804a00048
04a000480556fffd0556fffd068200130682001306820013068200130682
0056068200560473008b0473008b0473008b0473008b0473008b0473008b
0473008b0473008b068f0000068f0000081f0000081f0000081f0000081f
0000081ffff3081ffff3063f0057063f0057063f0057063f0057063f0057
063f0057063f0057063f0057065f0000065f000007ef000007ef0000078b
0000078b0000078bffff078bffff04a0004804a0004804a0004804a00048
04a0004804a0004804a000480556fffd0556fffd0556fffd0556fffd0556
fffd02aa00e502aa00fd02aa00e502aa000602aa00060473008b0473008b
0473008b0473008b0473008b068200000682000006f3000006f3000005c7
00a402aa001302aa001302aa000601c7ffbb01c7ffab01c7ffca01c7ffca
01c7ff9301c7ff930239001a0239fff5036500000365000002aa001302aa
001302aa000604600088046000880460008804600088048d0083048d0083
0460008804600088055600060556000606e6000007180000061e000002aa
ffea02aaffea02aa0059063f0057063f0057063f0057063f0057063f0057
07650000069d000007270000065f000005fb006102aa00de02aa00e50473
000d05c7006605c7006606aa008705c70024095000a1078d00190556001f
04e30030080000290400003004c100660000ff530000ff530000ff530000
ff5301c7001901c7ffa2042b0005055600110574004602cbffa3057a0087
02f0ffc8057f000a057f000a02aa008402aa008402aa00c902aa00c902aa
00a002aa005902aaffaf02aa003a02aa0006023900b902aa00a902aa00a9
02aa00a902aa00a9032e001e032e001e02aa003a0000ff730000ffa50000
fed80000ff230000ff720000ff720000fee70000ffa50000ff530000ff53
0000ff530556009e0473008703f8001905fb0019071d0044044000190400
0050046900870469001903eb008703ab003201c700880361004104000088
033600100580008c04780087047300440400001304de004404de004404de
000d078d005003a800440473004404730044042b00840455001f0455001f
03aa00260460008804c6004405de004404c600440400001a05c700060400
002803ab0032036b003f04db001f02eb00880400001a04550088042b0084
05b4007a04ab001803a00000054f0000035100320351ffd1039800320348
00320348003203f80032036e0032015600690284002d0366003202d00032
0415003203710032036f003204180032030f003203590032039c00320376
0031036f003204fb000002fa003202fa00320304003204cc003203050064
0305003202f9003202f90032028c0032028c0032030400320142006402b6
006404950064030f00640305003202d50032030500320305003203060064
01c20032030f006403420032049500640292000003200000031500640292
0000030600320385003202bf00000142006401eb0064030f006402920000
0315006402920000030900320385003202bf0000077d00460a6600460383
00460a2f00460541ffba01e9003c045a00110000ff0d0000ff350000fece
0000feb70000fec90000ffcf0000ff4f0000ff9e0000feca02b3005f02b3
005f03e9004a03e9004a039affba0327ffba039affba0327ffba05ad0069
053d002d05fd009604dc005004e0003c05f6009b053f00280650002804ac
00720000000000000000000000000473fffc02aa005302d5ffce01a8ffba
01a8ffba01a8ffba01a8ffba0658001509c5004704000000080000000400
00000800000002ab000002000000015500000473000002390000019a0000
00ab00000000000005e5000305c7006606aa00980580008c074400830718
0046071800480556fffd05c70066040000140473000a04e300300400004f
0400002804a5001d000001020000ff420000febf0000ff3a0000ff53048d
000a05c7005105c7006605c70051045500a102eb00880000ff430000ffac
0000ffac02d2009600000000021affba0250001e0000ff3a0000ff5b0000
ff5f0000ff7e0000ff940000ff4a0000fe9c05b5003a05b5003a01f4ff96
01f4ff9605b5003a05b5003a01f4ffba01f4ffba05b5003a05b5003a01f4
ffba01f4ffba05b5003a05b5003a01f4ffba01f4ffba05b5003a05b5003a
01f4ffba01f4ffba05b5003a05b5003a01f4ffba01f4ffba05b5003a05b5
003a01f4ffba01f4ffba0481003604350036043dffba043dffba04810036
04350036043dffba043dffba02b3003202b3003202b3005f02b3005f03e9
004a03e9004a0692003e0692003e043fffba043fffba045a002a039a0036
0435ffba0327ffba045a002a039a00360435ffba0327ffba045a002a039a
00360435ffba0327ffba064f0027064f00270224ffba021affba064f0027
064f00270224ffba021affba067f0014077600140327ffba041effba067f
0014077600140327ffba041effba067f0014077600140327ffba041effba
02b4002302b400230327ffba0327ffba02b4002302b400230327ffba0327
ffba043500450435004501f4ffba01f4ffba043500450435004501f4ffba
01f4ffba043500450435004501f4ffba01f4ffba040d0047040d004701a8
ffba01a8ffba03e9004a03e9004a03e9004a03e9004a0692003e0692003e
043fffba043fffba0473ff93047300460239ffbf06aaffd50473ffb70473
ff9102aaffa402aaffa40400ffff0239ffb90400002804730089030b0064
047400480649002401c7001901c700190473001e0460001e048c000a0473
0086047300460239001305b400420400008801c7fffc06aa00870473008b
0473008702aafffb0400003f0318ffa20400001a0400000f040000280473
004a04730048047300460473004b03ab004903ab00320534005501c70088
0400001301c7ffa204730083045c004c0304006402d5003202c9003302fc
0032028c003201d5003201d5000003040032031100640142001901420064
0142006401420019022a0000014200640142000902330064049300640493
0064030fffc9030f0064030e0064030500320300003202b800320142ffca
01c20032030f001d031a00320306006402d400640292000002de003202de
003202de003202f4003202ea00320000febc0000febc0000ff730000fea9
023900b902fa003202f900320305003202a0000002f900320639006d0556
fffd0473000f05c7006602aa004104a0004804a0004804a0004804a00048
04a0004804a0004804a0004804a0004801c7ff9b01c7ffab01c7ff9b01c7
ffab01c7ff9b01c7ffbb01c7ff9b01c7ffbb046000880460008804600088
046000880460008804600088046000880460008801c7ffab01c7ffab01c7
ffbb01c7ffbb04600088046000880460008804600088045a005304ce004a
03a000130556001105c700290558000b055600a20473004b0400003301c7
ffa205e600630473004805c7000002aa000f055600060400002104000013
040000500400001301c700830455fffd02eb0001055600090400000f0556
00090400000f04d5005303ab00490540001204ab00180000fec60000fed4
0000fec60000fed40000fe5f0000fe5f0000ff720000ff730000fee7078b
000a03eb004c040000130473000a01c700150473fff40556001105c700a1
047300190239ff8b05c700a404730087055600960400008804e300290400
00280400003b049e00a403670088053000480000ff530000ffbc0000fefe
0000fefe0000fea40000fea401c7008805c900a505c7009c05c900a50000
fecd0000ff480000fec90000fece0000fec50000fed00000fed10000feee
0000fed60000fedc0000fdd90639005804730048078d001905c70006059f
00a40000feb905dc006304c60009084c001906ba0006023900b903800072
0187005a0187005a0400009904000099023900b0023900b0023900b002aa
0019000000460000003b000000310000005600000044000000560000004a
0000004904e30030047300500473005c0312003f045000480446003d0473
00310450003d047d00620427003f0473005604790054047300550319003b
0473003c047300560473003204730055047e0062042f004b04730053047b
005505c5006a05d3006305f800a6094a00a605f8009c0302003b054100a4
063900600472004601c7008903f80087020a00890473004e0250000e0478
00850473005c0473005c0302003b020a008901c700880471000004890098
04c3005c04e70098046f009804080098052f005c04f0009801ea00980373
00290489009803bc009805c7009804ec00980531005c046d00980531005c
04db0098046d004a0410002904dd0091046800080659001e046f0008046c
0008040e001f0691000006aa005c03bc003805310031046f009804e70014
04c3009004710000047100000471000004710000047100000471000004c3
005c046f0098046f0098046f0098046f009801eafff401ea008e01eaffb6
01eaffda04ec00980531005c0531005c0531005c0531005c0531005c04dd
009104dd009104dd009104dd0091046c0008047100000471000004710000
04c3005c04c3005c04c3005c04c3005c04e7009804e70014046f0098046f
0098046f0098046f0098046f0098052f005c052f005c052f005c052f005c
04f0009804f2002e01eaff9601eaffbd01eaffd401ea003e01ea00870543
0098037300290489009803bc009803bc009803bc009803bc009804ec0098
04ec009804ec009804f500980531005c0531005c0531005c04db009804db
009804db0098046d004a046d004a046d004a046d004a046d004a04100029
0410002904100029040e002904dd009104dd009104dd009104dd009104dd
009104dd00910659001e0659001e0659001e0659001e046c0008046c0008
046c0008040e001f040e001f040e001f0471000006910000053100310471
00000489009803ae009804710000046f0098040e001f04f000980531005c
01ea009804890098045a000205c7009804ec0098042f004c0531005c04e6
0098046d00980425006a04100029046c00080546004c046f00080543004c
0531005204710000046f009804f0009801ea008e0531005c046c00080531
005201eaffda046c0008046f009805af002903ae009804c7005c046d004a
01ea009801eaffda0373002906f4000f06b6009805da0029041600980463
002304e6009804710000048600980489009803ae00980469000f046f0098
06540023041f004604e5009804e50098041600980469000f05c7009804f0
00980531005c04e60098046d009804c3005c0410002904630023050d004c
046f000804dc0098047d004c06280098061e0098057c003c05e700980455
009804c6004606af009804db00120323009802aa002202aa006b02aa0019
02aa002102aa001702aa002202aa002e02aa004902aa002a02aa003302aa
002e02aa003302aa002205c5006a05c5006a05c5006a05c5006a05c5006a
05c5006a05c5006a05c5006a05c5006a05c5006a05c5006a05d3006305d3
006305d3006305d3006305d3006305d3006305d3006305d3006305d30063
05d3006305d3006305f800a605f800a605f800a605f800a605f8009c05f8
009c05f8009c05f8009c05f8009c05f8009c05f8009c05f8009c05f8009c
0302003b0302003b0302003b0302003b030200320302003b0302003b0302
003b0302003b0416ffac0302003b0302003b0302003b020a0089020a004e
0269008902a50089020a00070302003b0302003b0302003b0302003b0302
00320302003b0302003b0302003b054100a4047200460472004604720046
04720046047200460472004604720046047200460472004601c7ffa703f8
0087020a0089020a004e0269008902a50089020a00070250000e0250000e
0300000e0250000e0478008504780085047800850478008504a0005702aa
001702aa002202aa004902aa002a04ee001504ed009d04ed009d060b001a
04d5008505e3008502260099022600890226002c0226001e022600630226
00300226001b0226001d0226001d022600290226001e022600260226001d
02260008022600280c9600460e0c00460000ffba0ed200460000ff5b0000
ff910000ffb70000ff9b0481003604350036043dffba043dffba04810036
04350036043dffba043dffba0692003e0692003e043fffba043fffba03e9
004a03e9004a0481003604350036043dffba043dffba01a8ffc301d6ff5f
01a8ffe901d6ff85051b003204b5002401f4ffba01f4ffba051b003204b5
002401f4ffba01f4ffba051b003204b5002401f4ffba01f4ffba03750032
037500320375003203750032067f0045067f0045067f0045067f00450481
003604350036043dffba043dffba0692003e0692003e043fffba043fffba
0692003e0692003e043fffba043fffba04cf002d04cf002d0327ffba0327
ffba04b4ffe00500ffe00496ffe804e4ffe8075c003205da0032070e0032
051300390bb700000000fe2c0000fffc0000006b000000730000006b051b
003204b5002401f4ffba01f4ffba067f0014077600140327ffba041effba
067f0014077600140327ffba041effba051b003204b5002401f4ffba01f4
ffba051b003204b5002401f4ffba01f4ffba051b003204b5002401f4ffba
01f4ffba0000fff5049e00a403cd000a04e3003003aa002605c000a104ac
0087055600960473005a0a6600440473007e0556001d07ae001206150018
064e009e05be008707a9000906da001f0556009604000086088c000d0713
0018090e00a406ce008805c700a40455008805a300a2046f008702390013
0239001304740048062200bf032f000e04ba005c0474004905590014049b
000a06aa00980556fffd05dc00a50590004b02aaffe50473004403eb004c
0146ffce029200000556005c04e3002902390069063c00aa0b56ffc2084a
ff120b0c00320ed2004401a8ffba01a8ffba01a8ffba01d6000201a80032
01a8004601a8ffba01a8001a0251003a01a8002901a8004601a8ffba01a8
004801a8ffba01a8002901a8ffba01a8004601a8ffba01a8006e01a8ffba
01f4009e01f4001001f4001b01f4001001f4fff9022e008d01f4006b0199
004602bf003202bf00320473000f02ea001302ea00130427fff70427fff7
051b0032051b0032051b0032051b0032051b0032051b0032051b0032051b
0032048000240480002403e5ffba048000240480002403e5ffba05b5003a
05b5003a01f4ffba01f4ffba0481003604350036043dffba043dffba04a7
ffba04a7ffba04a7ffba04a7ffba064f0027064f00270224ffba021affba
04a7004604a700460224ffba021affba040d0047040d004701a8ffba01a8
ffba02b4002302b400230327ffba0327ffba051b003204b5002401f4ffba
01f4ffba051b003204b5002401f4ffba01f4ffba03b7004a03b7004a0375
003203750032036b0046036b00460000ff1e0000ff480000ff1e0000fee7
0000ff4f0000fef90000ffb50000ff520000ff470000ffb50000ff520000
ff470000ff000000fea60000ff000000ff230000ff240000ff570000ff57
0000ff920000ff920000ff920000ff920000ff2f0000fed70000ff340000
ff31045a005304ce004a0000ffac033100190411002d04d1009605240028
0000ffac0000ff2a028d00ab028d00a00444003c043d003c0444003c043d
003c0444003c043d003c0445003c0444003c043d003c04a70046028d00ab
0327002202300014017a002e0000ff760658001505ea00a505cc00a505ba
004605be004605cc00a505ac009104c800a505ca00a4067400a405ba0046
054500a5043900a5076500a50622009b0590009b04ed003c05a6008a05be
0046059a009b060900a505bb009105aaffec0599008705cc00a505980087
0657003c05e8009b061d00a505cc00a5059600460547005c056d00a5056b
0069042000a506180050057d00380642006406190046023100b601c7006c
015bff79019affa1021f001f01daffb4041c004206a900820468008704a3
004804a90087046d00870467004803ef0087046800870557008704a30048
0468008701c2008706ad008704570048046d008704680087042f0046046d
00870478008e0468008201c2ffa3046dffc403a600060468008702c60010
06a900820423005f04830087046800820468008206a60082046800870471
00420327008706a600820467fff80470004605f3003c05b40087023900b9
029800220802006c0802006c05d0004608d5008208d5008208d0008208d5
00820b1500820473001c08000000000000000000ff4d05b5003a05b5003a
01f4ffba01f4ffba015e009302b3005f02b3005f08c9003e08c9003e06c5
ffba06c5ffba067f0014077600140327ffba041effba0242003a0193003a
03e9004a03e9004a0000ffce0400003705c7ffc0046bffa30aa30000088e
000005550014048500000540001204ab001806a30000064a004c04460013
0606001306060013044b001305f2003f065b008700>
<000000000000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c000000fe000001b6000001b6
0000024000000240000002400000024000000240000004a4000005de0000
05de000005de000005de000005de000005de000005de000005de000005de
000005de000005de000005de000005de000005de000005de000005de0000
05de000005de000005de000005de000005de000005de000005de000005de
000005de000005de000005de000005de000005de000005de000005de0000
05de000005de000005de000005de000005de000005de000005de000005de
000005de000005de000005de000005de000005de000005de000005de0000
05de000005de000005de000005de000005de000005de000005de000005de
000005de000007ea000007ea000007ea000007ea000007ea000007ea0000
0a1800000a1800000a1800000a1800000b5c00000b5c00000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600000d1600000d1600000d1600000d1600000d1600000d1600000d16
00000d1600000d1600000d1600000d1600000d1600000d1600000d160000
0d1600010000108d02b5003c00ca000700020010004000860000051705ec
000500020000003a02be0000000300000000021a00000000000300000001
000a021a0000000300000002000e029c00000003000000030044027e0000
000300000004000a021a0000000300000005001802c20000000300000006
000e02da00000003000000070064021a0000000300000008003002f60000
000300000009008a0506000000030000000d0d1805900001000000000000
010d12a80001000000000001000513b50001000000000002000713f50001
000000000003002213e60001000000000004000513b50001000000000005
000c14080001000000000006000714140001000000000007003113b50001
000000000008001812af00010000000000090045141b000100000000000d
068c14600003000104030002000c1aec000300010405000200101afc0003
000104060002000c1b0c000300010407000200101b180003000104080002
00101b280003000104090000021e02e80003000104090001000a021a0003
000104090002000e029c00030001040900030044027e0003000104090004
000a021a0003000104090005001802c20003000104090006000e02da0003
00010409000700621b380003000104090008003002f60003000104090009
008a0506000300010409000d0d2a1b9a00030001040a0002000c1aec0003
0001040b0002001028c400030001040c0002000c1aec00030001040e0002
000c28d40003000104100002000e28e40003000104130002001228f20003
000104140002000c1aec000300010415000200101aec0003000104160002
000c1aec0003000104190002000e290400030001041b0002001028d40003
0001041d0002000c1aec00030001041f0002000c1aec0003000104240002
000e291200030001042a0002000e292000030001042d0002000e292e0003
0001080a0002000c1aec0003000108160002000c1aec000300010c0a0002
000c1aec000300010c0c0002000c1aec00a9002000320030003100350020
0054006800650020004d006f006e006f007400790070006500200043006f
00720070006f0072006100740069006f006e002e00200041006c006c0020
005200690067006800740073002000520065007300650072007600650064
002e0020000d000d0048006500620072006500770020004f00700065006e
00540079007000650020004c00610079006f007500740020006c006f0067
0069006300200063006f0070007900720069006700680074002000a90020
00320030003000330020002600200032003000300037002c002000520061
006c00700068002000480061006e0063006f0063006b002000260020004a
006f0068006e00200048007500640073006f006e002e0020005400680069
00730020006c00610079006f007500740020006c006f0067006900630020
0066006f00720020004200690062006c006900630061006c002000480065
00620072006500770020006900730020006f00700065006e00200073006f
007500720063006500200073006f00660074007700610072006500200075
006e00640065007200200074006800650020004d004900540020004c0069
00630065006e00730065003b002000730065006500200065006d00620065
00640064006500640020006c006900630065006e00730065002000640065
0073006300720069007000740069006f006e00200066006f007200200064
0065007400610069006c0073002e0041007200690061006c002000200069
007300200061002000740072006100640065006d00610072006b0020006f
006600200054006800650020004d006f006e006f00740079007000650020
0043006f00720070006f0072006100740069006f006e002e004d006f006e
006f0074007900700065003a0041007200690061006c0020005200650067
0075006c0061007200200028004d006900630072006f0073006f00660074
002900560065007200730069006f006e00200036002e0039003000410072
00690061006c004d005400a9002000320030003100350020005400680065
0020004d006f006e006f007400790070006500200043006f00720070006f
0072006100740069006f006e002e00200041006c006c0020005200690067
006800740073002000520065007300650072007600650064002e0020000d
000a000d000a0048006500620072006500770020004f00700065006e0054
0079007000650020004c00610079006f007500740020006c006f00670069
006300200063006f0070007900720069006700680074002000a900200032
0030003000330020002600200032003000300037002c002000520061006c
00700068002000480061006e0063006f0063006b002000260020004a006f
0068006e00200048007500640073006f006e002e00200054006800690073
0020006c00610079006f007500740020006c006f00670069006300200066
006f00720020004200690062006c006900630061006c0020004800650062
0072006500770020006900730020006f00700065006e00200073006f0075
00720063006500200073006f00660074007700610072006500200075006e
00640065007200200074006800650020004d004900540020004c00690063
0065006e00730065003b002000730065006500200065006d006200650064
0064006500640020006c006900630065006e007300650020006400650073
006300720069007000740069006f006e00200066006f0072002000640065
007400610069006c0073002e004d006f006e006f00740079007000650020
0054007900700065002000440072006100770069006e00670020004f0066
00660069006300650020002d00200052006f00620069006e0020004e0069
00630068006f006c00610073002c00200050006100740072006900630069
00610020005300610075006e006400650072007300200031003900380032
0059006f00750020006d0061007900200075007300650020007400680069
007300200066006f006e00740020006100730020007000650072006d0069
00740074006500640020006200790020007400680065002000450055004c
004100200066006f00720020007400680065002000700072006f00640075
0063007400200069006e0020007700680069006300680020007400680069
007300200066006f006e007400200069007300200069006e0063006c0075
00640065006400200074006f00200064006900730070006c006100790020
0061006e00640020007000720069006e007400200063006f006e00740065
006e0074002e002000200059006f00750020006d006100790020006f006e
006c0079002000280069002900200065006d006200650064002000740068
0069007300200066006f006e007400200069006e00200063006f006e0074
0065006e00740020006100730020007000650072006d0069007400740065
0064002000620079002000740068006500200065006d0062006500640064
0069006e00670020007200650073007400720069006300740069006f006e
007300200069006e0063006c007500640065006400200069006e00200074
00680069007300200066006f006e0074003b00200061006e006400200028
006900690029002000740065006d0070006f0072006100720069006c0079
00200064006f0077006e006c006f00610064002000740068006900730020
0066006f006e007400200074006f002000610020007000720069006e0074
006500720020006f00720020006f00740068006500720020006f00750074
007000750074002000640065007600690063006500200074006f00200068
0065006c00700020007000720069006e007400200063006f006e00740065
006e0074002e000d000d00540068006500200066006f006c006c006f0077
0069006e00670020006c006900630065006e00730065002c002000620061
0073006500640020006f006e00200074006800650020004d004900540020
006c006900630065006e00730065002000280068007400740070003a002f
002f0065006e002e00770069006b006900700065006400690061002e006f
00720067002f00770069006b0069002f004d00490054005f004c00690063
0065006e007300650029002c0020006100700070006c0069006500730020
0074006f00200074006800650020004f00700065006e0054007900700065
0020004c00610079006f007500740020006c006f00670069006300200066
006f00720020004200690062006c006900630061006c0020004800650062
0072006500770020201c004c00610079006f007500740020004c006f0067
00690063201d0020006100730020006a006f0069006e0074006c00790020
0064006500760065006c006f007000650064002000620079002000520061
006c00700068002000480061006e0063006f0063006b00200061006e0064
0020004a006f0068006e00200048007500640073006f006e002e0020000d
000d005000650072006d0069007300730069006f006e0020006900730020
0068006500720065006200790020006700720061006e007400650064002c
002000660072006500650020006f00660020006300680061007200670065
002c00200074006f00200061006e007900200070006500720073006f006e
0020006f0062007400610069006e0069006e00670020006100200063006f
007000790020006f006600200074006800650020004f00700065006e0054
0079007000650020004c00610079006f007500740020006c006f00670069
006300200066006f00720020004200690062006c006900630061006c0020
00480065006200720065007700200061006e00640020006100730073006f
00630069006100740065006400200064006f00630075006d0065006e0074
006100740069006f006e002000660069006c006500730020002800740068
00650020201c004c00610079006f007500740020004c006f006700690063
00200053006f006600740077006100720065201d0029002c00200074006f
0020006400650061006c00200069006e00200074006800650020004c0061
0079006f007500740020004c006f00670069006300200053006f00660074
007700610072006500200077006900740068006f00750074002000720065
0073007400720069006300740069006f006e002c00200069006e0063006c
007500640069006e006700200077006900740068006f007500740020006c
0069006d00690074006100740069006f006e002000740068006500200072
0069006700680074007300200074006f0020007500730065002c00200063
006f00700079002c0020006d006f0064006900660079002c0020006d0065
007200670065002c0020007000750062006c006900730068002c00200064
006900730074007200690062007500740065002c0020007300750062006c
006900630065006e00730065002c00200061006e0064002f006f00720020
00730065006c006c00200063006f00700069006500730020006f00660020
0074006800650020004c00610079006f007500740020004c006f00670069
006300200053006f006600740077006100720065002c00200061006e0064
00200074006f0020007000650072006d0069007400200070006500720073
006f006e007300200074006f002000770068006f006d0020007400680065
0020004c00610079006f007500740020004c006f00670069006300200053
006f0066007400770061007200650020006900730020006600750072006e
0069007300680065006400200074006f00200064006f00200073006f002c
0020007300750062006a00650063007400200074006f0020007400680065
00200066006f006c006c006f00770069006e006700200063006f006e0064
006900740069006f006e0073003a000d000d005400680065002000610062
006f0076006500200063006f00700079007200690067006800740020006e
006f007400690063006500200061006e0064002000740068006900730020
007000650072006d0069007300730069006f006e0020006e006f00740069
006300650020007300680061006c006c00200062006500200069006e0063
006c007500640065006400200069006e00200061006c006c00200063006f
00700069006500730020006f00720020007300750062007300740061006e
007400690061006c00200070006f007200740069006f006e00730020006f
006600200074006800650020004c00610079006f007500740020004c006f
00670069006300200053006f006600740077006100720065002e000d000d
00540048004500200053004f004600540057004100520045002000490053
002000500052004f00560049004400450044002000270041005300200049
00530027002c00200057004900540048004f005500540020005700410052
00520041004e005400590020004f004600200041004e00590020004b0049
004e0044002c002000450058005000520045005300530020004f00520020
0049004d0050004c004900450044002c00200049004e0043004c00550044
0049004e004700200042005500540020004e004f00540020004c0049004d
004900540045004400200054004f00200054004800450020005700410052
00520041004e00540049004500530020004f00460020004d004500520043
00480041004e0054004100420049004c004900540059002c002000460049
0054004e00450053005300200046004f0052002000410020005000410052
0054004900430055004c0041005200200050005500520050004f00530045
00200041004e00440020004e004f004e0049004e004600520049004e0047
0045004d0045004e0054002e00200049004e0020004e004f002000450056
0045004e00540020005300480041004c004c002000540048004500200041
005500540048004f005200530020004f005200200043004f005000590052
004900470048005400200048004f004c0044004500520053002000420045
0020004c004900410042004c004500200046004f005200200041004e0059
00200043004c00410049004d002c002000440041004d0041004700450053
0020004f00520020004f00540048004500520020004c0049004100420049
004c004900540059002c0020005700480045005400480045005200200049
004e00200041004e00200041004300540049004f004e0020004f00460020
0043004f004e00540052004100430054002c00200054004f005200540020
004f00520020004f00540048004500520057004900530045002c00200041
0052004900530049004e0047002000460052004f004d002c0020004f0055
00540020004f00460020004f005200200049004e00200043004f004e004e
0045004300540049004f004e002000570049005400480020005400480045
00200053004f0046005400570041005200450020004f0052002000540048
004500200055005300450020004f00520020004f00540048004500520020
004400450041004c0049004e0047005300200049004e0020005400480045
00200053004f004600540057004100520045002e000da920323031352054
6865204d6f6e6f7479706520436f72706f726174696f6e2e20416c6c2052
69676874732052657365727665642e200d0d486562726577204f70656e54
797065204c61796f7574206c6f67696320636f7079726967687420a92032
303033202620323030372c2052616c70682048616e636f636b2026204a6f
686e20487564736f6e2e2054686973206c61796f7574206c6f6769632066
6f72204269626c6963616c20486562726577206973206f70656e20736f75
72636520736f66747761726520756e64657220746865204d4954204c6963
656e73653b2073656520656d626564646564206c6963656e736520646573
6372697074696f6e20666f722064657461696c732e417269616c20697320
612074726164656d61726b206f6620546865204d6f6e6f7479706520436f
72706f726174696f6e2e4d6f6e6f747970653a417269616c20526567756c
617220284d6963726f736f66742956657273696f6e20362e393041726961
6c4d544d6f6e6f7479706520547970652044726177696e67204f66666963
65202d20526f62696e204e6963686f6c61732c2050617472696369612053
61756e646572732031393832596f75206d61792075736520746869732066
6f6e74206173207065726d6974746564206279207468652045554c412066
6f72207468652070726f6475637420696e20776869636820746869732066
6f6e7420697320696e636c7564656420746f20646973706c617920616e64
207072696e7420636f6e74656e742e2020596f75206d6179206f6e6c7920
28692920656d626564207468697320666f6e7420696e20636f6e74656e74
206173207065726d69747465642062792074686520656d62656464696e67
207265737472696374696f6e7320696e636c7564656420696e2074686973
20666f6e743b20616e6420286969292074656d706f726172696c7920646f
776e6c6f6164207468697320666f6e7420746f2061207072696e74657220
6f72206f74686572206f75747075742064657669636520746f2068656c70
207072696e7420636f6e74656e742e0d0d54686520666f6c6c6f77696e67
206c6963656e73652c206261736564206f6e20746865204d4954206c6963
656e73652028687474703a2f2f656e2e77696b6970656469612e6f72672f
77696b692f4d49545f4c6963656e7365292c206170706c69657320746f20
746865204f70656e54797065204c61796f7574206c6f67696320666f7220
4269626c6963616c2048656272657720d24c61796f7574204c6f676963d3
206173206a6f696e746c7920646576656c6f7065642062792052616c7068
2048616e636f636b20616e64204a6f686e20487564736f6e2e200d0d5065
726d697373696f6e20697320686572656279206772616e7465642c206672
6565206f66206368617267652c20746f20616e7920706572736f6e206f62
7461696e696e67206120636f7079206f6620746865204f70656e54797065
204c61796f7574206c6f67696320666f72204269626c6963616c20486562
72657720616e64206173736f63696174656420646f63756d656e74617469
6f6e2066696c6573202874686520d24c61796f7574204c6f67696320536f
667477617265d3292c20746f206465616c20696e20746865204c61796f75
74204c6f67696320536f66747761726520776974686f7574207265737472
696374696f6e2c20696e636c7564696e6720776974686f7574206c696d69
746174696f6e207468652072696768747320746f207573652c20636f7079
2c206d6f646966792c206d657267652c207075626c6973682c2064697374
7269627574652c207375626c6963656e73652c20616e642f6f722073656c
6c20636f70696573206f6620746865204c61796f7574204c6f6769632053
6f6674776172652c20616e6420746f207065726d697420706572736f6e73
20746f2077686f6d20746865204c61796f7574204c6f67696320536f6674
77617265206973206675726e697368656420746f20646f20736f2c207375
626a65637420746f2074686520666f6c6c6f77696e6720636f6e64697469
6f6e733a0d0d5468652061626f766520636f70797269676874206e6f7469
636520616e642074686973207065726d697373696f6e206e6f7469636520
7368616c6c20626520696e636c7564656420696e20616c6c20636f706965
73206f72207375627374616e7469616c20706f7274696f6e73206f662074
6865204c61796f7574204c6f67696320536f6674776172652e0d0d544845
20534f4654574152452049532050524f564944454420274153204953272c
20574954484f55542057415252414e5459204f4620414e59204b494e442c
2045585052455353204f5220494d504c4945442c20494e434c5544494e47
20425554204e4f54204c494d4954454420544f205448452057415252414e
54494553204f46204d45524348414e544142494c4954592c204649544e45
535320464f52204120504152544943554c415220505552504f534520414e
44204e4f4e494e4652494e47454d454e542e20494e204e4f204556454e54
205348414c4c2054484520415554484f5253204f5220434f505952494748
5420484f4c44455253204245204c4941424c4520464f5220414e5920434c
41494d2c2044414d41474553204f52204f54484552204c494142494c4954
592c205748455448455220494e20414e20414354494f4e204f4620434f4e
54524143542c20544f5254204f52204f54484552574953452c2041524953
494e472046524f4d2c204f5554204f46204f5220494e20434f4e4e454354
494f4e20574954482054484520534f465457415245204f52205448452055
5345204f52204f54484552204445414c494e475320494e2054484520534f
4654574152452e0d004e006f0072006d0061006c006e0079006f00620079
010d0065006a006e00e9006e006f0072006d0061006c005300740061006e
0064006100720064039a03b103bd03bf03bd03b903ba03ac004100720069
0061006c00200069007300200061002000740072006100640065006d0061
0072006b0020006f006600200054006800650020004d006f006e006f0074
00790070006500200043006f00720070006f0072006100740069006f006e
002e0059006f00750020006d006100790020007500730065002000740068
0069007300200066006f006e00740020006100730020007000650072006d
006900740074006500640020006200790020007400680065002000450055
004c004100200066006f00720020007400680065002000700072006f0064
00750063007400200069006e002000770068006900630068002000740068
0069007300200066006f006e007400200069007300200069006e0063006c
007500640065006400200074006f00200064006900730070006c00610079
00200061006e00640020007000720069006e007400200063006f006e0074
0065006e0074002e002000200059006f00750020006d006100790020006f
006e006c0079002000280069002900200065006d00620065006400200074
00680069007300200066006f006e007400200069006e00200063006f006e
00740065006e00740020006100730020007000650072006d006900740074
00650064002000620079002000740068006500200065006d006200650064
00640069006e00670020007200650073007400720069006300740069006f
006e007300200069006e0063006c007500640065006400200069006e0020
007400680069007300200066006f006e0074003b00200061006e00640020
0028006900690029002000740065006d0070006f0072006100720069006c
007900200064006f0077006e006c006f0061006400200074006800690073
00200066006f006e007400200074006f002000610020007000720069006e
0074006500720020006f00720020006f00740068006500720020006f0075
0074007000750074002000640065007600690063006500200074006f0020
00680065006c00700020007000720069006e007400200063006f006e0074
0065006e0074002e000d000a000d000a00540068006500200066006f006c
006c006f00770069006e00670020006c006900630065006e00730065002c
0020006200610073006500640020006f006e00200074006800650020004d
004900540020006c006900630065006e0073006500200028006800740074
0070003a002f002f0065006e002e00770069006b00690070006500640069
0061002e006f00720067002f00770069006b0069002f004d00490054005f
004c006900630065006e007300650029002c0020006100700070006c0069
0065007300200074006f00200074006800650020004f00700065006e0054
0079007000650020004c00610079006f007500740020006c006f00670069
006300200066006f00720020004200690062006c006900630061006c0020
0048006500620072006500770020201c004c00610079006f007500740020
004c006f006700690063201d0020006100730020006a006f0069006e0074
006c007900200064006500760065006c006f007000650064002000620079
002000520061006c00700068002000480061006e0063006f0063006b0020
0061006e00640020004a006f0068006e00200048007500640073006f006e
002e0020000d000a000d000a005000650072006d0069007300730069006f
006e00200069007300200068006500720065006200790020006700720061
006e007400650064002c002000660072006500650020006f006600200063
00680061007200670065002c00200074006f00200061006e007900200070
006500720073006f006e0020006f0062007400610069006e0069006e0067
0020006100200063006f007000790020006f006600200074006800650020
004f00700065006e00540079007000650020004c00610079006f00750074
0020006c006f00670069006300200066006f00720020004200690062006c
006900630061006c002000480065006200720065007700200061006e0064
0020006100730073006f00630069006100740065006400200064006f0063
0075006d0065006e0074006100740069006f006e002000660069006c0065
0073002000280074006800650020201c004c00610079006f007500740020
004c006f00670069006300200053006f006600740077006100720065201d
0029002c00200074006f0020006400650061006c00200069006e00200074
006800650020004c00610079006f007500740020004c006f006700690063
00200053006f00660074007700610072006500200077006900740068006f
007500740020007200650073007400720069006300740069006f006e002c
00200069006e0063006c007500640069006e006700200077006900740068
006f007500740020006c0069006d00690074006100740069006f006e0020
007400680065002000720069006700680074007300200074006f00200075
00730065002c00200063006f00700079002c0020006d006f006400690066
0079002c0020006d0065007200670065002c0020007000750062006c0069
00730068002c00200064006900730074007200690062007500740065002c
0020007300750062006c006900630065006e00730065002c00200061006e
0064002f006f0072002000730065006c006c00200063006f007000690065
00730020006f006600200074006800650020004c00610079006f00750074
0020004c006f00670069006300200053006f006600740077006100720065
002c00200061006e006400200074006f0020007000650072006d00690074
00200070006500720073006f006e007300200074006f002000770068006f
006d00200074006800650020004c00610079006f007500740020004c006f
00670069006300200053006f006600740077006100720065002000690073
0020006600750072006e0069007300680065006400200074006f00200064
006f00200073006f002c0020007300750062006a00650063007400200074
006f002000740068006500200066006f006c006c006f00770069006e0067
00200063006f006e0064006900740069006f006e0073003a000d000a000d
000a005400680065002000610062006f0076006500200063006f00700079
007200690067006800740020006e006f007400690063006500200061006e
0064002000740068006900730020007000650072006d0069007300730069
006f006e0020006e006f00740069006300650020007300680061006c006c
00200062006500200069006e0063006c007500640065006400200069006e
00200061006c006c00200063006f00700069006500730020006f00720020
007300750062007300740061006e007400690061006c00200070006f0072
00740069006f006e00730020006f006600200074006800650020004c0061
0079006f007500740020004c006f00670069006300200053006f00660074
0077006100720065002e000d000a000d000a00540048004500200053004f
004600540057004100520045002000490053002000500052004f00560049
00440045004400200027004100530020004900530027002c002000570049
00540048004f00550054002000570041005200520041004e005400590020
004f004600200041004e00590020004b0049004e0044002c002000450058
005000520045005300530020004f005200200049004d0050004c00490045
0044002c00200049004e0043004c005500440049004e0047002000420055
00540020004e004f00540020004c0049004d004900540045004400200054
004f0020005400480045002000570041005200520041004e005400490045
00530020004f00460020004d00450052004300480041004e005400410042
0049004c004900540059002c0020004600490054004e0045005300530020
0046004f00520020004100200050004100520054004900430055004c0041
005200200050005500520050004f0053004500200041004e00440020004e
004f004e0049004e004600520049004e00470045004d0045004e0054002e
00200049004e0020004e004f0020004500560045004e0054002000530048
0041004c004c002000540048004500200041005500540048004f00520053
0020004f005200200043004f005000590052004900470048005400200048
004f004c00440045005200530020004200450020004c004900410042004c
004500200046004f005200200041004e005900200043004c00410049004d
002c002000440041004d00410047004500530020004f00520020004f0054
0048004500520020004c0049004100420049004c004900540059002c0020
005700480045005400480045005200200049004e00200041004e00200041
004300540049004f004e0020004f004600200043004f004e005400520041
00430054002c00200054004f005200540020004f00520020004f00540048
004500520057004900530045002c002000410052004900530049004e0047
002000460052004f004d002c0020004f005500540020004f00460020004f
005200200049004e00200043004f004e004e0045004300540049004f004e
00200057004900540048002000540048004500200053004f004600540057
0041005200450020004f0052002000540048004500200055005300450020
004f00520020004f00540048004500520020004400450041004c0049004e
0047005300200049004e002000540048004500200053004f004600540057
004100520045002e000d000a004e006f0072006d00610061006c0069004e
006f0072006d00e1006c006e0065004e006f0072006d0061006c00650053
00740061006e00640061006100720064041e0431044b0447043d044b0439
004e0061007600610064006e006f0074006801b001a10300006e00670041
007200720075006e007400610000b15485410b032c032c032c0222001d00
1f032b032a003c001f032ab2061d1fb80328b326181fd0bc032900e00329
00020329b22b1d1fb90327031db23b1f40b80323b31215320f412d032000
01002f0320000100200320006f032000af032000bf03200004005f031e00
010010031e007f031e0080031e00af031e00bf031e00d0031e0006000003
1e0010031e0020031e006f031e009f031e00e0031e0006031d031cb2201f
1041270319007f03190002000f031700ef031700ff03170003001f031700
2f0317004f0317005f0317008f0317009f03170006000f0317005f031700
6f0317007f031700bf031700f00317000600400317b2923340b80317b28b
3340b80317b36a6c3240b80317b2613340b80317b35c5d3240b80317b357
593240b80317b34d513240b80317b344493240b80317b23a3340b80317b3
31343240b80317b32e423240b80317b3272c3240b80317b312253280b803
17b30a0d32c04116031600d00316000200700316000102c4000f0101001f
00a0031500b0031500020306000f0101001f00400312b32426329fbf0304
0001030203010064001fffc00301b20d1132410a02ff02ef0012001f02ee
02ed0064001fffc002edb30e11329f414a02e200af02e200bf02e2000302
e202e202e102e1007f02e00001001002e0003f02e0009f02e000bf02e000
cf02e000ef02e0000602e002e002df02df02de02de000f02dd002f02dd00
3f02dd005f02dd009f02dd00bf02dd00ef02dd000702dd02dd001002dc00
01000002dc0001001002dc003f02dc000202dc02dc001002db000102db02
db000f02da000102da02daffc002d3b2373932b9ffc002d3b22b2f32b9ff
c002d3b21f2532b9ffc002d3b2171b32b9ffc002d3b2121632b802d2b2f9
291fb90326031cb23b1f40bb0322003e00330322b225311fb80318b23c69
1fb802e3b3202b1fa0413002d400b002d40002000002d4001002d4002002
d4005002d4006002d4007002d40006006002d6007002d6008002d6009002
d600a002d600b002d60006000002d6001002d6002002ca002002cc002002
d6003002d6004002d6005002d6000802d0b2202b1fb802cfb226421f4116
02ce02c70017001f02cd02c80017001f02cc02c60017001f02cb02c50017
001f02c902c5001e001f02ca02c6b21e1f00410b02c6000002c7001002c6
001002c7002f02c5000502c1b324121fff411102bf0001001f02bf002f02
bf003f02bf004f02bf005f02bf008f02bf000602bf0222b2641f12410b02
bb00ca0800001f02b200e90800001f02a600a20800406a1f402643493240
2043493240263a3d3240203a3d329f209f26024026969932402096993240
268e923240208e92324026848c324020848c3240267a813240207a813240
266c763240206c76324026646a324020646a3240265a5f3240205a5f3240
264f543240204f5432b8029eb724271f374f6b0120410f02770030027700
40027700500277000402770277027700f90400001f029bb22a2a1fb8029a
402b292a1f80ba0180bc0180520180a201806501807e01808101803c0180
5e01802b01801c01801e0180400180bb0138000100800140b40180400180
bb013800010080013940180180ca0180ad01807301802601802501802401
8020013740b80221b2493340b80221b2453340b80221b341423240b80221
b33d3e320f410f0221003f0221007f0221000300bf022100cf022100ff02
21000300400221b320223240b80221b3191e3240b80222b32a3f3240b802
21b32e3a326f414a02c3007f02c3008f02c300df02c30004002f02c30060
02c300cf02c30003000f02c3003f02c3005f02c300c002c300ef02c300ff
02c3000600df02220001008f02220001000f0222002f0222003f0222005f
0222007f022200ef0222000600bf022100ef02210002006f0221007f0221
00af02210003000f0221002f0221003f0221004f0221000402c302c30222
022202210221401d101c102b1048038f1c010f1e014f1eff1e0237001616
00000012110811b8010db6f70df8f70d00094109028e028f001d001f0290
028f001d001f028fb2f91d1fb80198b226bb1f41150197001e0401001f01
3900260125001f013800730401001f0135001c0801001f0134001c02ab00
1f0132b21c561fb8010fb2262c1fba010e001e0401b61ff91ce41fe91cb8
0201b61fe81cbb1fd720b80401b21fd51cb802abb61fd41c891fc92fb808
01b21fbc26b80101b21fba20b80201b61fb91c381fadcab80401b21f8126
b8019ab21f7e26b8019ab61f7d1c471f6b1cb80401b21f6526b8019ab21f
5e73b80401400f1f52265a1f481c891f441c621f4073b80801b61f3f1c5e
1f3c26b8019ab21f351cb80401b61f301cbb1f2b1cb80401b61f2a1c561f
291cb80101b21f231eb80401b41f35555537b80168402c07960758074f07
360732072c0721071f071d071b071408120810080e080c080a0808080608
04080208000814b8ffe0402b000001001406100000010006040000010004
10000001001002000001000200000001000002010802004a00b013034b02
4b5342014bb0c063004b6220b0f65323b8010a515ab005234201b0124b00
4b5442b0382b4bb807ff52b0372b4bb007505b58b101018e59b0382bb002
88b801005458b801ffb101018e851bb0124358b900010111858d1bb90001
0128858d5959001816763f183f123e113946443e113946443e113946443e
113946443e11394660443e11394660442b2b2b2b2b2b2b2b2b2b2b182b2b
2b2b2b2b2b2b2b2b2b182b1d42b0964b5358b235aaaa1d4259b0324b5358
b235ffff1d42594bb09353205c58b901f201f04544b901f101f045445958
b9033e01f2455258b901f2033e4459594bb8015653205c58b9002001f145
44b9002601f145445958b9081e0020455258b90020081e4459594bb8019a
53205c58b9002501f24544b9002401f245445958b909090025455258b900
2509094459594bb8040153205c58b173244544b1242445445958b9172000
73455258b9007317204459594bb8040153205c58b1ca254544b125254544
5958b9168000ca455258b900ca16804459594bb03e53205c58b11c1c4544
b11e1c45445958b9011a001c455258b9001c011a4459594bb05653205c58
b11c1c4544b12f1c45445958b90189001c455258b9001c01894459594bb8
030153205c58b11c1c4544b11c1c45445958b90de0001c455258b9001c0d
e04459592b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b65422b2b01b33b59635c4565234560
23456560234560b08b766818b080622020b163594565234520b003266062
636820b003266165b059236544b063234420b13b5c4565234520b0032660
62636820b003266165b05c236544b03b2344b1005c455458b15c406544b2
3b403b4523614459b347503437456523456023456560234560b089766818
b080622020b134504565234520b003266062636820b003266165b0502365
44b034234420b147374565234520b003266062636820b003266165b03723
6544b0472344b10037455458b137406544b24740474523614459004b5342
014b5058b108004259435c58b108004259b3020b0a124358601b21594216
10703eb0124358b93b21187e1bba040001a8000b2b59b00c2342b00d2342
b0124358b92d412d411bba04000400000b2b59b00e2342b00f2342b01243
58b9187e3b211bba01a80400000b2b59b0102342b0112342002b74757375
00184569444569444569447373737374757374752b2b2b2b74752b2b2b2b
2b737373737373737373737373737373737373737373737373732b2b2b45
b0406144737400004bb02a534bb03f515a58b1070745b040604459004bb0
3a534bb03f515a58b10b0b45b8ffc0604459004bb02e534bb03a515a58b1
030345b040604459004bb02e534bb03c515a58b1090945b8ffc06044592b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b752b2b2b2b2b2b2b435c58b900
8002bbb301401e017400735903b01e4b5402b0124b545ab012435c5a58ba
009f02220001007359002b7473012b01732b2b2b2b2b2b2b2b737373732b
2b2b2b2b002b2b2b2b2b2b00456944734569447345694473747545694473
4569444569444569447374456944456944732b2b2b2b2b732b002b732b74
752b2b2b2b2b2b2b2b2b2b2b2b2b2b737475732b7374757374752b2b2b74
2b002b2b2b00184569442b5c58410e0336032f0041001f0330032f002d00
1f032d032f0032001f0332032f4012261f0302371f0908371f0b0a441f07
06441f2b2b2b2b2b2b2b2b592b0000>
[3351 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
2 438 14 <0001007200ed043a04b6000b0059b0852b58401f006e0902f908036e0507
06096e0a040af905016e3f024f020202190c575a182b4e10f45d4df43ced
3c10e43c3c002ff43cfd3cf431301bb7000500050a070302b80333b16c03
00182f2b333232332f2f3031592511213521113311211521110201fe7101
8faa018ffe71ed0192a8018ffe71a8fe6e00>PBAAAA+ArialMT AddT42Char 
2 0 0 <00020100000005000500000300070042b40201e40607b802994013000504
e403000a0704e4010019080605e40203bc023100090199012e00182b10f6
3cfd3c4e10f43c4dfd3c003f3cfd3c10fc3cfd3c31302111211125211121
01000400fc2003c0fc400500fb002004c000>PBAAAA+ArialMT AddT42Char 
PBAAAA+ArialMT /CharStrings get begin
/plus 14 def
end
PBAAAA+ArialMT /Encoding get
dup 43 /plus put
pop
end
%ADOEndSubsetFont
/RBZTVR+ArialMT /PBAAAA+ArialMT findfont ct_VMDictPut
/RBZTVR+ArialMT*1 
[43{/.notdef}rp /plus 212{/.notdef}rp]
RBZTVR+ArialMT nf
RBZTVR+ArialMT*1 [63.644 0 0 -63.644 0 0 ]msf
482.405 63.2222 mo
(+)sh
620.515 129.143 mo
620.515 187.724 li
@
664.313 187.499 mo
693.073 158.735 li
663.602 129.264 li
@
%ADOBeginSubsetFont: PBAAAA+ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal RBZTVR+ArialMT gcheck setglobal} if
2 1188 20 <000100df000002fb05c0000a010eb0852b58b30a0c0c0cb80140b456000c
0c0cb80140b4560a0e0b0bb80140b456000e0b0bb80140b4560a080d0db8
0140b45600080d0db8014040215603400d11346b047f028f02990804ac04
010900060502030905010c0201ca0a00b8ffc0400a212334300001200001
00b8ffe0b41010025500b8ffea40110f0f0255001c0c0c0255000e0d0d02
5500b8fff040190f0f065500100c0c065500100d0d0655001a0c05400d0f
3405b8ffc0400e212334300501200540050205190bba013c018500182b4e
10e45d712b2b10f62b2b2b2b2b2b2b5d712b3c4dfd3c003f3f1739011139
3130015d005d2b012b2b2b2b2b2b1b400c0201090640050509010c090500
183f3f12392f1acd111239303159212311060607353636373302fbb441d3
5497e22f74047b3e7c1fae47ca5f>RBZTVR+ArialMT AddT42Char 
RBZTVR+ArialMT /CharStrings get begin
/one 20 def
end
RBZTVR+ArialMT /Encoding get
dup 49 /one put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/RBZTVR+ArialMT*1 
[43{/.notdef}rp /plus 5{/.notdef}rp /one 206{/.notdef}rp]
RBZTVR+ArialMT nf
RBZTVR+ArialMT*1 [63.644 0 0 -63.644 0 0 ]msf
627.563 181.034 mo
(1)sh
757.966 545.412 mo
757.966 603.992 li
@
801.765 603.768 mo
830.524 575.002 li
801.053 545.535 li
@
%ADOBeginSubsetFont: PBAAAA+ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal RBZTVR+ArialMT gcheck setglobal} if
2 576 19 <00020055ffe7041105c00010001d01feb0852b58b10202435458400a1a1e
0405141e0d0d1709b8ffe8b40f0f025509b8ffe840190d0d02550911000c
0f0f025500160c0c0255000c0d0d0255002f2b2b2bcd2f2b2bcd003fed3f
ed31301bb10602435458400a1a1e0405141e0d0d1709b8fff4b40f0f0655
09b8ffe6b40d0d065509b8ffee40190b0b0655091100100d0d065500100c
0c065500100b0b0655002f2b2b2bcd2f2b2b2bcd003fed3fed31301b404e
04068702880b880fc90e0509070b180245134c154a19431b54135c155c19
521b6b076b0b63136c156b19601b79027706760b7a0f870698079610c918
da02d606d60bdb0f1a1a1e0405141e0d0d174110fff4000c000c01400056
0017fff2000b000b014000560017fff8000d000d01404011561773094021
2334300901000910090209410afff4000b000b014000560009ffe8000d00
0d0140b75609901f110c0c0cb80140b456110e0b0bb80140b45611080d0d
b80140b356117300b8ffc0400c2123342000400002000c0c0cb80140b456
00080b0bb80140b45600080d0db80140b65600901ec78b182b10f62b2b2b
5d2bed2b2b2b10f62b2b5d712bed2b2b2b003fed3fed3130015d71005db0
0243b0405058b4062019101cb8fff0b202200bbeffe00016ffe00012ffe0
000fffe0003838383838013838385959591bb10d14b8032fb46c0d0d041a
b8032fb26c040500183f2b3f2b3031591310123633321616121510020623
22272613101633323611102623220706556bd3a076b274426ad3a1d47991
b9a97c7ca9a97e7c4a5d02d30104013dac5fb3feffdafefefec3ad98b701
9dfe97eff00168016aee6986>RBZTVR+ArialMT AddT42Char 
RBZTVR+ArialMT /CharStrings get begin
/zero 19 def
end
RBZTVR+ArialMT /Encoding get
dup 48 /zero put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/RBZTVR+ArialMT*1 
[43{/.notdef}rp /plus 4{/.notdef}rp /zero /one 206{/.notdef}rp]
RBZTVR+ArialMT nf
RBZTVR+ArialMT*1 [63.644 0 0 -63.644 0 0 ]msf
765.015 597.303 mo
(0)sh
927.532 76.8447 mo
927.532 135.425 li
@
971.331 135.199 mo
1000.09 106.437 li
970.618 76.9658 li
@
5.1384 lw
939.887 106.741 mo
973.285 106.741 li
@
gsave
272.447 144.6 mo
275.63 144.6 li
275.63 58.7837 li
272.447 58.7837 li
cp
clp
274.039 58.7837 mo
274.039 144.6 li
0 0 0 .911986 cmyk
f
3.18269 lw
274.039 58.7837 mo
274.039 144.6 li
@
grestore
gsave
260.748 151.478 mo
286.923 151.478 li
286.923 131.815 li
260.748 131.815 li
cp
clp
277.988 141.753 mo
279.914 138.35 281.686 136.137 283.737 133.407 cv
264.296 133.407 li
265.167 134.384 268.123 138.35 270.046 141.753 cv
272.107 145.396 273.516 148.698 274.019 150.841 cv
274.521 148.698 275.931 145.396 277.988 141.753 cv
cp
0 0 0 .911986 cmyk
f
3.18269 lw
277.988 141.753 mo
279.914 138.35 281.686 136.137 283.737 133.407 cv
264.296 133.407 li
265.167 134.384 268.123 138.35 270.046 141.753 cv
272.107 145.396 273.516 148.698 274.019 150.841 cv
274.521 148.698 275.931 145.396 277.988 141.753 cv
cp
@
grestore
2.66667 setflat
2.6955 lw
1 lj
10 ml
139.247 395.887 mo
139.19 396.497 li
139.083 396.977 li
139.026 397.582 li
138.975 398.189 li
138.917 398.8 li
138.866 399.404 li
138.819 400.008 li
138.769 400.615 li
138.722 401.219 li
138.633 401.691 li
138.59 402.294 li
138.556 402.896 li
138.519 403.497 li
138.49 404.094 li
138.46 404.696 li
138.436 405.293 li
138.416 405.887 li
138.401 406.48 li
138.344 406.942 li
138.339 407.532 li
138.335 408.12 li
138.344 408.708 li
138.351 409.294 li
138.364 409.878 li
138.386 410.459 li
138.416 411.037 li
138.395 411.485 li
138.435 412.062 li
138.483 412.633 li
138.536 413.205 li
138.596 413.772 li
138.657 414.341 li
138.733 414.903 li
138.81 415.464 li
138.848 415.893 li
138.942 416.449 li
139.045 417.001 li
139.153 417.552 li
139.268 418.102 li
139.393 418.648 li
139.528 419.189 li
139.665 419.732 li
139.766 420.138 li
139.918 420.673 li
140.086 421.204 li
140.254 421.736 li
140.438 422.26 li
140.622 422.786 li
140.818 423.309 li
141.022 423.827 li
141.238 424.34 li
141.405 424.724 li
141.637 425.233 li
141.867 425.742 li
142.116 426.246 li
142.364 426.75 li
142.629 427.248 li
142.894 427.743 li
143.169 428.237 li
143.404 428.598 li
143.695 429.086 li
143.991 429.573 li
144.299 430.057 li
144.611 430.538 li
144.934 431.014 li
145.257 431.493 li
145.596 431.964 li
145.886 432.307 li
146.234 432.774 li
146.585 433.242 li
146.946 433.707 li
147.317 434.168 li
147.688 434.629 li
148.064 435.089 li
148.452 435.544 li
148.795 435.868 li
149.187 436.322 li
149.591 436.771 li
149.994 437.219 li
150.402 437.668 li
150.816 438.113 li
151.237 438.558 li
151.661 439.003 li
152.092 439.44 li
152.472 439.752 li
152.907 440.189 li
153.344 440.629 li
153.784 441.065 li
154.224 441.503 li
154.67 441.938 li
155.121 442.371 li
155.568 442.805 li
155.97 443.108 li
156.427 443.543 li
156.879 443.974 li
157.336 444.404 li
157.792 444.838 li
158.25 445.268 li
158.707 445.699 li
159.163 446.131 li
159.57 446.433 li
160.025 446.864 li
160.483 447.294 li
160.936 447.729 li
161.392 448.16 li
161.843 448.592 li
162.291 449.027 li
162.741 449.461 li
163.138 449.768 li
163.579 450.201 li
164.02 450.641 li
164.455 451.079 li
164.89 451.518 li
165.32 451.958 li
165.75 452.399 li
166.175 452.841 li
166.593 453.285 li
166.959 453.6 li
167.368 454.05 li
167.77 454.498 li
168.174 454.947 li
168.567 455.404 li
168.959 455.855 li
169.346 456.31 li
169.724 456.769 li
170.044 457.102 li
170.416 457.561 li
170.776 458.025 li
171.126 458.493 li
171.477 458.963 li
171.815 459.435 li
172.154 459.908 li
172.478 460.383 li
172.751 460.73 li
173.063 461.211 li
173.371 461.696 li
173.666 462.181 li
173.957 462.671 li
174.243 463.16 li
174.518 463.655 li
174.782 464.151 li
174.996 464.519 li
175.245 465.022 li
175.493 465.524 li
175.725 466.034 li
175.958 466.545 li
176.173 467.058 li
176.388 467.571 li
176.59 468.092 li
176.79 468.612 li
176.923 469.008 li
177.107 469.532 li
177.275 470.064 li
177.443 470.593 li
177.595 471.13 li
177.747 471.667 li
177.883 472.207 li
178.018 472.75 li
178.094 473.167 li
178.208 473.715 li
178.317 474.268 li
178.42 474.818 li
178.514 475.376 li
178.602 475.933 li
178.678 476.499 li
178.754 477.059 li
178.766 477.498 li
178.828 478.064 li
178.877 478.636 li
178.928 479.208 li
178.966 479.782 li
178.996 480.361 li
179.024 480.939 li
179.047 481.521 li
179.061 482.106 li
179.019 482.562 li
179.025 483.146 li
179.022 483.738 li
179.019 484.327 li
179.011 484.919 li
178.996 485.513 li
178.977 486.106 li
178.952 486.705 li
178.872 487.174 li
178.841 487.773 li
178.807 488.374 li
178.771 488.974 li
178.731 489.577 li
178.69 490.181 li
178.643 490.784 li
178.592 491.391 li
178.495 491.865 li
178.443 492.474 li
178.387 493.079 li
178.335 493.687 li
178.278 494.295 li
178.222 494.902 li
178.165 495.512 li
178.108 496.119 li
178.001 496.598 li
177.944 497.207 li
177.887 497.813 li
177.83 498.423 li
177.779 499.028 li
177.722 499.636 li
177.671 500.244 li
177.623 500.847 li
177.572 501.453 li
177.477 501.929 li
177.438 502.531 li
177.396 503.135 li
177.361 503.736 li
177.325 504.336 li
177.295 504.935 li
177.264 505.536 li
177.239 506.132 li
177.169 506.597 li
177.156 507.19 li
177.148 507.781 li
177.144 508.371 li
177.141 508.96 li
177.148 509.547 li
177.156 510.132 li
177.167 510.718 li
177.141 511.168 li
177.171 511.748 li
177.2 512.325 li
177.239 512.9 li
177.289 513.474 li
177.34 514.044 li
177.4 514.612 li
177.46 515.18 li
177.488 515.612 li
177.564 516.175 li
177.653 516.731 li
177.747 517.289 li
177.849 517.843 li
177.958 518.392 li
178.073 518.941 li
178.198 519.487 li
178.333 520.028 li
178.419 520.441 li
178.571 520.979 li
178.722 521.514 li
178.892 522.045 li
179.06 522.576 li
179.243 523.103 li
179.427 523.625 li
179.622 524.148 li
179.777 524.537 li
179.993 525.049 li
180.21 525.563 li
180.442 526.073 li
180.673 526.583 li
180.92 527.085 li
181.169 527.589 li
181.433 528.086 li
181.648 528.454 li
181.923 528.947 li
182.208 529.438 li
182.5 529.925 li
182.796 530.412 li
183.104 530.897 li
183.416 531.38 li
183.738 531.854 li
184.011 532.201 li
184.351 532.674 li
184.69 533.146 li
185.04 533.614 li
185.39 534.081 li
185.75 534.547 li
186.122 535.01 li
186.493 535.469 li
186.868 535.927 li
187.207 536.254 li
187.6 536.708 li
187.992 537.162 li
188.396 537.61 li
188.799 538.063 li
189.208 538.506 li
189.621 538.952 li
190.042 539.399 li
190.416 539.712 li
190.846 540.15 li
191.276 540.591 li
191.712 541.031 li
192.148 541.471 li
192.589 541.905 li
193.029 542.344 li
193.475 542.779 li
193.876 543.081 li
194.323 543.515 li
194.775 543.95 li
195.231 544.382 li
195.682 544.813 li
196.14 545.245 li
196.597 545.676 li
197.054 546.107 li
197.511 546.54 li
82.0102 244.882 mo
82.4673 245.316 li
82.9258 245.748 li
83.3267 246.05 li
83.7827 246.48 li
84.2354 246.915 li
84.6821 247.35 li
85.1313 247.783 li
85.5786 248.218 li
86.0205 248.656 li
86.46 249.091 li
86.896 249.53 li
87.2817 249.839 li
87.7119 250.282 li
88.1416 250.721 li
88.5669 251.163 li
88.9854 251.609 li
89.4009 252.052 li
89.8091 252.501 li
90.2124 252.953 li
90.5654 253.271 li
90.957 253.724 li
91.3506 254.178 li
91.7388 254.635 li
92.1138 255.09 li
92.4854 255.555 li
92.8569 256.015 li
93.2178 256.478 li
93.5171 256.816 li
93.8682 257.284 li
94.2075 257.76 li
94.5459 258.228 li
94.8691 258.707 li
95.1934 259.184 li
95.5049 259.663 li
95.812 260.147 li
96.1089 260.635 li
96.3496 260.994 li
96.6343 261.48 li
96.9097 261.976 li
97.1743 262.475 li
97.4365 262.971 li
97.6865 263.474 li
97.9355 263.98 li
98.166 264.486 li
98.3481 264.865 li
98.5654 265.381 li
98.7817 265.895 li
98.9805 266.413 li
99.1812 266.936 li
99.3657 267.459 li
99.5488 267.984 li
99.7168 268.517 li
99.835 268.916 li
99.9863 269.454 li
100.138 269.99 li
100.274 270.531 li
100.41 271.075 li
100.536 271.617 li
100.649 272.167 li
100.758 272.72 li
100.813 273.144 li
100.906 273.697 li
100.993 274.259 li
101.07 274.821 li
101.146 275.379 li
101.208 275.949 li
101.27 276.52 li
101.318 277.087 li
101.369 277.661 li
101.358 278.105 li
101.386 278.684 li
101.415 279.263 li
101.439 279.842 li
101.453 280.428 li
101.459 281.014 li
101.466 281.599 li
101.464 282.191 li
101.41 282.65 li
101.402 283.242 li
101.386 283.833 li
101.367 284.429 li
101.342 285.027 li
101.313 285.625 li
101.283 286.224 li
101.249 286.826 li
101.163 287.297 li
101.121 287.899 li
101.081 288.501 li
101.034 289.107 li
100.982 289.711 li
100.937 290.317 li
100.885 290.925 li
100.829 291.533 li
100.727 292.008 li
100.669 292.615 li
100.613 293.225 li
100.556 293.833 li
100.5 294.441 li
100.442 295.049 li
100.385 295.658 li
100.329 296.266 li
100.271 296.875 li
100.171 297.351 li
100.113 297.958 li
100.062 298.564 li
100.015 299.17 li
99.9639 299.776 li
99.9175 300.38 li
99.8779 300.984 li
99.8369 301.587 li
99.7505 302.057 li
99.7153 302.658 li
99.6855 303.257 li
99.6548 303.857 li
99.6309 304.453 li
99.6108 305.049 li
99.5977 305.641 li
99.5894 306.233 li
99.5356 306.693 li
99.5313 307.283 li
99.54 307.869 li
99.5469 308.456 li
99.5601 309.039 li
99.582 309.62 li
99.6108 310.198 li
99.6416 310.778 li
99.6309 311.223 li
99.6792 311.794 li
99.7305 312.363 li
99.792 312.934 li
99.8516 313.502 li
99.9282 314.063 li
100.005 314.626 li
100.093 315.183 li
100.187 315.741 li
100.239 316.162 li
100.349 316.713 li
100.464 317.264 li
100.588 317.809 li
100.724 318.352 li
100.859 318.894 li
101.011 319.428 li
101.164 319.967 li
101.282 320.367 li
101.45 320.896 li
101.634 321.422 li
101.818 321.948 li
102.013 322.469 li
102.217 322.988 li
102.434 323.502 li
102.65 324.017 li
102.833 324.396 li
103.063 324.903 li
103.312 325.407 li
103.56 325.91 li
103.825 326.409 li
104.089 326.907 li
104.364 327.4 li
104.649 327.889 li
104.89 328.248 li
105.188 328.736 li
105.494 329.218 li
105.806 329.699 li
106.129 330.176 li
106.453 330.654 li
106.792 331.125 li
107.132 331.598 li
107.481 332.065 li
107.781 332.403 li
108.141 332.868 li
108.513 333.33 li
108.883 333.789 li
109.26 334.25 li
109.648 334.705 li
110.041 335.157 li
110.433 335.611 li
110.787 335.93 li
111.191 336.382 li
111.598 336.829 li
112.012 337.274 li
112.432 337.72 li
112.856 338.162 li
113.287 338.603 li
113.717 339.044 li
114.103 339.351 li
114.539 339.79 li
114.979 340.226 li
115.42 340.665 li
115.866 341.099 li
116.317 341.532 li
116.765 341.968 li
117.216 342.401 li
117.672 342.831 li
118.073 343.134 li
118.532 343.568 li
118.988 343.997 li
119.445 344.429 li
119.903 344.86 li
120.358 345.292 li
120.815 345.722 li
121.271 346.155 li
121.679 346.457 li
122.131 346.89 li
122.587 347.32 li
123.04 347.755 li
123.485 348.189 li
123.937 348.622 li
124.384 349.058 li
124.825 349.494 li
125.215 349.8 li
125.65 350.239 li
126.086 350.679 li
126.516 351.12 li
126.946 351.56 li
127.371 352.002 li
127.789 352.445 li
128.204 352.892 li
128.563 353.211 li
128.967 353.66 li
129.37 354.111 li
129.762 354.564 li
130.156 355.019 li
130.541 355.473 li
130.918 355.93 li
131.291 356.394 li
131.662 356.854 li
131.972 357.187 li
132.322 357.654 li
132.673 358.124 li
133.012 358.596 li
133.35 359.066 li
133.674 359.547 li
133.998 360.023 li
134.309 360.504 li
134.566 360.856 li
134.863 361.342 li
135.153 361.831 li
135.438 362.319 li
135.713 362.814 li
135.978 363.313 li
136.242 363.812 li
136.491 364.316 li
136.689 364.689 li
136.92 365.196 li
137.153 365.704 li
137.369 366.22 li
137.585 366.734 li
137.785 367.251 li
137.986 367.774 li
138.169 368.299 li
138.304 368.694 li
138.471 369.226 li
138.639 369.755 li
138.79 370.291 li
138.942 370.828 li
139.079 371.373 li
139.214 371.911 li
139.34 372.457 li
139.454 373.006 li
139.513 373.429 li
139.617 373.981 li
139.709 374.536 li
139.798 375.097 li
139.875 375.659 li
139.95 376.221 li
140.013 376.79 li
140.074 377.354 li
140.072 377.796 li
140.123 378.369 li
140.163 378.943 li
140.191 379.521 li
140.22 380.101 li
140.243 380.684 li
140.257 381.267 li
140.264 381.853 li
140.221 382.308 li
140.218 382.899 li
140.215 383.488 li
140.206 384.079 li
140.191 384.674 li
140.171 385.268 li
140.147 385.867 li
140.117 386.464 li
140.037 386.934 li
140.002 387.535 li
139.967 388.135 li
139.926 388.738 li
139.885 389.341 li
139.838 389.945 li
139.788 390.552 li
139.74 391.156 li
139.688 391.763 li
139.583 392.24 li
139.531 392.85 li
139.474 393.456 li
139.417 394.064 li
139.36 394.67 li
139.304 395.28 li
139.247 395.887 li
22.7197 94.5874 mo
22.6636 95.1973 li
22.6113 95.8027 li
22.5552 96.4111 li
22.5044 97.0176 li
22.4067 97.4922 li
22.3555 98.0977 li
22.3096 98.7036 li
22.269 99.3057 li
22.228 99.9087 li
22.1924 100.508 li
22.1563 101.109 li
22.127 101.708 li
22.0464 102.177 li
22.0225 102.776 li
22.0024 103.371 li
21.9888 103.962 li
21.98 104.555 li
21.9771 105.146 li
21.9727 105.734 li
21.9814 106.321 li
21.9385 106.777 li
21.9497 107.362 li
21.9731 107.942 li
22.0024 108.521 li
22.0313 109.101 li
22.0708 109.675 li
22.1211 110.247 li
22.1724 110.816 li
22.2324 111.385 li
22.2432 111.823 li
22.3198 112.386 li
22.3975 112.948 li
22.4844 113.506 li
22.5771 114.063 li
22.6816 114.615 li
22.7905 115.167 li
22.9048 115.715 li
22.9795 116.131 li
23.1157 116.673 li
23.251 117.215 li
23.4019 117.752 li
23.5547 118.288 li
23.7231 118.818 li
23.8916 119.351 li
24.0752 119.875 li
24.2095 120.271 li
24.4048 120.792 li
24.6089 121.309 li
24.8257 121.824 li
25.041 122.338 li
25.2744 122.848 li
25.5049 123.356 li
25.7529 123.858 li
26.0005 124.363 li
26.2158 124.73 li
26.479 125.228 li
26.7539 125.722 li
27.0415 126.212 li
27.332 126.699 li
27.6284 127.187 li
27.936 127.67 li
28.248 128.151 li
28.521 128.498 li
28.8433 128.975 li
29.1831 129.447 li
29.5225 129.919 li
29.8721 130.389 li
30.2222 130.855 li
30.583 131.32 li
30.9541 131.781 li
31.2749 132.111 li
31.6519 132.571 li
32.0386 133.027 li
32.4326 133.479 li
32.8237 133.933 li
33.2271 134.384 li
33.6318 134.833 li
34.0396 135.282 li
34.4038 135.598 li
34.8237 136.041 li
35.2476 136.484 li
35.6787 136.924 li
36.1089 137.364 li
36.5435 137.803 li
36.98 138.242 li
37.4209 138.678 li
37.8613 139.115 li
38.2573 139.42 li
38.708 139.854 li
39.1558 140.289 li
39.6064 140.722 li
40.0635 141.153 li
40.5146 141.587 li
40.9712 142.017 li
41.4287 142.45 li
41.8359 142.752 li
42.2925 143.182 li
42.749 143.614 li
43.2061 144.046 li
43.6621 144.476 li
44.1201 144.908 li
44.5723 145.342 li
45.0283 145.772 li
45.4302 146.076 li
45.8755 146.51 li
46.3281 146.944 li
46.7744 147.377 li
47.2148 147.815 li
47.6558 148.253 li
48.0923 148.69 li
48.5269 149.129 li
48.9067 149.44 li
49.3374 149.881 li
49.7622 150.323 li
50.1802 150.767 li
50.5962 151.214 li
51.0049 151.661 li
51.4072 152.111 li
51.811 152.563 li
52.2041 153.016 li
52.5464 153.339 li
52.9331 153.794 li
53.3101 154.254 li
53.6812 154.714 li
54.0527 155.174 li
54.4136 155.64 li
54.7632 156.107 li
55.1133 156.574 li
55.4019 156.917 li
55.7412 157.389 li
56.0649 157.867 li
56.3882 158.343 li
56.7007 158.825 li
57.0073 159.309 li
57.3032 159.794 li
57.5947 160.284 li
57.8301 160.644 li
58.1045 161.138 li
58.3687 161.635 li
58.6333 162.133 li
58.8818 162.637 li
59.1294 163.139 li
59.3623 163.648 li
59.5942 164.157 li
59.7603 164.541 li
59.9751 165.056 li
60.1768 165.576 li
60.377 166.095 li
60.5601 166.62 li
60.7441 167.146 li
60.9116 167.676 li
61.0801 168.207 li
61.2319 168.745 li
61.3345 169.151 li
61.4697 169.693 li
61.6055 170.234 li
61.731 170.78 li
61.8442 171.33 li
61.9546 171.879 li
62.0581 172.433 li
62.1514 172.989 li
62.1885 173.417 li
62.2651 173.979 li
62.3413 174.542 li
62.4028 175.11 li
62.4644 175.677 li
62.5146 176.249 li
62.5635 176.82 li
62.603 177.395 li
62.582 177.844 li
62.6108 178.423 li
62.6343 179.004 li
62.6475 179.587 li
62.6548 180.174 li
62.6616 180.76 li
62.6587 181.349 li
62.6563 181.941 li
62.5977 182.402 li
62.583 182.996 li
62.563 183.59 li
62.5386 184.188 li
62.5083 184.787 li
62.478 185.385 li
62.4443 185.986 li
62.4077 186.586 li
62.3667 187.188 li
62.2764 187.661 li
62.23 188.267 li
62.1772 188.873 li
62.1318 189.477 li
62.0801 190.084 li
62.0239 190.693 li
61.9727 191.299 li
61.9155 191.908 li
61.8091 192.386 li
61.752 192.995 li
61.6948 193.601 li
61.6382 194.21 li
61.5815 194.817 li
61.5239 195.427 li
61.4668 196.036 li
61.416 196.642 li
61.3081 197.12 li
61.2573 197.725 li
61.2104 198.332 li
61.1592 198.937 li
61.1133 199.54 li
61.0742 200.145 li
61.0322 200.746 li
60.9956 201.348 li
60.9619 201.949 li
60.8818 202.418 li
60.8501 203.016 li
60.8267 203.614 li
60.8062 204.21 li
60.7925 204.802 li
60.7852 205.394 li
60.7813 205.983 li
60.7773 206.575 li
60.7349 207.029 li
60.7417 207.615 li
60.7544 208.201 li
60.7778 208.78 li
60.8062 209.359 li
60.8359 209.938 li
60.8755 210.512 li
60.9243 211.085 li
60.9268 211.525 li
60.9873 212.094 li
61.0469 212.662 li
61.1245 213.223 li
61.2012 213.785 li
61.2896 214.343 li
61.3823 214.9 li
61.4858 215.454 li
61.5449 215.875 li
61.6592 216.425 li
61.7837 216.969 li
61.9189 217.512 li
62.0552 218.054 li
62.2065 218.59 li
62.3589 219.127 li
62.5278 219.656 li
62.6953 220.188 li
62.8296 220.582 li
63.0137 221.109 li
63.2085 221.63 li
63.4131 222.148 li
63.6304 222.663 li
63.8452 223.177 li
64.0771 223.686 li
64.3096 224.195 li
64.5078 224.568 li
64.7554 225.071 li
65.019 225.569 li
65.2837 226.066 li
65.5596 226.56 li
65.8438 227.048 li
66.1367 227.539 li
66.4331 228.026 li
66.6904 228.378 li
67.0015 228.86 li
67.3257 229.338 li
67.6479 229.813 li
67.9873 230.285 li
68.3276 230.758 li
68.6763 231.227 li
69.0264 231.693 li
69.3369 232.029 li
69.708 232.49 li
70.0781 232.951 li
70.4551 233.409 li
70.8438 233.866 li
71.2363 234.318 li
71.6284 234.772 li
72.0322 235.222 li
72.4355 235.672 li
72.793 235.991 li
73.208 236.435 li
73.6279 236.88 li
74.0518 237.323 li
74.4819 237.762 li
74.9131 238.204 li
75.3486 238.641 li
75.7837 239.081 li
76.1748 239.387 li
76.6152 239.824 li
77.0615 240.26 li
77.5117 240.692 li
77.96 241.129 li
78.4106 241.562 li
78.8682 241.992 li
79.3188 242.427 li
79.7261 242.729 li
80.1831 243.159 li
80.6396 243.589 li
81.0981 244.022 li
81.5542 244.452 li
82.0102 244.882 li
16.6484 56.209 mo
16.9878 56.6816 li
17.2607 57.0288 li
17.5835 57.5049 li
17.896 57.9873 li
18.2036 58.4697 li
18.4995 58.9565 li
18.79 59.4458 li
19.0762 59.9351 li
19.3506 60.4287 li
19.5649 60.7969 li
19.8286 61.2949 li
20.0776 61.7983 li
20.3252 62.3022 li
20.5576 62.8105 li
20.7896 63.3198 li
21.0059 63.833 li
21.2227 64.3467 li
21.3721 64.7363 li
21.5723 65.2573 li
21.7563 65.7827 li
21.9409 66.3081 li
22.1074 66.8384 li
22.2759 67.3691 li
22.4272 67.9053 li
22.5801 68.4429 li
22.6655 68.854 li
22.8013 69.3965 li
22.9268 69.9414 li
23.041 70.4917 li
23.1504 71.0415 li
23.2544 71.5947 li
23.3467 72.1514 li
23.4346 72.7104 li
23.5112 73.2715 li
23.5371 73.7046 li
23.5981 74.272 li
23.6597 74.8398 li
23.7104 75.4121 li
23.7603 75.9829 li
23.7983 76.5576 li
23.8281 77.1362 li
23.8569 77.7148 li
23.8296 78.166 li
23.8433 78.75 li
23.8506 79.3364 li
23.8584 79.9229 li
23.855 80.5132 li
23.8521 81.1016 li
23.8433 81.6924 li
23.8281 82.2881 li
23.7593 82.7524 li
23.7344 83.3496 li
23.7041 83.9482 li
23.6733 84.5474 li
23.6396 85.1489 li
23.6025 85.749 li
23.5635 86.3521 li
23.5225 86.9546 li
23.4253 87.4297 li
23.374 88.0356 li
23.3291 88.6406 li
23.2759 89.2466 li
23.2197 89.8545 li
23.1689 90.4619 li
23.1118 91.0698 li
23.0547 91.6787 li
22.9976 92.2861 li
22.8911 92.7646 li
22.8345 93.373 li
22.7773 93.981 li
22.7202 94.5898 li
0 0 0 .911986 cmyk
@
set_def_flat
4.04309 lw
194.264 531.953 mo
199.825 548.784 li
199.736 548.987 li
181.385 540.862 li
@
5.7858 lw
0 lj
4 ml
462.782 105.854 mo
913.305 105.854 li
0 0 0 1 cmyk
@
154.479 164.34 mo
605.003 164.34 li
@
2.66667 setflat
2.6955 lw
1 lj
10 ml
452.688 395.887 mo
452.631 396.497 li
452.523 396.977 li
452.466 397.582 li
452.415 398.189 li
452.358 398.8 li
452.307 399.404 li
452.26 400.008 li
452.209 400.615 li
452.162 401.219 li
452.073 401.691 li
452.031 402.294 li
451.996 402.896 li
451.96 403.497 li
451.93 404.094 li
451.901 404.696 li
451.876 405.293 li
451.855 405.887 li
451.842 406.48 li
451.784 406.942 li
451.78 407.532 li
451.776 408.12 li
451.785 408.708 li
451.792 409.294 li
451.804 409.878 li
451.827 410.459 li
451.856 411.037 li
451.835 411.485 li
451.875 412.062 li
451.924 412.633 li
451.977 413.205 li
452.036 413.772 li
452.097 414.341 li
452.174 414.903 li
452.25 415.464 li
452.289 415.893 li
452.382 416.449 li
452.486 417.001 li
452.594 417.552 li
452.708 418.102 li
452.833 418.648 li
452.968 419.189 li
453.105 419.732 li
453.207 420.138 li
453.358 420.673 li
453.527 421.204 li
453.695 421.736 li
453.879 422.26 li
454.062 422.786 li
454.258 423.309 li
454.463 423.827 li
454.679 424.34 li
454.846 424.724 li
455.078 425.233 li
455.308 425.742 li
455.557 426.246 li
455.804 426.75 li
456.069 427.248 li
456.334 427.743 li
456.609 428.237 li
456.845 428.598 li
457.136 429.086 li
457.432 429.573 li
457.739 430.057 li
458.051 430.538 li
458.374 431.014 li
458.698 431.493 li
459.037 431.964 li
459.326 432.307 li
459.674 432.774 li
460.026 433.242 li
460.387 433.707 li
460.758 434.168 li
461.128 434.629 li
461.505 435.089 li
461.893 435.544 li
462.235 435.868 li
462.627 436.322 li
463.032 436.771 li
463.434 437.219 li
463.843 437.668 li
464.257 438.113 li
464.677 438.558 li
465.102 439.003 li
465.533 439.44 li
465.913 439.752 li
466.348 440.189 li
466.784 440.629 li
467.225 441.065 li
467.665 441.503 li
468.11 441.938 li
468.562 442.371 li
469.009 442.805 li
469.411 443.108 li
469.868 443.543 li
470.319 443.974 li
470.776 444.404 li
471.233 444.838 li
471.69 445.268 li
472.147 445.699 li
472.604 446.131 li
473.01 446.433 li
473.466 446.864 li
473.923 447.294 li
474.376 447.729 li
474.833 448.16 li
475.284 448.592 li
475.731 449.027 li
476.181 449.461 li
476.579 449.768 li
477.02 450.201 li
477.459 450.641 li
477.896 451.079 li
478.331 451.518 li
478.76 451.958 li
479.191 452.399 li
479.616 452.841 li
480.034 453.285 li
480.399 453.6 li
480.808 454.05 li
481.21 454.498 li
481.615 454.947 li
482.008 455.404 li
482.4 455.855 li
482.786 456.31 li
483.164 456.769 li
483.484 457.102 li
483.856 457.561 li
484.216 458.025 li
484.566 458.493 li
484.918 458.963 li
485.256 459.435 li
485.595 459.908 li
485.917 460.383 li
486.192 460.73 li
486.504 461.211 li
486.811 461.696 li
487.107 462.181 li
487.397 462.671 li
487.684 463.16 li
487.959 463.655 li
488.223 464.151 li
488.437 464.519 li
488.685 465.022 li
488.933 465.524 li
489.166 466.034 li
489.399 466.545 li
489.614 467.058 li
489.829 467.571 li
490.031 468.092 li
490.231 468.612 li
490.364 469.008 li
490.548 469.532 li
490.716 470.064 li
490.883 470.593 li
491.036 471.13 li
491.188 471.667 li
491.323 472.207 li
491.459 472.75 li
491.534 473.167 li
491.648 473.715 li
491.758 474.268 li
491.861 474.818 li
491.955 475.376 li
492.042 475.933 li
492.119 476.499 li
492.195 477.059 li
492.207 477.498 li
492.268 478.064 li
492.318 478.636 li
492.369 479.208 li
492.407 479.782 li
492.436 480.361 li
492.465 480.939 li
492.488 481.521 li
492.502 482.106 li
492.458 482.562 li
492.466 483.146 li
492.463 483.738 li
492.459 484.327 li
492.451 484.919 li
492.436 485.513 li
492.417 486.106 li
492.392 486.705 li
492.313 487.174 li
492.282 487.773 li
492.248 488.374 li
492.212 488.974 li
492.171 489.577 li
492.13 490.181 li
492.083 490.784 li
492.033 491.391 li
491.936 491.865 li
491.884 492.474 li
491.828 493.079 li
491.775 493.687 li
491.718 494.295 li
491.662 494.902 li
491.605 495.512 li
491.549 496.119 li
491.442 496.598 li
491.385 497.207 li
491.328 497.813 li
491.271 498.423 li
491.22 499.028 li
491.163 499.636 li
491.112 500.244 li
491.064 500.847 li
491.013 501.453 li
490.917 501.929 li
490.878 502.531 li
490.836 503.135 li
490.802 503.736 li
490.766 504.336 li
490.735 504.935 li
490.704 505.536 li
490.68 506.132 li
490.61 506.597 li
490.597 507.19 li
490.589 507.781 li
490.584 508.371 li
490.582 508.96 li
490.589 509.547 li
490.597 510.132 li
490.608 510.718 li
490.582 511.168 li
490.612 511.748 li
490.641 512.325 li
490.68 512.9 li
490.729 513.474 li
490.78 514.044 li
490.841 514.612 li
490.901 515.18 li
490.929 515.612 li
491.005 516.175 li
491.094 516.731 li
491.187 517.289 li
491.29 517.843 li
491.398 518.392 li
491.513 518.941 li
491.638 519.487 li
491.773 520.028 li
491.859 520.441 li
492.011 520.979 li
492.163 521.514 li
492.333 522.045 li
492.501 522.576 li
492.684 523.103 li
492.868 523.625 li
493.062 524.148 li
493.218 524.537 li
493.434 525.049 li
493.65 525.563 li
493.882 526.073 li
494.113 526.583 li
494.361 527.085 li
494.61 527.589 li
494.874 528.086 li
495.088 528.454 li
495.363 528.947 li
495.649 529.438 li
495.94 529.925 li
496.236 530.412 li
496.545 530.897 li
496.856 531.38 li
497.178 531.854 li
497.452 532.201 li
497.792 532.674 li
498.131 533.146 li
498.48 533.614 li
498.83 534.081 li
499.191 534.547 li
499.562 535.01 li
499.933 535.469 li
500.309 535.927 li
500.647 536.254 li
501.041 536.708 li
501.433 537.162 li
501.836 537.61 li
502.239 538.063 li
502.647 538.506 li
503.062 538.952 li
503.482 539.399 li
503.856 539.712 li
504.287 540.15 li
504.717 540.591 li
505.151 541.031 li
505.588 541.471 li
506.03 541.905 li
506.469 542.344 li
506.916 542.779 li
507.316 543.081 li
507.764 543.515 li
508.216 543.95 li
508.672 544.382 li
509.122 544.813 li
509.58 545.245 li
510.037 545.676 li
510.495 546.107 li
510.952 546.54 li
395.451 244.882 mo
395.907 245.316 li
396.366 245.748 li
396.768 246.05 li
397.223 246.48 li
397.676 246.915 li
398.123 247.35 li
398.572 247.783 li
399.019 248.218 li
399.461 248.656 li
399.9 249.091 li
400.337 249.53 li
400.722 249.839 li
401.152 250.282 li
401.583 250.721 li
402.007 251.163 li
402.426 251.609 li
402.841 252.052 li
403.25 252.501 li
403.653 252.953 li
404.006 253.271 li
404.398 253.724 li
404.792 254.178 li
405.179 254.635 li
405.555 255.09 li
405.926 255.555 li
406.298 256.015 li
406.658 256.478 li
406.958 256.816 li
407.309 257.284 li
407.648 257.76 li
407.986 258.228 li
408.31 258.707 li
408.634 259.184 li
408.945 259.663 li
409.253 260.147 li
409.549 260.635 li
409.79 260.994 li
410.075 261.48 li
410.35 261.976 li
410.614 262.475 li
410.877 262.971 li
411.127 263.474 li
411.376 263.98 li
411.607 264.486 li
411.789 264.865 li
412.006 265.381 li
412.222 265.895 li
412.421 266.413 li
412.622 266.936 li
412.806 267.459 li
412.989 267.984 li
413.158 268.517 li
413.275 268.916 li
413.426 269.454 li
413.579 269.99 li
413.715 270.531 li
413.851 271.075 li
413.976 271.617 li
414.089 272.167 li
414.199 272.72 li
414.254 273.144 li
414.346 273.697 li
414.434 274.259 li
414.511 274.821 li
414.586 275.379 li
414.648 275.949 li
414.71 276.52 li
414.759 277.087 li
414.81 277.661 li
414.799 278.105 li
414.827 278.684 li
414.855 279.263 li
414.879 279.842 li
414.893 280.428 li
414.9 281.014 li
414.907 281.599 li
414.904 282.191 li
414.851 282.65 li
414.842 283.242 li
414.827 283.833 li
414.808 284.429 li
414.783 285.027 li
414.753 285.625 li
414.723 286.224 li
414.689 286.826 li
414.604 287.297 li
414.562 287.899 li
414.522 288.501 li
414.475 289.107 li
414.423 289.711 li
414.377 290.317 li
414.325 290.925 li
414.269 291.533 li
414.167 292.008 li
414.11 292.615 li
414.054 293.225 li
413.997 293.833 li
413.94 294.441 li
413.883 295.049 li
413.826 295.658 li
413.769 296.266 li
413.712 296.875 li
413.612 297.351 li
413.554 297.958 li
413.502 298.564 li
413.455 299.17 li
413.404 299.776 li
413.358 300.38 li
413.318 300.984 li
413.277 301.587 li
413.191 302.057 li
413.155 302.658 li
413.126 303.257 li
413.095 303.857 li
413.071 304.453 li
413.051 305.049 li
413.038 305.641 li
413.029 306.233 li
412.976 306.693 li
412.972 307.283 li
412.981 307.869 li
412.987 308.456 li
413 309.039 li
413.022 309.62 li
413.051 310.198 li
413.082 310.778 li
413.071 311.223 li
413.12 311.794 li
413.171 312.363 li
413.233 312.934 li
413.292 313.502 li
413.369 314.063 li
413.446 314.626 li
413.534 315.183 li
413.627 315.741 li
413.68 316.162 li
413.79 316.713 li
413.904 317.264 li
414.028 317.809 li
414.165 318.352 li
414.3 318.894 li
414.451 319.428 li
414.604 319.967 li
414.722 320.367 li
414.89 320.896 li
415.075 321.422 li
415.259 321.948 li
415.454 322.469 li
415.658 322.988 li
415.875 323.502 li
416.09 324.017 li
416.273 324.396 li
416.504 324.903 li
416.752 325.407 li
417 325.91 li
417.265 326.409 li
417.53 326.907 li
417.804 327.4 li
418.09 327.889 li
418.331 328.248 li
418.628 328.736 li
418.935 329.218 li
419.247 329.699 li
419.57 330.176 li
419.893 330.654 li
420.232 331.125 li
420.572 331.598 li
420.921 332.065 li
421.221 332.403 li
421.582 332.868 li
421.954 333.33 li
422.324 333.789 li
422.7 334.25 li
423.088 334.705 li
423.482 335.157 li
423.873 335.611 li
424.227 335.93 li
424.632 336.382 li
425.039 336.829 li
425.453 337.274 li
425.873 337.72 li
426.296 338.162 li
426.728 338.603 li
427.158 339.044 li
427.543 339.351 li
427.979 339.79 li
428.42 340.226 li
428.861 340.665 li
429.307 341.099 li
429.758 341.532 li
430.206 341.968 li
430.656 342.401 li
431.113 342.831 li
431.514 343.134 li
431.972 343.568 li
432.429 343.997 li
432.885 344.429 li
433.343 344.86 li
433.799 345.292 li
434.255 345.722 li
434.712 346.155 li
435.119 346.457 li
435.571 346.89 li
436.028 347.32 li
436.48 347.755 li
436.925 348.189 li
437.377 348.622 li
437.824 349.058 li
438.265 349.494 li
438.655 349.8 li
439.091 350.239 li
439.526 350.679 li
439.957 351.12 li
440.386 351.56 li
440.812 352.002 li
441.229 352.445 li
441.644 352.892 li
442.003 353.211 li
442.407 353.66 li
442.811 354.111 li
443.203 354.564 li
443.596 355.019 li
443.982 355.473 li
444.359 355.93 li
444.731 356.394 li
445.102 356.854 li
445.413 357.187 li
445.762 357.654 li
446.113 358.124 li
446.452 358.596 li
446.79 359.066 li
447.115 359.547 li
447.438 360.023 li
447.75 360.504 li
448.007 360.856 li
448.304 361.342 li
448.594 361.831 li
448.879 362.319 li
449.154 362.814 li
449.418 363.313 li
449.682 363.812 li
449.932 364.316 li
450.13 364.689 li
450.361 365.196 li
450.593 365.704 li
450.81 366.22 li
451.025 366.734 li
451.225 367.251 li
451.427 367.774 li
451.61 368.299 li
451.744 368.694 li
451.912 369.226 li
452.08 369.755 li
452.231 370.291 li
452.383 370.828 li
452.52 371.373 li
452.654 371.911 li
452.78 372.457 li
452.895 373.006 li
452.954 373.429 li
453.057 373.981 li
453.15 374.536 li
453.239 375.097 li
453.314 375.659 li
453.39 376.221 li
453.453 376.79 li
453.514 377.354 li
453.513 377.796 li
453.563 378.369 li
453.603 378.943 li
453.631 379.521 li
453.66 380.101 li
453.684 380.684 li
453.697 381.267 li
453.704 381.853 li
453.661 382.308 li
453.659 382.899 li
453.656 383.488 li
453.646 384.079 li
453.632 384.674 li
453.612 385.268 li
453.588 385.867 li
453.558 386.464 li
453.477 386.934 li
453.443 387.535 li
453.407 388.135 li
453.367 388.738 li
453.326 389.341 li
453.279 389.945 li
453.229 390.552 li
453.181 391.156 li
453.129 391.763 li
453.023 392.24 li
452.972 392.85 li
452.915 393.456 li
452.858 394.064 li
452.801 394.67 li
452.745 395.28 li
452.688 395.887 li
375.521 190.084 mo
375.465 190.693 li
375.413 191.299 li
375.356 191.908 li
375.249 192.386 li
375.192 192.995 li
375.135 193.601 li
375.079 194.21 li
375.021 194.817 li
374.964 195.427 li
374.907 196.036 li
374.856 196.642 li
374.749 197.12 li
374.698 197.725 li
374.651 198.332 li
374.6 198.937 li
374.554 199.54 li
374.515 200.145 li
374.473 200.746 li
374.437 201.348 li
374.403 201.949 li
374.322 202.418 li
374.291 203.016 li
374.267 203.614 li
374.247 204.21 li
374.233 204.802 li
374.226 205.394 li
374.222 205.983 li
374.218 206.575 li
374.176 207.029 li
374.183 207.615 li
374.195 208.201 li
374.218 208.78 li
374.247 209.359 li
374.276 209.938 li
374.316 210.512 li
374.365 211.085 li
374.367 211.525 li
374.428 212.094 li
374.487 212.662 li
374.565 213.223 li
374.642 213.785 li
374.73 214.343 li
374.823 214.9 li
374.926 215.454 li
374.985 215.875 li
375.1 216.425 li
375.225 216.969 li
375.36 217.512 li
375.496 218.054 li
375.647 218.59 li
375.799 219.127 li
375.968 219.656 li
376.135 220.188 li
376.27 220.582 li
376.454 221.109 li
376.649 221.63 li
376.854 222.148 li
377.071 222.663 li
377.286 223.177 li
377.518 223.686 li
377.75 224.195 li
377.949 224.568 li
378.196 225.071 li
378.459 225.569 li
378.724 226.066 li
379 226.56 li
379.284 227.048 li
379.578 227.539 li
379.874 228.026 li
380.13 228.378 li
380.442 228.86 li
380.766 229.338 li
381.088 229.813 li
381.428 230.285 li
381.769 230.758 li
382.117 231.227 li
382.467 231.693 li
382.777 232.029 li
383.149 232.49 li
383.519 232.951 li
383.896 233.409 li
384.284 233.866 li
384.677 234.318 li
385.068 234.772 li
385.473 235.222 li
385.876 235.672 li
386.234 235.991 li
386.648 236.435 li
387.068 236.88 li
387.493 237.323 li
387.923 237.762 li
388.354 238.204 li
388.789 238.641 li
389.224 239.081 li
389.616 239.387 li
390.056 239.824 li
390.502 240.26 li
390.953 240.692 li
391.401 241.129 li
391.852 241.562 li
392.308 241.992 li
392.759 242.427 li
393.167 242.729 li
393.623 243.159 li
394.081 243.589 li
394.539 244.022 li
394.994 244.452 li
395.451 244.882 li
0 0 0 .911986 cmyk
@
set_def_flat
4.04309 lw
507.704 531.953 mo
513.266 548.784 li
513.176 548.987 li
494.826 540.862 li
@
2.66667 setflat
2.6955 lw
699.723 546.54 mo
700.181 546.107 li
700.638 545.676 li
701.095 545.245 li
701.553 544.813 li
702.003 544.382 li
702.46 543.95 li
702.911 543.515 li
703.358 543.081 li
703.759 542.779 li
704.206 542.344 li
704.646 541.905 li
705.087 541.471 li
705.523 541.031 li
705.958 540.591 li
706.389 540.15 li
706.818 539.712 li
707.192 539.399 li
707.613 538.952 li
708.027 538.506 li
708.436 538.063 li
708.839 537.61 li
709.242 537.162 li
709.634 536.708 li
710.028 536.254 li
710.366 535.927 li
710.741 535.469 li
711.113 535.01 li
711.484 534.547 li
711.845 534.081 li
712.194 533.614 li
712.544 533.146 li
712.884 532.674 li
713.224 532.201 li
713.496 531.854 li
713.819 531.38 li
714.131 530.897 li
714.438 530.412 li
714.735 529.925 li
715.026 529.438 li
715.313 528.947 li
715.586 528.454 li
715.802 528.086 li
716.066 527.589 li
716.313 527.085 li
716.562 526.583 li
716.792 526.073 li
717.024 525.563 li
717.241 525.049 li
717.457 524.537 li
717.613 524.148 li
717.807 523.625 li
717.992 523.103 li
718.175 522.576 li
718.343 522.045 li
718.512 521.514 li
718.664 520.979 li
718.815 520.441 li
718.901 520.028 li
719.037 519.487 li
719.162 518.941 li
719.277 518.392 li
719.385 517.843 li
719.488 517.289 li
719.581 516.731 li
719.67 516.175 li
719.746 515.612 li
719.773 515.18 li
719.834 514.612 li
719.895 514.044 li
719.944 513.474 li
719.995 512.9 li
720.035 512.325 li
720.063 511.748 li
720.095 511.168 li
720.068 510.718 li
720.078 510.132 li
720.085 509.547 li
720.095 508.96 li
720.09 508.371 li
720.086 507.781 li
720.078 507.19 li
720.064 506.597 li
719.995 506.132 li
719.97 505.536 li
719.94 504.935 li
719.909 504.336 li
719.874 503.736 li
719.838 503.135 li
719.797 502.531 li
719.758 501.929 li
719.661 501.453 li
719.61 500.847 li
719.563 500.244 li
719.514 499.636 li
719.455 499.028 li
719.404 498.423 li
719.347 497.813 li
719.29 497.207 li
719.233 496.598 li
719.127 496.119 li
719.068 495.512 li
719.014 494.902 li
718.956 494.295 li
718.898 493.687 li
718.849 493.079 li
718.79 492.474 li
718.74 491.865 li
718.643 491.391 li
718.592 490.784 li
718.545 490.181 li
718.503 489.577 li
718.463 488.974 li
718.427 488.374 li
718.394 487.773 li
718.362 487.174 li
718.284 486.705 li
718.259 486.106 li
718.238 485.513 li
718.224 484.919 li
718.217 484.327 li
718.212 483.738 li
718.209 483.146 li
718.217 482.562 li
718.173 482.106 li
718.187 481.521 li
718.211 480.939 li
718.238 480.361 li
718.27 479.782 li
718.307 479.208 li
718.356 478.636 li
718.407 478.064 li
718.47 477.498 li
718.479 477.059 li
718.557 476.499 li
718.633 475.933 li
718.721 475.376 li
718.813 474.818 li
718.917 474.268 li
719.026 473.715 li
719.141 473.167 li
719.217 472.75 li
719.353 472.207 li
719.488 471.667 li
719.641 471.13 li
719.792 470.593 li
719.96 470.064 li
720.126 469.532 li
720.311 469.008 li
720.444 468.612 li
720.646 468.092 li
720.846 467.571 li
721.062 467.058 li
721.277 466.545 li
721.51 466.034 li
721.741 465.524 li
721.99 465.022 li
722.237 464.519 li
722.453 464.151 li
722.717 463.655 li
722.99 463.16 li
723.278 462.671 li
723.567 462.181 li
723.863 461.696 li
724.171 461.211 li
724.483 460.73 li
724.757 460.383 li
725.08 459.908 li
725.419 459.435 li
725.758 458.963 li
726.108 458.493 li
726.458 458.025 li
726.819 457.561 li
727.19 457.102 li
727.512 456.769 li
727.888 456.31 li
728.274 455.855 li
728.668 455.404 li
729.06 454.947 li
729.463 454.498 li
729.867 454.05 li
730.275 453.6 li
730.641 453.285 li
731.059 452.841 li
731.483 452.399 li
731.915 451.958 li
732.344 451.518 li
732.779 451.079 li
733.215 450.641 li
733.656 450.201 li
734.097 449.768 li
734.494 449.461 li
734.943 449.027 li
735.393 448.592 li
735.842 448.16 li
736.299 447.729 li
736.753 447.294 li
737.209 446.864 li
737.664 446.433 li
738.072 446.131 li
738.527 445.699 li
738.985 445.268 li
739.442 444.838 li
739.898 444.404 li
740.354 443.974 li
740.807 443.543 li
741.266 443.108 li
741.666 442.805 li
742.114 442.371 li
742.564 441.938 li
743.01 441.503 li
743.451 441.065 li
743.891 440.629 li
744.327 440.189 li
744.764 439.752 li
745.143 439.44 li
745.574 439.003 li
745.998 438.558 li
746.418 438.113 li
746.832 437.668 li
747.239 437.219 li
747.645 436.771 li
748.048 436.322 li
748.439 435.868 li
748.782 435.544 li
749.171 435.089 li
749.547 434.629 li
749.917 434.168 li
750.288 433.707 li
750.65 433.242 li
751 432.774 li
751.35 432.307 li
751.638 431.964 li
751.977 431.493 li
752.301 431.014 li
752.624 430.538 li
752.935 430.057 li
753.244 429.573 li
753.54 429.086 li
753.83 428.598 li
754.065 428.237 li
754.341 427.743 li
754.606 427.248 li
754.871 426.75 li
755.118 426.246 li
755.366 425.742 li
755.598 425.233 li
755.829 424.724 li
755.996 424.34 li
756.212 423.827 li
756.418 423.309 li
756.613 422.786 li
756.797 422.26 li
756.98 421.736 li
757.147 421.204 li
757.315 420.673 li
757.469 420.138 li
757.568 419.732 li
757.707 419.189 li
757.842 418.648 li
757.967 418.102 li
758.081 417.552 li
758.189 417.001 li
758.292 416.449 li
758.386 415.893 li
758.426 415.464 li
758.502 414.903 li
758.578 414.341 li
758.638 413.772 li
758.698 413.205 li
758.751 412.633 li
758.8 412.062 li
758.84 411.485 li
758.819 411.037 li
758.849 410.459 li
758.871 409.878 li
758.884 409.294 li
758.89 408.708 li
758.898 408.12 li
758.896 407.532 li
758.892 406.942 li
758.834 406.48 li
758.819 405.887 li
758.799 405.293 li
758.773 404.696 li
758.745 404.094 li
758.716 403.497 li
758.679 402.896 li
758.644 402.294 li
758.603 401.691 li
758.512 401.219 li
758.465 400.615 li
758.415 400.008 li
758.368 399.404 li
758.317 398.8 li
758.259 398.189 li
758.209 397.582 li
758.151 396.977 li
758.043 396.497 li
757.988 395.887 li
757.988 395.887 mo
757.931 395.28 li
757.874 394.67 li
757.817 394.064 li
757.761 393.456 li
757.703 392.85 li
757.652 392.24 li
757.547 391.763 li
757.493 391.156 li
757.446 390.552 li
757.396 389.945 li
757.349 389.341 li
757.309 388.738 li
757.268 388.135 li
757.233 387.535 li
757.198 386.934 li
757.118 386.464 li
757.087 385.867 li
757.063 385.268 li
757.043 384.674 li
757.029 384.079 li
757.02 383.488 li
757.016 382.899 li
757.015 382.308 li
756.971 381.853 li
756.977 381.267 li
756.992 380.684 li
757.015 380.101 li
757.044 379.521 li
757.072 378.943 li
757.111 378.369 li
757.163 377.796 li
757.16 377.354 li
757.222 376.79 li
757.284 376.221 li
757.361 375.659 li
757.437 375.097 li
757.524 374.536 li
757.616 373.981 li
757.722 373.429 li
757.779 373.006 li
757.896 372.457 li
758.021 371.911 li
758.156 371.373 li
758.292 370.828 li
758.444 370.291 li
758.596 369.755 li
758.763 369.226 li
758.932 368.694 li
759.064 368.299 li
759.248 367.774 li
759.45 367.251 li
759.649 366.734 li
759.865 366.22 li
760.082 365.704 li
760.314 365.196 li
760.545 364.689 li
760.743 364.316 li
760.993 363.812 li
761.258 363.313 li
761.521 362.814 li
761.795 362.319 li
762.081 361.831 li
762.371 361.342 li
762.668 360.856 li
762.926 360.504 li
763.237 360.023 li
763.561 359.547 li
763.884 359.066 li
764.223 358.596 li
764.562 358.124 li
764.913 357.654 li
765.262 357.187 li
765.573 356.854 li
765.944 356.394 li
766.315 355.93 li
766.693 355.473 li
767.078 355.019 li
767.473 354.564 li
767.865 354.111 li
768.268 353.66 li
768.672 353.211 li
769.029 352.892 li
769.445 352.445 li
769.863 352.002 li
770.288 351.56 li
770.719 351.12 li
771.148 350.679 li
771.584 350.239 li
772.02 349.8 li
772.41 349.494 li
772.852 349.058 li
773.298 348.622 li
773.75 348.189 li
774.195 347.755 li
774.647 347.32 li
775.104 346.89 li
775.556 346.457 li
775.962 346.155 li
776.419 345.722 li
776.876 345.292 li
777.332 344.86 li
777.789 344.429 li
778.246 343.997 li
778.702 343.568 li
779.162 343.134 li
779.563 342.831 li
780.02 342.401 li
780.47 341.968 li
780.917 341.532 li
781.369 341.099 li
781.813 340.665 li
782.256 340.226 li
782.697 339.79 li
783.132 339.351 li
783.518 339.044 li
783.947 338.603 li
784.377 338.162 li
784.802 337.72 li
785.223 337.274 li
785.637 336.829 li
786.044 336.382 li
786.447 335.93 li
786.802 335.611 li
787.192 335.157 li
787.586 334.705 li
787.976 334.25 li
788.352 333.789 li
788.72 333.33 li
789.093 332.868 li
789.453 332.403 li
789.755 332.065 li
790.103 331.598 li
790.441 331.125 li
790.781 330.654 li
791.105 330.176 li
791.428 329.699 li
791.739 329.218 li
792.048 328.736 li
792.343 328.248 li
792.585 327.889 li
792.87 327.4 li
793.146 326.907 li
793.41 326.409 li
793.676 325.91 li
793.923 325.407 li
794.172 324.903 li
794.401 324.396 li
794.585 324.017 li
794.8 323.502 li
795.018 322.988 li
795.221 322.469 li
795.417 321.948 li
795.6 321.422 li
795.784 320.896 li
795.952 320.367 li
796.071 319.967 li
796.224 319.428 li
796.376 318.894 li
796.511 318.352 li
796.646 317.809 li
796.771 317.264 li
796.885 316.713 li
796.995 316.162 li
797.048 315.741 li
797.141 315.183 li
797.229 314.626 li
797.307 314.063 li
797.383 313.502 li
797.442 312.934 li
797.505 312.363 li
797.555 311.794 li
797.604 311.223 li
797.593 310.778 li
797.624 310.198 li
797.652 309.62 li
797.675 309.039 li
797.688 308.456 li
797.695 307.869 li
797.702 307.283 li
797.699 306.693 li
797.646 306.233 li
797.638 305.641 li
797.624 305.049 li
797.604 304.453 li
797.58 303.857 li
797.55 303.257 li
797.52 302.658 li
797.484 302.057 li
797.397 301.587 li
797.356 300.984 li
797.316 300.38 li
797.271 299.776 li
797.22 299.17 li
797.173 298.564 li
797.12 297.958 li
797.063 297.351 li
796.963 296.875 li
796.906 296.266 li
796.85 295.658 li
796.792 295.049 li
796.733 294.441 li
796.679 293.833 li
796.621 293.225 li
796.564 292.615 li
796.508 292.008 li
796.405 291.533 li
796.351 290.925 li
796.298 290.317 li
796.252 289.711 li
796.2 289.107 li
796.153 288.501 li
796.113 287.899 li
796.072 287.297 li
795.986 286.826 li
795.951 286.224 li
795.922 285.625 li
795.891 285.027 li
795.868 284.429 li
795.849 283.833 li
795.834 283.242 li
795.823 282.65 li
795.771 282.191 li
795.769 281.599 li
795.775 281.014 li
795.782 280.428 li
795.796 279.842 li
795.82 279.263 li
795.849 278.684 li
795.876 278.105 li
795.867 277.661 li
795.916 277.087 li
795.964 276.52 li
796.026 275.949 li
796.089 275.379 li
796.165 274.821 li
796.241 274.259 li
796.329 273.697 li
796.42 273.144 li
796.476 272.72 li
796.587 272.167 li
796.699 271.617 li
796.825 271.075 li
796.96 270.531 li
797.096 269.99 li
797.248 269.454 li
797.398 268.916 li
797.518 268.517 li
797.686 267.984 li
797.869 267.459 li
798.054 266.936 li
798.255 266.413 li
798.453 265.895 li
798.668 265.381 li
798.888 264.865 li
799.067 264.486 li
799.298 263.98 li
799.548 263.474 li
799.798 262.971 li
800.062 262.475 li
800.325 261.976 li
800.601 261.48 li
800.885 260.994 li
801.124 260.635 li
801.422 260.147 li
801.73 259.663 li
802.04 259.184 li
802.364 258.707 li
802.688 258.228 li
803.027 257.76 li
803.366 257.284 li
803.716 256.816 li
804.018 256.478 li
804.377 256.015 li
804.75 255.555 li
805.12 255.09 li
805.496 254.635 li
805.885 254.178 li
806.277 253.724 li
806.67 253.271 li
807.022 252.953 li
807.425 252.501 li
807.834 252.052 li
808.249 251.609 li
808.667 251.163 li
809.094 250.721 li
809.522 250.282 li
809.952 249.839 li
810.338 249.53 li
810.774 249.091 li
811.213 248.656 li
811.654 248.218 li
812.103 247.783 li
812.554 247.35 li
813 246.915 li
813.451 246.48 li
813.907 246.05 li
814.31 245.748 li
814.768 245.316 li
815.224 244.882 li
815.224 244.882 mo
815.681 244.452 li
816.137 244.022 li
816.595 243.589 li
817.052 243.159 li
817.509 242.729 li
817.915 242.427 li
818.367 241.992 li
818.823 241.562 li
819.274 241.129 li
819.723 240.692 li
820.173 240.26 li
820.62 239.824 li
821.059 239.387 li
821.45 239.081 li
821.887 238.641 li
822.32 238.204 li
822.752 237.762 li
823.183 237.323 li
823.606 236.88 li
824.027 236.435 li
824.441 235.991 li
824.8 235.672 li
825.202 235.222 li
825.605 234.772 li
825.998 234.318 li
826.391 233.866 li
826.779 233.409 li
827.155 232.951 li
827.527 232.49 li
827.897 232.029 li
828.208 231.693 li
828.559 231.227 li
828.907 230.758 li
829.248 230.285 li
829.587 229.813 li
829.909 229.338 li
830.232 228.86 li
830.544 228.378 li
830.801 228.026 li
831.098 227.539 li
831.391 227.048 li
831.675 226.56 li
831.949 226.066 li
832.215 225.569 li
832.479 225.071 li
832.727 224.568 li
832.925 224.195 li
833.156 223.686 li
833.389 223.177 li
833.604 222.663 li
833.821 222.148 li
834.024 221.63 li
834.221 221.109 li
834.405 220.582 li
834.539 220.188 li
834.707 219.656 li
834.876 219.127 li
835.027 218.59 li
835.179 218.054 li
835.314 217.512 li
835.45 216.969 li
835.576 216.425 li
835.69 215.875 li
835.748 215.454 li
835.852 214.9 li
835.944 214.343 li
836.033 213.785 li
836.109 213.223 li
836.188 212.662 li
836.247 212.094 li
836.307 211.525 li
836.31 211.085 li
836.358 210.512 li
836.398 209.938 li
836.427 209.359 li
836.457 208.78 li
836.48 208.201 li
836.493 207.615 li
836.499 207.029 li
836.458 206.575 li
836.452 205.983 li
836.448 205.394 li
836.441 204.802 li
836.427 204.21 li
836.407 203.614 li
836.384 203.016 li
836.352 202.418 li
836.271 201.949 li
836.237 201.348 li
836.201 200.746 li
836.16 200.145 li
836.121 199.54 li
836.074 198.937 li
836.023 198.332 li
835.978 197.725 li
835.926 197.12 li
835.817 196.642 li
835.768 196.036 li
835.709 195.427 li
835.653 194.817 li
835.596 194.21 li
835.539 193.601 li
835.482 192.995 li
835.426 192.386 li
835.318 191.908 li
835.263 191.299 li
835.211 190.693 li
835.154 190.084 li
835.103 189.477 li
835.056 188.873 li
835.005 188.267 li
834.959 187.661 li
834.866 187.188 li
834.826 186.586 li
834.79 185.986 li
834.757 185.385 li
834.727 184.787 li
834.696 184.188 li
834.671 183.59 li
834.65 182.996 li
834.636 182.402 li
834.578 181.941 li
834.575 181.349 li
834.572 180.76 li
834.58 180.174 li
834.587 179.587 li
834.6 179.004 li
834.623 178.423 li
834.652 177.844 li
834.632 177.395 li
834.671 176.82 li
834.721 176.249 li
834.771 175.677 li
834.832 175.11 li
834.893 174.542 li
834.968 173.979 li
835.047 173.417 li
835.082 172.989 li
835.176 172.433 li
835.279 171.879 li
835.39 171.33 li
835.503 170.78 li
835.629 170.234 li
835.766 169.693 li
835.898 169.151 li
836.003 168.745 li
836.154 168.207 li
836.322 167.676 li
836.49 167.146 li
836.675 166.62 li
836.858 166.095 li
837.057 165.576 li
837.26 165.056 li
837.473 164.541 li
837.641 164.157 li
837.872 163.648 li
838.104 163.139 li
838.352 162.637 li
838.602 162.133 li
838.866 161.635 li
839.129 161.138 li
839.404 160.644 li
839.641 160.284 li
839.932 159.794 li
840.227 159.309 li
840.533 158.825 li
840.846 158.343 li
841.169 157.867 li
841.493 157.389 li
841.832 156.917 li
842.12 156.574 li
842.472 156.107 li
842.82 155.64 li
843.182 155.174 li
843.553 154.714 li
843.924 154.254 li
844.302 153.794 li
844.688 153.339 li
845.03 153.016 li
845.423 152.563 li
845.828 152.111 li
846.229 151.661 li
846.638 151.214 li
847.054 150.767 li
847.472 150.323 li
847.897 149.881 li
848.327 149.44 li
848.707 149.129 li
849.142 148.69 li
849.578 148.253 li
850.02 147.815 li
850.46 147.377 li
850.906 146.944 li
851.358 146.51 li
851.803 146.076 li
852.207 145.772 li
852.662 145.342 li
853.115 144.908 li
853.572 144.476 li
854.027 144.046 li
854.486 143.614 li
854.941 143.182 li
855.398 142.752 li
855.806 142.45 li
856.264 142.017 li
856.72 141.587 li
857.17 141.153 li
857.629 140.722 li
858.078 140.289 li
858.526 139.854 li
858.977 139.42 li
859.373 139.115 li
@
set_def_flat
4.04309 lw
702.971 531.953 mo
697.409 548.784 li
697.5 548.987 li
715.849 540.862 li
@
gsave
316.979 149.128 mo
320.162 149.128 li
320.162 69.7354 li
316.979 69.7354 li
cp
clp
318.57 149.128 mo
318.57 69.7354 li
f
3.18269 lw
0 lj
4 ml
318.57 149.128 mo
318.57 69.7354 li
@
grestore
gsave
305.28 74.8115 mo
331.457 74.8115 li
331.457 55.1484 li
305.28 55.1484 li
cp
clp
322.52 64.874 mo
324.447 68.2773 326.218 70.4902 328.27 73.2202 cv
308.828 73.2202 li
309.699 72.2427 312.654 68.2773 314.579 64.874 cv
316.638 61.2305 318.048 57.9287 318.55 55.7856 cv
319.052 57.9287 320.462 61.2305 322.52 64.874 cv
cp
f
3.18269 lw
0 lj
4 ml
322.52 64.874 mo
324.447 68.2773 326.218 70.4902 328.27 73.2202 cv
308.828 73.2202 li
309.699 72.2427 312.654 68.2773 314.579 64.874 cv
316.638 61.2305 318.048 57.9287 318.55 55.7856 cv
319.052 57.9287 320.462 61.2305 322.52 64.874 cv
cp
@
grestore
%ADOBeginSubsetFont: HIBBAA+Symbol Initial
%ADOt1write: (1.0.24)
12 dict dup begin
/FontType 1 def
/FontName /HIBBAA+Symbol def
/FontInfo 7 dict dup begin
/Notice (Copyright (c) 1985, 1987, 1989, 1990, 1997 Adobe Systems Incorporated. All rights reserved.) def
/Weight (Medium) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 43 /plus put
dup 49 /one put
dup 71 /Gamma put
dup 95 /underscore put
def
/FontBBox {-180 -293 1090 1010} def
end
systemdict begin
dup /Private
9 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-19 -0 673 688 487 500] def
/StdHW [92] def
/StdVW [85] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
5 dict dup begin
/plus <1C60D8A8C9B79676A3B749CD95BB065B78DC26D9591EC23FC563C31D7
200E789EBB7771AB826A02ACBD0AAFF51201E9555091FD7169BAE4C> |-
/one <1C60D8A8C9B7A73DC54E0D6CD3D5FF71BFC1591E9A6BDC0E5114E72675
8F3266F02439FDC9C2CEEE92C355C9467AF224B8EB7ED7882BBA92F5EE0FFAE0
245A29FC9A7975F1E6BF3CDD2DA91FF0> |-
/Gamma <1C60D8A8C9B7C05465AA31B7F7197D4ED4340BBB8EF33BC85414001D
80F19014E90E35517432EBC8A3D28A15168E878098164BC3B44308A9CA09873D
D55054372442DB44EA9DBBA32F4DBEEE59DFB292B6BEE0EAA2785DF09AB747A0
AB6DC1EE726F> |-
/underscore <1C60D8A8C9B7A73DB5FD3C3C90DEA7FEC65CD41092000A465F8
934C92B34> |-
/.notdef <1C60D8A8C9B8707C25> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/RBZTVS+Symbol /HIBBAA+Symbol findfont ct_VMDictPut
/RBZTVS+Symbol*1 
[43{/.notdef}rp /plus 5{/.notdef}rp /one 21{/.notdef}rp /Gamma 23{/.notdef}rp /underscore 
160{/.notdef}rp]
RBZTVS+Symbol nf
RBZTVS+Symbol*1 [46.2453 0 0 -46.2453 0 0 ]msf
79.6377 114.877 mo
(G)sh
%ADOBeginSubsetFont: PBAAAA+ArialMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal RBZTVR+ArialMT gcheck setglobal} if
2 108 11 <0001007cfe51026005d30010004eb0852b58400a270f0100101207081010
b80133b3009f0e08b801334011079f0e5e0003100320030303ac119d8c18
2b10f65dfdf6ed10f6ed003f3c3f3c3130015d1bb3000f070100183f3f30
3159012602113437363733060706070615100101df95ce4d5abc8179273d
232b012bfe51bc01f8010eeedafdfbd0598a96bbbdfe1ffe2000>RBZTVR+ArialMT AddT42Char 
2 254 12 <0001007cfe51026005d300100076b0852b58400c2802281002090a100100
1209b80133b30a9f0301b80133b4009f035e0eb8fff0b4101002550eb8ff
f8b40f0f02550eb8ffe4b40d0d02550eb8ffec400f0a0a02550f0e1f0e02
0eac129d8c182b10f65d2b2b2b2bfdf6ed10f6ed003f3c3f3c3130015d1b
b3010f090100183f3f3031591323001134272627262733161716151002fd
81012b2b223d277a81bc5a4dcffe5101e001e1bcb9968a5ad2fbfddaeefe
f2fe0800>RBZTVR+ArialMT AddT42Char 
2 1502 75 <00010087000003e805ba001401c9b0852b58b90016ffc0b315173403b8ff
e0400e0d0d0655250435034503ba0d0403b8ffe040151719341708110c11
14030501000f1c0507140b0a0c4110fff8000d000d01400056000cfff200
0b000b01400056000cfff4000c000c01404027560c250940333634ff0901
c0090116400b0b025516401010025509281010025509140e0e025509b8ff
ec40110d0d025509040c0c0255091a0b0b025509b8fff6400b0b0b065509
141010065509b8fff8400b0d0d0655090a0f0f065509b8fff6b60c0c0655
094e16b8ffc04017343634b016f016027016a016b016ff1604160214080d
0db80140b456140c0c0cb80140b456140e0b0bb80140b45614250100b8ff
c04010333634f0000100002000d000e0000400b8fffab41010025500b8ff
fa40170e0e025500040c0c025500080b0b025500040b0b065500b8fffa40
160f0f065500020c0c065500020d0d0655004e154750182b10f62b2b2b2b
2b2b2b2b5d712b3cfd2b2b2b3c105d712bf42b2b2b2b2b2b2b2b2b2b2b2b
5d712bed2b2b2b003f3c3fed3f1139113901123931304379400e060e0725
0e060c1b010d080f1b01002b012b2b81002b5d2b012b1bb60b0a000a0305
0fb80330b46c0507010000183f3f2b393f3f303159331133113633321616
15112311342623220606151187b47ec076ae4bb4756b508d3c05bafdf292
5da49cfd5f02a1877b538e7dfdbb>RBZTVR+ArialMT AddT42Char 
2 2026 81 <00010087000003e6043e001601e6b0852b5840130503061302a810b810e3
03e713f003f6130604b8fff040220b0d347910019810d018e018ff180420
08140e1416121c05070106160d0a0d0e0c0e4110fff8000d000d01400056
000efff2000b000b01400056000efff4000c000c0140401c560e24184010
10025518400b0b02550b28101002550b140e0e02550bb8ffec40110d0d02
550b040c0c02550b220b0b02550bb8fff4400b0b0b06550b14101006550b
b8fff9400b0d0d06550b0a0f0f06550bb8fff640120c0c06550b40333634
ff0b01ff0b010b4e18b8ffc0401a343634b018f018027018a018b018c018
04180302331516080d0db80140b456160e0b0bb80140b456160c0c0cb801
40b45616250100b8fff6b41111025500b8fffab41010025500b8fffa4017
0e0e025500040c0c0255000a0b0b025500040b0b065500b8fffa40110f0f
065500020c0c065500040d0d065500b8ffc04012333634f0000100002000
d000e00004004e1710f65d712b2b2b2b2b2b2b2b2b2b3cfd2b2b2b3cf43c
105d712bf65d712b2b2b2b2b2b2b2b2b2b2b2b2bed2b2b2b3c103c003f3c
3f3fed11390112393130437940160611090a080a070a0306102611060e1b
010f0a121b01002b012b2b2a81015d71002b5d711b40090d0a160a010603
0512b80330b26c050700183f2b323f3f3f30315933113315363332161617
1615112311342626232206151187a275dd60a150100ab42a6b4873a70426
97af45704d327dfd7302866e6d4192ccfdbc>RBZTVR+ArialMT AddT42Char 
2 2584 85 <00010085000002c6043e00110107b0852b58403b2f130110040123043404
4304530466047404060911080908090d1311090d000308010b1c06070106
000a09289008010822201301130222110e0b0bb80140b45611080d0db801
40b456110c0c0cb80140b45611250100b8ffc04010333634f00001000020
00d000e0000400b8fff8b41010025500b8fff840110e0e025500040c0c02
5500060b0b025500b8fffcb41010065500b8fff440160f0f065500060c0c
065500080d0d0655004e1247c4182b10f62b2b2b2b2b2b2b2b5d712b3cfd
2b2b2be4105df472e4003f3f3fed11393911393901111239390010c9870e
7dc43130005d72015d1bb7000a01060903060bb80336b26c060700183f2b
32323f3f30315933113315363633321707262322060706151185a23e693f
5b5e3e42423b5e141e0426a171483aa727473f6072fdd400>RBZTVR+ArialMT AddT42Char 
2 2908 87 <00010024fff2022a05990017016eb0852b584120000cfffe000c000c0140
0056000bfffe000c000c014000560008fffe000c000c014000560007fffe
000c000c014000560006fffe000c000c01400056000affc0b323263409b8
ffc0402423263480190100010c0d0a0103001610092b0f0a06161c030b0f
10220022010d12080d0db80140b456120e0b0bb80140b456120a0c0cb801
4040225612250c01ff070845094560077007800790070400072007a007b0
07c007d0070607b8ffeeb41010025507b8fff4b40f0f025507b8fff2b40e
0e025507b8fff8b40d0d025507b8fff8b40c0c025507b8fffab410100655
07b8fff0400b0f0f065507060c0c065507b8ffe8b40d0d065507ba026a00
180136b166182b10f62b2b2b2b2b2b2b2b2b5d71f4e410ed3cfd2b2b2b3c
10e4f43c003fed3f3cfd3c1139123911333310c93130015d2b2b2b2b2b2b
2b1bb10316b80332b46c030b0100b8033240096c010a0d0d110e0a09b803
2db26c0a0600183f2b3332322f3f2b3f2b30315925170623222626351123
353311371133152311141616333202101a4c3c626c2c8484b3b5b5132b28
1ea19f103e65a202638c01076cfe8d8cfd934d2c1a00>RBZTVR+ArialMT AddT42Char 
RBZTVR+ArialMT /CharStrings get begin
/parenleft 11 def
/parenright 12 def
/h 75 def
/n 81 def
/r 85 def
/t 87 def
end
RBZTVR+ArialMT /Encoding get
dup 40 /parenleft put
dup 41 /parenright put
dup 104 /h put
dup 110 /n put
dup 114 /r put
dup 116 /t put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/RBZTVR+ArialMT*1 
[40{/.notdef}rp /parenleft /parenright /.notdef /plus 4{/.notdef}rp /zero /one 
54{/.notdef}rp /h 5{/.notdef}rp /n 3{/.notdef}rp /r /.notdef /t 
139{/.notdef}rp]
RBZTVR+ArialMT nf
RBZTVR+ArialMT*1 [34.684 0 0 -34.684 0 0 ]msf
107.523 122.585 mo
(r)sh
RBZTVR+ArialMT*1 [46.2453 0 0 -46.2453 0 0 ]msf
119.074 114.877 mo
(\()sh
134.473 114.877 mo
(n)sh
RBZTVR+ArialMT*1 [34.684 0 0 -34.684 0 0 ]msf
160.193 122.585 mo
(t)sh
169.835 122.585 mo
(h)sh
RBZTVR+ArialMT*1 [46.2453 0 0 -46.2453 0 0 ]msf
189.119 114.877 mo
(+)sh
216.126 114.877 mo
(1)sh
241.838 114.877 mo
(\))sh
RBZTVS+Symbol*1 [46.2453 0 0 -46.2453 0 0 ]msf
333.13 114.877 mo
(G)sh
RBZTVR+ArialMT*1 [34.684 0 0 -34.684 0 0 ]msf
361.016 122.585 mo
(r)sh
RBZTVR+ArialMT*1 [46.2453 0 0 -46.2453 0 0 ]msf
372.566 114.877 mo
(n)sh
RBZTVR+ArialMT*1 [34.684 0 0 -34.684 0 0 ]msf
398.285 122.585 mo
(t)sh
407.927 122.585 mo
(h)sh
RBZTVS+Symbol*1 [46.2453 0 0 -46.2453 0 0 ]msf
810.998 301.144 mo
(G)sh
838.884 301.144 mo
(_)sh
112.18 301.144 mo
(G)sh
140.066 316.559 mo
(+)sh
425.62 301.144 mo
(G)sh
453.506 316.559 mo
(1)sh
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
/RBZTVR+ArialMT*1 uf
/RBZTVR+ArialMT uf
/PBAAAA+ArialMT uf
/RBZTVS+Symbol*1 uf
/RBZTVS+Symbol uf
/HIBBAA+Symbol uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
